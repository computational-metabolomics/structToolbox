[{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"‘structToolbox’ includes extensive set data (pre-)processing analysis tools metabolomics omics, strong emphasis statistics machine learning. methods tools implemented using class-based templates available via struct (Statistics R Using Class-based Templates) package. aim vignette introduce reader basic advanced structToolbox-based operations implementations, use struct objects, getting/setting methods/parameters, building workflows analysis mass spectrometry (MS) nuclear magnetic resonance (NMR)-based Metabolomics proteomics datasets. workflows demonstrated include wide range methods tools including pre-processing filtering, normalisation scaling, followed univariate /multivariate statistics, machine learning approaches.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"latest version structToolbox compatible current R version can installed using BiocManager. number additional packages needed vignette.","code":"# install BiocManager if not present if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  # install structToolbox and dependencies BiocManager::install(\"structToolbox\") ## install additional bioc packages for vignette if needed #BiocManager::install(c('pmp', 'ropls', 'BiocFileCache'))  ## install additional CRAN packages if needed #install.packages(c('cowplot', 'openxlsx'))  suppressPackageStartupMessages({     # Bioconductor packages     library(structToolbox)     library(pmp)     library(ropls)     library(BiocFileCache)        # CRAN libraries     library(ggplot2)     library(gridExtra)     library(cowplot)     library(openxlsx) })   # use the BiocFileCache bfc <- BiocFileCache(ask = FALSE)"},{"path":[]},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"introduction-1","dir":"Articles","previous_headings":"Introduction to struct objects, including models, model sequences, model charts and ontology.","what":"Introduction","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"PCA (Principal Component Analysis) PLS (Partial Least Squares) commonly applied methods exploring analysing multivariate datasets. use two statistical methods demonstrate different types struct (STatistics R Using Class Templates) objects available part structToolbox objects (.e. class templates) can used conduct unsupervised supervised multivariate statistical analysis.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"dataset","dir":"Articles","previous_headings":"Introduction to struct objects, including models, model sequences, model charts and ontology.","what":"Dataset","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"demonstration purposes use “Iris” dataset. famous (Fisher’s Anderson’s) dataset contains measurements sepal length width petal length width, centimeters, 50 flowers 3 class Iris. class Iris setosa, versicolor, virginica. See (https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/iris.html) information. Note: vignette also compatible Direct infusion mass spectrometry metabolomics “benchmark” dataset described Kirwan et al., Sci Data 1, 140012 (2014) (https://doi.org/10.1038/sdata.2014.12). datasets available part structToolbox package already prepared DatasetExperiment object.","code":"## Iris dataset (comment if using MTBLS79 benchmark data) D = iris_DatasetExperiment() D$sample_meta$class = D$sample_meta$Species  ## MTBLS (comment if using Iris data) # D = MTBLS79_DatasetExperiment(filtered=TRUE) # M = pqn_norm(qc_label='QC',factor_name='sample_type') +  #   knn_impute(neighbours=5) + #   glog_transform(qc_label='QC',factor_name='sample_type') + #   filter_smeta(mode='exclude',levels='QC',factor_name='sample_type') # M = model_apply(M,D) # D = predicted(M)  # show info D ## A \"DatasetExperiment\" object ## ---------------------------- ## name:          Fisher's Iris dataset ## description:   This famous (Fisher's or Anderson's) iris data set gives the measurements in centimeters of ##                  the variables sepal length and width and petal length and width, ##                  respectively, for 50 flowers from each of 3 species of iris. The species are ##                  Iris setosa, versicolor, and virginica. ## data:          150 rows x 4 columns ## sample_meta:   150 rows x 2 columns ## variable_meta: 4 rows x 1 columns"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"datasetexperiment-objects","dir":"Articles","previous_headings":"Introduction to struct objects, including models, model sequences, model charts and ontology. > Dataset","what":"DatasetExperiment objects","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"DatasetExperiment object extension SummarizedExperiment class used Bioconductor community. contains three main parts: data data frame containing measured data sample. sample_meta data frame additional information related samples e.g. group labels. variable_meta data frame additional information related variables (features) e.g. annotations Like struct objects also contains name description fields (called “slots” R language). key difference DatasetExperiment SummarizedExperiment objects data transposed. .e. DatasetExperiment objects samples rows features columns, opposite true SummarizedExperiment objects. slots accessible using dollar notation.","code":"# show some data head(D$data[,1:4]) ##   Sepal.Length Sepal.Width Petal.Length Petal.Width ## 1          5.1         3.5          1.4         0.2 ## 2          4.9         3.0          1.4         0.2 ## 3          4.7         3.2          1.3         0.2 ## 4          4.6         3.1          1.5         0.2 ## 5          5.0         3.6          1.4         0.2 ## 6          5.4         3.9          1.7         0.4"},{"path":[]},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"statistical-models","dir":"Articles","previous_headings":"Introduction to struct objects, including models, model sequences, model charts and ontology. > Using struct model objects","what":"Statistical models","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"can apply e.g. PCA first need create PCA object. object contains inputs, outputs methods needed apply PCA. can set parameters number components PCA model created, can also use dollar notation change/view later. inputs model can listed using param_ids(object): summary object can printed console:","code":"P = PCA(number_components=15) P$number_components=5 P$number_components ## [1] 5 param_ids(P) ## [1] \"number_components\" P ## A \"PCA\" object ## -------------- ## name:          Principal Component Analysis (PCA) ## description:   PCA is a multivariate data reduction technique. It summarises the data in a smaller number of ##                  Principal Components that maximise variance. ## input params:  number_components  ## outputs:       scores, loadings, eigenvalues, ssx, correlation, that  ## predicted:     that ## seq_in:        data"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"model-sequences","dir":"Articles","previous_headings":"Introduction to struct objects, including models, model sequences, model charts and ontology. > Using struct model objects","what":"Model sequences","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"Unless good reason , usually sensible mean centre columns data PCA. Using STRUCT framework can create model sequence mean centre apply PCA mean centred data. structToolbox mean centring PCA model objects, joining using “+” creates model_sequence object. model_sequence outputs first object (mean centring) automatically passed inputs second object (PCA), allows chain together modelling steps order build workflow. objects model_sequence can accessed indexing, can combine dollar notation. example, PCA object second object sequence can access number components follows:","code":"M = mean_centre() + PCA(number_components = 4) M[2]$number_components ## [1] 4"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"trainingtesting-models","dir":"Articles","previous_headings":"Introduction to struct objects, including models, model sequences, model charts and ontology. > Using struct model objects","what":"Training/testing models","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"Model model_sequence objects need trained using data form DatasetExperiment object. example, PCA model sequence created (M) can trained using iris DatasetExperiment object (‘D’). model sequence now mean centred original data calculated PCA scores loadings. Model objects can used generate predictions test datasets. PCA model sequence involves mean centring test data using mean training data, projecting centred test data onto PCA model using loadings. outputs stored model sequence can accessed using dollar notation. example just use training data (sometimes called autoprediction), PCA allows us explore training data detail. Sometimes models don’t make use training/test approach e.g. univariate statsitics, filtering etc. models model_apply method can used instead. models provide training/test methods, model_apply applies autoprediction default .e. short-cut applying model_train model_predict data. available outputs object can listed accessed like input params, using dollar notation:","code":"M = model_train(M,D) M = model_predict(M,D) M = model_apply(M,D) output_ids(M[2]) ## [1] \"scores\"      \"loadings\"    \"eigenvalues\" \"ssx\"         \"correlation\" ## [6] \"that\" M[2]$scores ## A \"DatasetExperiment\" object ## ---------------------------- ## name:           ## description:    ## data:          150 rows x 4 columns ## sample_meta:   150 rows x 2 columns ## variable_meta: 4 rows x 1 columns"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"model-charts","dir":"Articles","previous_headings":"Introduction to struct objects, including models, model sequences, model charts and ontology. > Using struct model objects","what":"Model charts","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"struct framework includes chart objects. Charts associated model object can listed. Like model objects, chart objects need created can used. plot PCA scores plot mean centred PCA model.  Note indexing PCA model required pca_scores_plot object requires PCA object input, model_sequence. make changes input parameters chart, chart_plot must called see effects.  chart_plot method returns ggplot object can easily combine plots using gridExtra cowplot packages example.","code":"chart_names(M[2]) ## [1] \"pca_biplot\"           \"pca_correlation_plot\" \"pca_dstat_plot\"       ## [4] \"pca_loadings_plot\"    \"pca_scores_plot\"      \"pca_scree_plot\" C = pca_scores_plot(factor_name='class') # colour by class chart_plot(C,M[2]) # add petal width to meta data of pca scores M[2]$scores$sample_meta$example=D$data[,1] # update plot C$factor_name='example' chart_plot(C,M[2]) # scores plot C1 = pca_scores_plot(factor_name='class') # colour by class g1 = chart_plot(C1,M[2])  # scree plot C2 = pca_scree_plot() g2 = chart_plot(C2,M[2])  # arange in grid grid.arrange(grobs=list(g1,g2),nrow=1)"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"ontology","dir":"Articles","previous_headings":"Introduction to struct objects, including models, model sequences, model charts and ontology. > Using struct model objects","what":"Ontology","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"Within struct framework (structToolbox) ontology slot provided allow standardardised definitions objects inputs outputs using Ontology Lookup Service (OLS). example, STATO general purpose STATistics Ontology (http://stato-ontology.org). webpage: aim provide coverage processes statistical tests, conditions application, information needed resulting statistical methods, probability distributions, variables, spread variation metrics. STATO also covers aspects experimental design description plots graphical representations commonly used provide visual cues data distribution layout assist review results. ontology object can set assigning ontology term identifier ontology slot struct_class object design time. ids can listed using $ notation: ontology method can used obtain detailed ontology information. cache = NULL struct package automatically attempt use OLS API (via rols package) obtain name description provided identifiers. used cached versions ontology definitions provided structToolbox package prevent issues connecting OLS API building package. Note ontology method returns definitions object (PCA) inputs/outputs (number_of_components).","code":"# create an example PCA object P=PCA()  # ontology for the PCA object P$ontology ## [1] \"OBI:0200051\" ontology(P,cache = ontology_cache()) # set cache = NULL (default) for online use ## [[1]] ## An object of class \"ontology_list\" ## Slot \"terms\": ## [[1]] ## term id:       OBI:0200051 ## ontology:      obi ## label:         principal components analysis dimensionality reduction ## description:   A principal components analysis dimensionality reduction is a dimensionality reduction ##                  achieved by applying principal components analysis and by keeping low-order principal ##                  components and excluding higher-order ones. ## iri:           http://purl.obolibrary.org/obo/OBI_0200051 ##  ##  ##  ## [[2]] ## An object of class \"ontology_list\" ## Slot \"terms\": ## [[1]] ## term id:       STATO:0000555 ## ontology:      stato ## label:         number of predictive components ## description:   number of predictive components is a count used as input to the principle component analysis ##                  (PCA) ## iri:           http://purl.obolibrary.org/obo/STATO_0000555"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"validating-supervised-statistical-models","dir":"Articles","previous_headings":"Introduction to struct objects, including models, model sequences, model charts and ontology.","what":"Validating supervised statistical models","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"Validation important aspect chemometric modelling. struct framework enables kind iterative model testing iterator objects.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"cross-validation","dir":"Articles","previous_headings":"Introduction to struct objects, including models, model sequences, model charts and ontology. > Validating supervised statistical models","what":"Cross-validation","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"Cross validation common technique assessing performance classification models. example use Partial least squares-discriminant analysis (PLS-DA) model. Data mean centred prior PLS, build model sequence first. iterator objects like k-fold cross-validation object (kfold_xval) can created just like struct object. Parameters can set creation using equals sign, accessed changed later using dollar notation. model cross-validated can set/accessed using models method. Alternatively, iterators can combined models using multiplication symbol shorthand models assignement method: run method can used iterator object. iterator run set model model sequence multiple times. case run cross-validation 5 times, splitting data different training test sets time. run method also needs metric specified, another type struct object. metric may calculated iterations, iteration, depending iterator type (resampling, permutation etc). cross-validation calculate “balanced accuracy” iterations. Note balanced_accuracy metric actually reports 1-accuracy, value 0 indicates perfect performance. standard deviation “sd” NA example one permutation. Like struct objects, iterators can chart objects associated . chart_names function list object. Charts iterator objects can plotted way charts object.  possible combine multiple iterators using multiplication symbol. equivalent nesting one iterator inside . example, can repeat cross-validation multiple times permuting sample order.","code":"M = mean_centre() + PLSDA(number_components=2,factor_name='class') M ## A model_seq object containing: ##  ## [1] ## A \"mean_centre\" object ## ---------------------- ## name:          Mean centre ## description:   The mean sample is subtracted from all samples in the data matrix. The features in the centred ##                  matrix all have zero mean. ## input params:  mode  ## outputs:       centred, mean_data, mean_sample_meta  ## predicted:     centred ## seq_in:        data ##  ## [2] ## A \"PLSDA\" object ## ---------------- ## name:          Partial least squares discriminant analysis ## description:   PLS is a multivariate regression technique that extracts latent variables maximising ##                  covariance between the input data and the response. The Discriminant Analysis ##                  variant uses group labels in the response variable. For >2 groups a 1-vs-all ##                  approach is used. Group membership can be predicted for test samples based on ##                  a probability estimate of group membership, or the estimated y-value. ## input params:  number_components, factor_name, pred_method  ## outputs:       scores, loadings, yhat, design_matrix, y, reg_coeff, probability, vip, pls_model, pred, threshold, sr, sr_pvalue  ## predicted:     pred ## seq_in:        data # create object XCV = kfold_xval(folds=5,factor_name='class')  # change the number of folds XCV$folds=10 XCV$folds ## [1] 10 models(XCV)=M models(XCV) ## A model_seq object containing: ##  ## [1] ## A \"mean_centre\" object ## ---------------------- ## name:          Mean centre ## description:   The mean sample is subtracted from all samples in the data matrix. The features in the centred ##                  matrix all have zero mean. ## input params:  mode  ## outputs:       centred, mean_data, mean_sample_meta  ## predicted:     centred ## seq_in:        data ##  ## [2] ## A \"PLSDA\" object ## ---------------- ## name:          Partial least squares discriminant analysis ## description:   PLS is a multivariate regression technique that extracts latent variables maximising ##                  covariance between the input data and the response. The Discriminant Analysis ##                  variant uses group labels in the response variable. For >2 groups a 1-vs-all ##                  approach is used. Group membership can be predicted for test samples based on ##                  a probability estimate of group membership, or the estimated y-value. ## input params:  number_components, factor_name, pred_method  ## outputs:       scores, loadings, yhat, design_matrix, y, reg_coeff, probability, vip, pls_model, pred, threshold, sr, sr_pvalue  ## predicted:     pred ## seq_in:        data # cross validation of a mean centred PLSDA model XCV = kfold_xval(         folds=5,         method='venetian',         factor_name='class') *        (mean_centre() + PLSDA(factor_name='class')) XCV = run(XCV,D,balanced_accuracy()) XCV$metric ##              metric mean sd ## 1 balanced_accuracy 0.11 NA chart_names(XCV) ## [1] \"kfoldxcv_grid\"   \"kfoldxcv_metric\" C = kfoldxcv_grid(   factor_name='class',   level=levels(D$sample_meta$class)[2]) # first level chart_plot(C,XCV) # permute sample order 10 times and run cross-validation P = permute_sample_order(number_of_permutations = 10) *      kfold_xval(folds=5,factor_name='class')*     (mean_centre() + PLSDA(factor_name='class',number_components=2)) P = run(P,D,balanced_accuracy()) P$metric ##              metric   mean          sd ## 1 balanced_accuracy 0.1095 0.004972145"},{"path":[]},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"introduction-2","dir":"Articles","previous_headings":"A typical workflow for processing and analysing mass spectrometry-based metabolomics data.","what":"Introduction","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"vignette provides overview structToolbox workflow implemented process (e.g. filter features, signal drift batch correction, normalise missing value imputation) mass spectrometry data. workflow exists methods part Peak Matrix Processing (pmp) package, including range additional filters described Kirwan et al., 2013, 2014. packages required vignette addition structToolbox:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"dataset-1","dir":"Articles","previous_headings":"A typical workflow for processing and analysing mass spectrometry-based metabolomics data.","what":"Dataset","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"demonstration purposes process analyse MTBLS79 dataset (‘Dataset 7:SFPM’ Kirwan et al., 2014. dataset represents systematic evaluation reproducibility multi-batch direct-infusion mass spectrometry (DIMS)-based metabolomics study cardiac tissue extracts. comprises twenty biological samples (cow vs. sheep) analysed repeatedly, 8 batches across 7 days, together concurrent set quality control (QC) samples. Data presented step data processing workflow available MetaboLights (https://www.ebi.ac.uk/metabolights/MTBLS79). MTBLS79_DatasetExperiment object included structToolbox package processed version MTBLS79 dataset available peak matrix processing (pmp) package. vignette describes step step structToolbox version created pmp version (.e. ‘Dataset 7:SFPM’ Scientific Data publication - https://doi.org/10.1038/sdata.2014.12). SummarizedExperiment object pmp package needs converted DatasetExperiment object use structToolbox. Full processing data set requires number steps. applied using single struct model sequence (model_seq).","code":"# the pmp SE object SE = MTBLS79  # convert to DE DE = as.DatasetExperiment(SE) DE$name = 'MTBLS79' DE$description = 'Converted from SE provided by the pmp package'  # add a column indicating the order the samples were measured in DE$sample_meta$run_order = 1:nrow(DE)  # add a column indicating if the sample is biological or a QC Type=as.character(DE$sample_meta$Class) Type[Type != 'QC'] = 'Sample' DE$sample_meta$Type = factor(Type)  # add a column for plotting batches DE$sample_meta$batch_qc = DE$sample_meta$Batch DE$sample_meta$batch_qc[DE$sample_meta$Type=='QC']='QC'  # convert to factors DE$sample_meta$Batch = factor(DE$sample_meta$Batch) DE$sample_meta$Type = factor(DE$sample_meta$Type) DE$sample_meta$Class = factor(DE$sample_meta$Class) DE$sample_meta$batch_qc = factor(DE$sample_meta$batch_qc)  # print summary DE ## A \"DatasetExperiment\" object ## ---------------------------- ## name:          MTBLS79 ## description:   Converted from SE provided by the pmp package ## data:          172 rows x 2488 columns ## sample_meta:   172 rows x 7 columns ## variable_meta: 2488 rows x 0 columns"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"signal-drift-and-batch-correction","dir":"Articles","previous_headings":"A typical workflow for processing and analysing mass spectrometry-based metabolomics data.","what":"Signal drift and batch correction","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"batch correction algorithm applied reduce intra- inter- batch variations dataset. Quality Control-Robust Spline Correction (QC-RSC) provided pmp package, wrapped structToolbox object called sb_corr. figure shows plot feature vs run order, correction. fitted spline batch shown grey. can seen correction removed instrument drift within batches.   additional step added published workflow remove feature corrected QCRCMS. can occur enough measured QC values within batch. QCRMS pmp package currently returns NA samples feature occurs. Features occurs excluded. output step output MTBLS79_DatasetExperiment(filtered=FALSE).","code":"M = # batch correction     sb_corr(       order_col='run_order',       batch_col='Batch',        qc_col='Type',        qc_label='QC',       spar_lim = c(0.6,0.8)      )  M = model_apply(M,DE) C = feature_profile(       run_order='run_order',       qc_label='QC',       qc_column='Type',       colour_by='batch_qc',       feature_to_plot='200.03196',       plot_sd=FALSE   )  # plot and modify using ggplot2  chart_plot(C,M,DE)+ylab('Peak area')+ggtitle('Before') chart_plot(C,predicted(M))+ylab('Peak area')+ggtitle('After') M2 = filter_na_count(       threshold=3,       factor_name='Batch'     ) M2 = model_apply(M2,predicted(M))  # calculate number of features removed nc = ncol(DE) - ncol(predicted(M2))  cat(paste0('Number of features removed: ', nc)) ## Number of features removed: 425"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"feature-filtering","dir":"Articles","previous_headings":"A typical workflow for processing and analysing mass spectrometry-based metabolomics data.","what":"Feature filtering","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"journal article three spectral cleaning steps applied. first filter Kruskal-Wallis test used identify features reliably detected QC samples (p < 0.0001) batches. follow parameters original article use multiple test correction (mtc = 'none'). make use univariate tests kw_rank_sum filter advanced features struct needed. Slots predicted, seq_in used ensure correct output univariate test connected correct input feature filter using filter_by_name. Another slot seq_fcn used extract relevant column predicted output compatible seq_in input. placeholder used “names” parameter (names = 'place_holder') input replaced output seq_fcn. second filter Wilcoxon Signed-Rank test. used identify features representative average biological samples (p < 1e-14). make use seq_in seq_fcn. Finally, RSD filter used remove features high analytical variation (QC RSD > 20 removed) output filter output MTBLS79_DatasetExperiment(filtered=TRUE).","code":"M3 = kw_rank_sum(       alpha=0.0001,       mtc='none',       factor_names='Batch',       predicted='significant'     ) +     filter_by_name(       mode='exclude',       dimension = 'variable',       seq_in = 'names',        names='seq_fcn', # this is a placeholder and will be replaced by seq_fcn       seq_fcn=function(x){return(x[,1])}     ) M3 = model_apply(M3, predicted(M2))  nc = ncol(predicted(M2)) - ncol(predicted(M3)) cat(paste0('Number of features removed: ', nc)) ## Number of features removed: 262 M4 = wilcox_test(       alpha=1e-14,       factor_names='Type',        mtc='none',        predicted = 'significant'     ) +     filter_by_name(       mode='exclude',       dimension='variable',       seq_in='names',        names='place_holder',       seq_fcn=function(x){return(x$significant)}     ) M4 = model_apply(M4, predicted(M3))  nc = ncol(predicted(M3)) - ncol(predicted(M4)) cat(paste0('Number of features removed: ', nc)) ## Number of features removed: 169 M5 = rsd_filter(      rsd_threshold=20,      factor_name='Type' ) M5 = model_apply(M5,predicted(M4))  nc = ncol(predicted(M4)) - ncol(predicted(M5)) cat(paste0('Number of features removed: ', nc)) ## Number of features removed: 53"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"normalisation-missing-value-imputation-and-scaling","dir":"Articles","previous_headings":"A typical workflow for processing and analysing mass spectrometry-based metabolomics data.","what":"Normalisation, missing value imputation and scaling","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"apply number common pre-processing steps filtered peak matrix identical steps applied described Kirwan et al. 2013, 2014. Probabilistic Quotient Normalisation (PQN) k-nearest neighbours imputation (k = 5) Generalised log transform (glog) steps prepare data multivariate analysis accounting sample concentration differences, imputing missing values scaling data.","code":"# peak matrix processing M6 = pqn_norm(qc_label='QC',factor_name='Type') +       knn_impute(neighbours=5) +      glog_transform(qc_label='QC',factor_name='Type') M6 = model_apply(M6,predicted(M5))"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"exploratory-analysis","dir":"Articles","previous_headings":"A typical workflow for processing and analysing mass spectrometry-based metabolomics data.","what":"Exploratory Analysis","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"Principal Component Analysis (PCA) can used visualise high-dimensional data. unsupervised method maximises variance reduced number latent variables, principal components.  plot similar Figure 3b original publication link. Sample replicates represented colours samples groups (C = cow S = Sheep) different shapes. Plotting scores colouring Batch indicates signal/batch correction effective batches overlapping.","code":"# PCA M7  = mean_centre() + PCA(number_components = 2)  # apply model sequence to data M7 = model_apply(M7,predicted(M6))  # plot pca scores C = pca_scores_plot(factor_name=c('Sample_Rep','Class'),ellipse='none') chart_plot(C,M7[2]) + coord_fixed() +guides(colour=FALSE) ## Warning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as ## of ggplot2 3.3.4. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. # chart object C = pca_scores_plot(factor_name=c('Batch'),ellipse='none') # plot chart_plot(C,M7[2]) + coord_fixed()"},{"path":[]},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"introduction-3","dir":"Articles","previous_headings":"Partial Least Squares (PLS) analysis of a untargeted LC-MS-based clinical metabolomics dataset.","what":"Introduction","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"aim vignette demonstrate 1) apply validate Partial Least Squares (PLS) analysis using structToolbox, 2) reproduce statistical analysis Thevenot et al. (2015) 3. compare different implementations PLS.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"dataset-2","dir":"Articles","previous_headings":"Partial Least Squares (PLS) analysis of a untargeted LC-MS-based clinical metabolomics dataset.","what":"Dataset","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"objective original study : > …study influence age, body mass index (bmi), gender metabolite concentrations urine, analysing 183 samples cohort adults liquid chromatography coupled high-resolution mass spectrometry. Thevenot et al. (2015) “Sacurine” dataset needs converted DatasetExperiment object. ropls package provides data list containing dataMatrix, sampleMetadata variableMetadata.","code":"data('sacurine',package = 'ropls') # the 'sacurine' list should now be available  # move the annotations to a new column and rename the features by index to avoid issues # later when data.frames get transposed and names get checked/changed sacurine$variableMetadata$annotation=rownames(sacurine$variableMetadata) rownames(sacurine$variableMetadata)=1:nrow(sacurine$variableMetadata) colnames(sacurine$dataMatrix)=1:ncol(sacurine$dataMatrix)  # create DatasetExperiment DE = DatasetExperiment(data = data.frame(sacurine$dataMatrix),                        sample_meta = sacurine$sampleMetadata,                        variable_meta = sacurine$variableMetadata,                        name = 'Sacurine data',                        description = 'See ropls package documentation for details')  # print summary DE ## A \"DatasetExperiment\" object ## ---------------------------- ## name:          Sacurine data ## description:   See ropls package documentation for details ## data:          183 rows x 109 columns ## sample_meta:   183 rows x 3 columns ## variable_meta: 109 rows x 4 columns"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"data-preprocessing","dir":"Articles","previous_headings":"Partial Least Squares (PLS) analysis of a untargeted LC-MS-based clinical metabolomics dataset.","what":"Data preprocessing","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"Sacurine dataset used within vignette already pre-processed: signal drift batch effect correction intensities, urine profile normalized osmolality sample. Finally, data log10 transformed.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"exploratory-data-analysis","dir":"Articles","previous_headings":"Partial Least Squares (PLS) analysis of a untargeted LC-MS-based clinical metabolomics dataset.","what":"Exploratory data analysis","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"Since data already processed data can visualised using Principal Component Analysis (PCA) without pre-processing. ropls package automatically applies unit variance scaling (autoscaling) default. approach applied .  third plot coloured gender (C) identical Figure 2 ropls package vignette. structToolbox package provides range PCA-related diagnostic plots, including D-statistic, scree, loadings plots. plots can used explore variance data.","code":"# prepare model sequence M = autoscale() + PCA(number_components = 5) # apply model sequence to dataset M = model_apply(M,DE)  # pca scores plots g=list() for (k in colnames(DE$sample_meta)) {     C = pca_scores_plot(factor_name = k)     g[[k]] = chart_plot(C,M[2]) } # plot using cowplot plot_grid(plotlist=g, nrow=1, align='vh', labels=c('A','B','C')) C = pca_scree_plot() g1 = chart_plot(C,M[2])  C = pca_loadings_plot() g2 = chart_plot(C,M[2])  C = pca_dstat_plot(alpha=0.95) g3 = chart_plot(C,M[2])  p1=plot_grid(plotlist = list(g1,g2),align='h',nrow=1,axis='b') p2=plot_grid(plotlist = list(g3),nrow=1) plot_grid(p1,p2,nrow=2)"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"partial-least-squares-pls-analysis","dir":"Articles","previous_headings":"Partial Least Squares (PLS) analysis of a untargeted LC-MS-based clinical metabolomics dataset.","what":"Partial Least Squares (PLS) analysis","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"ropls package uses implementation (O)PLS algorithms. structToolbox uses pls package, interesting compare outputs approaches. simplicity scores plots compared.  plot similar fig.3 ropls vignette. Differences due inverted LV axes, common occurrence NIPALS algorithm (used structToolbox ropls) depends algorithm initialised. compare R2 values model structToolbox use regression model, instead discriminant model. convert gender factor numeric variable applying model.  ropls package automatically applies cross-validation asses performance PLSDA model. structToolbox applied separately give control approach used desired. default cross-validation used ropls package 7-fold cross-validation replicate . Training set R2: 0.6975706 0.6798415 0.646671 0.6532914 0.7109769 0.670777 0.6935344 Test set Q2: 0.5460723 validity model can assessed using permutation testing. return discriminant model.  permuted models balanced accuracy around 50%, expected dataset two groups. unpermuted models balanced accuracy around 90% therefore much better might expected occur chance.","code":"# prepare model sequence M = autoscale() + PLSDA(factor_name='gender') M = model_apply(M,DE)  C = pls_scores_plot(factor_name = 'gender') chart_plot(C,M[2]) # convert gender to numeric DE$sample_meta$gender=as.numeric(DE$sample_meta$gender)  # models sequence M = autoscale(mode='both') + PLSR(factor_name='gender',number_components=3) M = model_apply(M,DE)  # some diagnostic charts C = plsr_cook_dist() g1 = chart_plot(C,M[2])  C = plsr_prediction_plot() g2 = chart_plot(C,M[2])  C = plsr_qq_plot() g3 = chart_plot(C,M[2])  C = plsr_residual_hist() g4 = chart_plot(C,M[2])  plot_grid(plotlist = list(g1,g2,g3,g4), nrow=2,align='vh') # model sequence M = kfold_xval(folds=7, factor_name='gender') *      (autoscale(mode='both') + PLSR(factor_name='gender')) M = run(M,DE,r_squared()) # reset gender to original factor DE$sample_meta$gender=sacurine$sampleMetadata$gender # model sequence M = permutation_test(number_of_permutations = 10, factor_name='gender') *     kfold_xval(folds=7,factor_name='gender') *     (autoscale() + PLSDA(factor_name='gender',number_components = 3)) M = run(M,DE,balanced_accuracy())  C = permutation_test_plot(style='boxplot') chart_plot(C,M)+ylab('1 - balanced accuracy')"},{"path":[]},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"introduction-4","dir":"Articles","previous_headings":"Univariate and multivariate statistical analysis of a NMR-based clinical metabolomics dataset.","what":"Introduction","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"purpose vignette demonstrate different functionalities methods available part structToolbox reproduce data analysis reported Mendez et al., (2020) Chan et al., (2016).","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"dataset-3","dir":"Articles","previous_headings":"Univariate and multivariate statistical analysis of a NMR-based clinical metabolomics dataset.","what":"Dataset","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"1H-NMR dataset used described Mendez et al., (2020) vignette contains processed spectra urine samples obtained gastric cancer healthy patients Chan et al., (2016). experimental raw data available Metabolomics Workbench (PR000699) processed version available Excel data file. first step need reorganise convert Excel data file DatasetExperiment object. Using openxlsx package file can read directly R data.frame manipulated required.","code":"url = 'https://github.com/CIMCB/MetabWorkflowTutorial/raw/master/GastricCancer_NMR.xlsx'  # read in file directly from github... # X=read.xlsx(url)  # ...or use BiocFileCache path = bfcrpath(bfc,url) X = read.xlsx(path)  # sample meta data SM=X[,1:4] rownames(SM)=SM$SampleID # convert to factors SM$SampleType=factor(SM$SampleType) SM$Class=factor(SM$Class) # keep a numeric version of class for regression SM$Class_num = as.numeric(SM$Class)  ## data matrix # remove meta data X[,1:4]=NULL rownames(X)=SM$SampleID  # feature meta data VM=data.frame(idx=1:ncol(X)) rownames(VM)=colnames(X)  # prepare DatasetExperiment DE = DatasetExperiment(     data=X,     sample_meta=SM,     variable_meta=VM,     description='1H-NMR urinary metabolomic profiling for diagnosis of gastric cancer',     name='Gastric cancer (NMR)')  DE ## A \"DatasetExperiment\" object ## ---------------------------- ## name:          Gastric cancer (NMR) ## description:   1H-NMR urinary metabolomic profiling for diagnosis of gastric cancer ## data:          140 rows x 149 columns ## sample_meta:   140 rows x 5 columns ## variable_meta: 149 rows x 1 columns"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"data-pre-processing-and-quality-assessment","dir":"Articles","previous_headings":"Univariate and multivariate statistical analysis of a NMR-based clinical metabolomics dataset.","what":"Data pre-processing and quality assessment","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"good practice remove features may low quality, assess quality data general. Tutorial features QC-RSD > 20% 10% features missing retained. Note additional feature vs processing reported Mendez et. al. filters use >= <= instead > <. suitable scaling transformation PCA can used assess data quality. expected biological variance (samples) larger technical variance (QCs). workflow reproducing (link) following steps applied: log10 transform autoscaling (scaled unit variance) knn imputation (3 neighbours) transformed scaled matrix used input PCA. Using struct can chain steps single model sequence.","code":"# prepare model sequence M = rsd_filter(rsd_threshold=20,qc_label='QC',factor_name='Class') +     mv_feature_filter(threshold = 10,method='across',factor_name='Class')  # apply model M = model_apply(M,DE)  # get the model output filtered = predicted(M)  # summary of filtered data filtered ## A \"DatasetExperiment\" object ## ---------------------------- ## name:          Gastric cancer (NMR) ## description:   1H-NMR urinary metabolomic profiling for diagnosis of gastric cancer ## data:          140 rows x 53 columns ## sample_meta:   140 rows x 5 columns ## variable_meta: 53 rows x 1 columns # prepare the model sequence M = log_transform(base = 10) +     autoscale() +      knn_impute(neighbours = 3) +     PCA(number_components = 10)  # apply model sequence to data M = model_apply(M,filtered)  # get the transformed, scaled and imputed matrix TSI = predicted(M[3])  # scores plot C = pca_scores_plot(factor_name = 'SampleType') g1 = chart_plot(C,M[4])  # loadings plot C = pca_loadings_plot() g2 = chart_plot(C,M[4])  plot_grid(g1,g2,align='hv',nrow=1,axis='tblr')"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"univariate-statistics","dir":"Articles","previous_headings":"Univariate and multivariate statistical analysis of a NMR-based clinical metabolomics dataset.","what":"Univariate statistics","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"structToolbox provides number objects ttest, counting numbers features etc. brevity ttest calculated comparison workflow following (link). QC samples need excluded, data reduced GC groups.","code":"# prepare model TT = filter_smeta(mode='include',factor_name='Class',levels=c('GC','HE')) +        ttest(alpha=0.05,mtc='fdr',factor_names='Class')  # apply model TT = model_apply(TT,filtered)  # keep the data filtered by group for later filtered = predicted(TT[1])  # convert to data frame out=as_data_frame(TT[2])  # show first few features head(out) ##     t_statistic   t_p_value t_significant estimate.mean.GC estimate.mean.HE ## M4   -3.5392652 0.008421042          TRUE         26.47778         51.73947 ## M5    1.4296604 0.410396437         FALSE        265.11860        169.91500 ## M7    2.7456506 0.051494976         FALSE        118.52558         53.98718 ## M8   -2.1294198 0.178392032         FALSE         54.39535         79.26750 ## M11   0.5106536 0.776939682         FALSE        201.34390        171.27949 ## M14  -1.4786810 0.403091881         FALSE         61.53171         83.90250 ##         lower      upper ## M4  -39.56162 -10.961769 ## M5  -38.04747 228.454679 ## M7   17.60818 111.468619 ## M8  -48.20069  -1.543611 ## M11 -87.30604 147.434869 ## M14 -52.57754   7.835950"},{"path":[]},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"training-and-test-sets","dir":"Articles","previous_headings":"Univariate and multivariate statistical analysis of a NMR-based clinical metabolomics dataset. > Multivariate statistics and machine learning","what":"Training and Test sets","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"Splitting data training test sets important aspect machine learning. structToolbox implemented using split_data object random subsampling across whole dataset, stratified_split splitting based group sizes, approach used Mendez et al.","code":"# prepare model M = stratified_split(p_train=0.75,factor_name='Class') # apply to filtered data M = model_apply(M,filtered) # get data from object train = M$training train ## A \"DatasetExperiment\" object ## ---------------------------- ## name:          Gastric cancer (NMR) ##                (Training set) ## description:   • 1H-NMR urinary metabolomic profiling for diagnosis of gastric cancer ##                • A subset of the data has been selected as a training set ## data:          62 rows x 53 columns ## sample_meta:   62 rows x 5 columns ## variable_meta: 53 rows x 1 columns cat('\\n') test = M$testing test ## A \"DatasetExperiment\" object ## ---------------------------- ## name:          Gastric cancer (NMR) ##                (Testing set) ## description:   • 1H-NMR urinary metabolomic profiling for diagnosis of gastric cancer ##                • A subset of the data has been selected as a test set ## data:          21 rows x 53 columns ## sample_meta:   21 rows x 5 columns ## variable_meta: 53 rows x 1 columns"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"optimal-number-of-pls-components","dir":"Articles","previous_headings":"Univariate and multivariate statistical analysis of a NMR-based clinical metabolomics dataset. > Multivariate statistics and machine learning","what":"Optimal number of PLS components","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"Mendez et al k-fold cross-validation used determine optimal number PLS components. 100 bootstrap iterations used generate confidence intervals. strucToolbox implemented using “iterator” objects, can combined model objects. R2 used metric optimisation, PLSR model structToolbox used. speed 10 bootstrap iterations used .  chart plotted shows Q2, comparable Figure 13 Mendez et al . Two components selected Mendez et al, use .","code":"# scale/transform training data M = log_transform(base = 10) +     autoscale() +      knn_impute(neighbours = 3,by='samples')  # apply model M = model_apply(M,train)  # get scaled/transformed training data train_st = predicted(M)  # prepare model sequence MS = grid_search_1d(         param_to_optimise = 'number_components',         search_values = as.numeric(c(1:6)),         model_index = 2,         factor_name = 'Class_num',         max_min = 'max') *      permute_sample_order(         number_of_permutations = 10) *      kfold_xval(         folds = 5,         factor_name = 'Class_num') *       (mean_centre(mode='sample_meta')+       PLSR(factor_name='Class_num'))  # run the validation MS = struct::run(MS,train_st,r_squared())  # C = gs_line() chart_plot(C,MS)"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"pls-model-evalutation","dir":"Articles","previous_headings":"Univariate and multivariate statistical analysis of a NMR-based clinical metabolomics dataset. > Multivariate statistics and machine learning","what":"PLS model evalutation","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"evaluate model discriminant analysis structToolbox PLSDA model appropriate.  Note default cutoff B figure PLS models structToolbox 0, groups encoded +/-1. impact overall performance model.","code":"# prepare the discriminant model P = PLSDA(number_components = 2, factor_name='Class')  # apply the model P = model_apply(P,train_st)  # charts C = plsda_predicted_plot(factor_name='Class',style='boxplot') g1 = chart_plot(C,P)  C = plsda_predicted_plot(factor_name='Class',style='density') g2 = chart_plot(C,P)+xlim(c(-2,2))  C = plsda_roc_plot(factor_name='Class') g3 = chart_plot(C,P)  plot_grid(g1,g2,g3,align='vh',axis='tblr',nrow=1, labels=c('A','B','C')) # AUC for comparison with Mendez et al MET = calculate(AUC(),P$y$Class,P$yhat[,1]) MET ## A \"AUC\" object ## -------------- ## name:          Area under ROC curve ## description:   The area under the ROC curve of a classifier is estimated using the trapezoid method. ## value:         0.9739583"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"permutation-test","dir":"Articles","previous_headings":"Univariate and multivariate statistical analysis of a NMR-based clinical metabolomics dataset. > Multivariate statistics and machine learning","what":"Permutation test","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"permutation test can used assess likely observed result occurred chance. structToolbox permutation_test iterator object can combined iterators models.  plot comparable bottom half Figure 17 Mendez et. al.. unpermuted (true) Q2 values consistently better permuted (null) models. .e. model reliable.","code":"# model sequence MS = permutation_test(number_of_permutations = 20,factor_name = 'Class_num') *       kfold_xval(folds = 5,factor_name = 'Class_num') *      (mean_centre(mode='sample_meta') + PLSR(factor_name='Class_num', number_components = 2))  # run iterator MS = struct::run(MS,train_st,r_squared())  # chart C = permutation_test_plot(style = 'density')  chart_plot(C,MS) + xlim(c(-1,1)) + xlab('R Squared')"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"pls-projection-plots","dir":"Articles","previous_headings":"Univariate and multivariate statistical analysis of a NMR-based clinical metabolomics dataset. > Multivariate statistics and machine learning","what":"PLS projection plots","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"PLS can also used visualise model interpret latent variables.","code":"# prepare the discriminant model P = PLSDA(number_components = 2, factor_name='Class')  # apply the model P = model_apply(P,train_st)  C = pls_scores_plot(components=c(1,2),factor_name = 'Class') chart_plot(C,P)"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"pls-feature-importance","dir":"Articles","previous_headings":"Univariate and multivariate statistical analysis of a NMR-based clinical metabolomics dataset. > Multivariate statistics and machine learning","what":"PLS feature importance","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"Regression coefficients VIP scores can used estimate importance individual features PLS model. Mendez et al bootstrapping used estimate confidence intervals, brevity skip .","code":"# prepare chart C = pls_vip_plot(ycol = 'HE') g1 = chart_plot(C,P)  C = pls_regcoeff_plot(ycol='HE') g2 = chart_plot(C,P)  plot_grid(g1,g2,align='hv',axis='tblr',nrow=2)"},{"path":[]},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"introduction-5","dir":"Articles","previous_headings":"Classification of Metabolomics Data using Support Vector Machines.","what":"Introduction","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"aim vignette illustrate apply SVM analysis Classifying Metabolomics data. Support vector Machines (SVM) commonly used method Machine Learning. classification tasks used generate boundary groups samples training set. well generating linear boundaries, SVM can extended exploit use kernels generate complex non-linear boundaries groups required. structToolbox package, SVM functionality provided e1071 package incorporated model object. chart object (svm_plot_2d) also available plot SVM boundaries data two variables.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"dataset-4","dir":"Articles","previous_headings":"Classification of Metabolomics Data using Support Vector Machines.","what":"Dataset","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"1H-NMR dataset used described Mendez et al., (2020) vignette contains processed spectra urine samples obtained gastric cancer healthy patients Chan et al., (2016). raw experimental data available Metabolomics Workbench (PR000699) processed version available Excel data file. simplicity use pre-processed version 1H-NMR “Gastric cancer” dataset using structToolbox package. Details regards pre-processing reported “NMR_clinical_metabolomics” vignette `r Biocpkg(“structToolbox”) package. purposes illustrating effect SVM parameters boundary groups, reduce data include GC groups apply PLS reduce data two components. treat PLS scores two group dataset two features.","code":"# summary of DatasetExperiment object DE ## A \"DatasetExperiment\" object ## ---------------------------- ## name:           ## description:    ## data:          140 rows x 53 columns ## sample_meta:   140 rows x 5 columns ## variable_meta: 53 rows x 1 columns # model sequence and pls model (NB data already centred) MS = filter_smeta(mode = 'include', levels = c('GC','HE'), factor_name = 'Class') +      PLSDA(factor_name = 'Class',number_components = 2)  # apply PLS model MS = model_apply(MS,DE)  # plot the data C = pls_scores_plot(factor_name = 'Class') chart_plot(C,MS[2]) # new DatasetExperiment object from the PLS scores DE2 = DatasetExperiment(   data = MS[2]$scores$data,    sample_meta = predicted(MS[1])$sample_meta,   variable_meta = data.frame('LV'=c(1,2),row.names = colnames(MS[2]$scores)),   name = 'Illustrativate SVM dataset',   description = 'Generated by applying PLS to the processed Gastric cancer (NMR) dataset' )  DE2 ## A \"DatasetExperiment\" object ## ---------------------------- ## name:          Illustrativate SVM dataset ## description:   Generated by applying PLS to the processed Gastric cancer (NMR) dataset ## data:          83 rows x 2 columns ## sample_meta:   83 rows x 5 columns ## variable_meta: 2 rows x 1 columns"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"basic-svm-model","dir":"Articles","previous_headings":"Classification of Metabolomics Data using Support Vector Machines.","what":"Basic SVM model","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"simplest SVM model uses linear kernel. structToolbox SVM model can used train apply SVM models. svm_plot_2d chart object provided visualisation boundaries two dimensions.  SVM boundary plotted black, margins grey support vectors indicated grey circles.","code":"# SVM model M = SVM(   factor_name = 'Class',   kernel = 'linear' )  # apply model M = model_apply(M,DE2)  # plot boundary C = svm_plot_2d(factor_name = 'Class') chart_plot(C,M, DE2)"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"svm-cost-function","dir":"Articles","previous_headings":"Classification of Metabolomics Data using Support Vector Machines.","what":"SVM cost function","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"SVM cost function applies penalty samples wrong side margins. high penalty results narrow margin tries force samples correct side boundary. low penalty makes wider margin less strict samples misclassified. optimal cost use data dependent.","code":"# low cost M$cost=0.01 M=model_apply(M,DE2) C=svm_plot_2d(factor_name='Species') g1=chart_plot(C,M,DE2)  # medium cost M$cost=0.05 M=model_apply(M,DE2) C=svm_plot_2d(factor_name='Species') g2=chart_plot(C,M,DE2)  # high cost M$cost=100 M=model_apply(M,DE2)  C=svm_plot_2d(factor_name='Species') g3=chart_plot(C,M,DE2)  # plot prow <- plot_grid(   g1 + theme(legend.position=\"none\"),   g2 + theme(legend.position=\"none\"),   g3 + theme(legend.position=\"none\"),   align = 'vh',   labels = c(\"Low cost\", \"Medium cost\", \"High cost\"),   hjust = -1,   nrow = 2 )  legend <- get_legend(   # create some space to the left of the legend   g1 + guides(color = guide_legend(nrow = 1)) +   theme(legend.position = \"bottom\") )  plot_grid(prow, legend, ncol=1, rel_heights = c(1, .1))"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"kernel-functions","dir":"Articles","previous_headings":"Classification of Metabolomics Data using Support Vector Machines.","what":"Kernel functions","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"number different kernels can used support vector machines. structToolbox wrapper ‘linear’, ‘polynomial’,‘radial’ ‘sigmoid’ kernels can specified. Using kernels allows boundary flexible, often require additional parameters specified. best kernel use vary depending dataset, common choice radial kernel allows high flexibility single parameter.  parameters kernel can used control complexity boundary. show radial kernel parameter “gamma” can used change complexity boundary. combination cost parameter (keep constant ) allows highly flexible boundary models.  Note best practice select optimal kernel parameter(s) combination cost parameter (e.g. 2d grid search) best combination identified.","code":"# set a fixed cost for this comparison M$cost=1  # linear kernel M$kernel='linear' M=model_apply(M,DE2) C=svm_plot_2d(factor_name='Species') g1=chart_plot(C,M,DE2)  # polynomial kernel M$kernel='polynomial' M$gamma=1 M$coef0=0 M=model_apply(M,DE2) C=svm_plot_2d(factor_name='Species') g2=chart_plot(C,M,DE2)  # rbf kernel M$kernel='radial' M$gamma=1 M=model_apply(M,DE2) C=svm_plot_2d(factor_name='Species') g3=chart_plot(C,M,DE2)  # sigmoid kernel M$kernel='sigmoid' M$gamma=1 M$coef0=0 M=model_apply(M,DE2) C=svm_plot_2d(factor_name='Species') g4=chart_plot(C,M,DE2)  # plot prow <- plot_grid(   g1 + theme(legend.position=\"none\"),   g2 + theme(legend.position=\"none\"),   g3 + theme(legend.position=\"none\"),   g4 + theme(legend.position=\"none\"),   align = 'vh',   labels = c(\"Linear\", \"Polynomial\", \"Radial\",\"Sigmoid\"),   hjust = -1,   nrow = 2 ) legend <- get_legend(   # create some space to the left of the legend   g1 + guides(color = guide_legend(nrow = 1)) +     theme(legend.position = \"bottom\") ) plot_grid(prow, legend, ncol = 1, rel_heights = c(1, .1)) # rbf kernel and cost M$kernel = 'radial' M$cost = 1  # low gamma M$gamma=0.01 M=model_apply(M,DE2) C=svm_plot_2d(factor_name='Species') g1=chart_plot(C,M,DE2)  # medium gamma M$gamma=0.1 M=model_apply(M,DE2) C=svm_plot_2d(factor_name='Species') g2=chart_plot(C,M,DE2)  # high gamma M$gamma=1 M=model_apply(M,DE2) C=svm_plot_2d(factor_name='Species') g3=chart_plot(C,M,DE2)  # plot prow <- plot_grid(  g1 + theme(legend.position=\"none\"),  g2 + theme(legend.position=\"none\"),  g3 + theme(legend.position=\"none\"),  align = 'vh',  labels = c(\"Low gamma\", \"Medium gamma\", \"High gamma\"),  hjust = -1,  nrow = 2 ) legend <- get_legend(   # create some space to the left of the legend   g1 + guides(color = guide_legend(nrow = 1)) +   theme(legend.position = \"bottom\") ) plot_grid(prow, legend, ncol = 1, rel_heights = c(1, .1))"},{"path":[]},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"introduction-6","dir":"Articles","previous_headings":"Exploratory data analysis of LC-MS-based proteomics and metabolomics datasets (STATegra project)","what":"Introduction","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"aim vignette conduct data preprocessing exploratory analysis data STATegra project (https://www.nature.com/articles/s41597-019-0202-7). demonstration purposes focus Proteomics Metabolomics datasets publicly available part STATegra multi-omics dataset. …STATegra multi-omics dataset combines measurements 10 different omics technologies applied biological system, namely well-studied mouse pre-B-cell differentiation. STATegra includes high-throughput measurements chromatin structure, gene expression, proteomics metabolomics, complemented single-cell data. Gomez-Cabrero et al STATegra includes high-throughput measurements chromatin structure, gene expression, proteomics metabolomics, complemented single-cell data.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"lc-ms-based-proteomics-dataset","dir":"Articles","previous_headings":"Exploratory data analysis of LC-MS-based proteomics and metabolomics datasets (STATegra project)","what":"LC-MS-based proteomics dataset","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"LC-MS-based proteomics dataset STATegra multi-omics dataset (see Introduction) can found github must extracted zip file prior data analysis. imported data needs converted DatasetExperiment format use structToolbox. number Reporter genes included study. plot two illustrate trends data.","code":"# path to zip zipfile = \"https://raw.github.com/STATegraData/STATegraData/master/Script_STATegra_Proteomics.zip\"  ## retrieve from BiocFileCache path = bfcrpath(bfc,zipfile) temp = bfccache(bfc)  ## ... or download to temp location # path = tempfile() # temp = tempdir() # download.file(zipfile,path)  # unzip unzip(path, files = \"Proteomics_01_uniprot_canonical_normalized.txt\", exdir=temp) # read samples all_data <-  read.delim(file.path(temp,\"Proteomics_01_uniprot_canonical_normalized.txt\"), as.is = TRUE, header = TRUE, sep = \"\\t\") # extract data matrix data = all_data[1:2527,51:86] # shorten sample names colnames(data) = lapply(colnames(data), function (x) substr(x, 27, nchar(x))) # replace 0 with NA data[data == 0] <- NA # transpose data=as.data.frame(t(data))  # prepare sample meta SM = lapply(rownames(data),function(x) {   s=strsplit(x,'_')[[1]] # split at underscore   out=data.frame(     'treatment' = s[[1]],     'time' = substr(s[[2]],1,nchar(s[[2]])-1) ,         'batch' = substr(s[[3]],6,nchar(s[[3]])),     'condition' = substr(x,1,6) # interaction between treatment and time   )   return(out) }) SM = do.call(rbind,SM) rownames(SM)=rownames(data) # convert to factors SM$treatment=factor(SM$treatment) SM$time=ordered(SM$time,c(\"0\",\"2\",\"6\",\"12\",\"18\",\"24\")) SM$batch=ordered(SM$batch,c(1,3,4,5,6,7)) SM$condition=factor(SM$condition)  # variable meta data VM = all_data[1:2527,c(1,6,7)] rownames(VM)=colnames(data)  # prepare DatasetExperiment DS = DatasetExperiment(   data = data,    sample_meta = SM,    variable_meta = VM,    name = 'STATegra Proteomics',   description = 'downloaded from: https://github.com/STATegraData/STATegraData/' ) DS ## A \"DatasetExperiment\" object ## ---------------------------- ## name:          STATegra Proteomics ## description:   downloaded from: https://github.com/STATegraData/STATegraData/ ## data:          36 rows x 2527 columns ## sample_meta:   36 rows x 4 columns ## variable_meta: 2527 rows x 3 columns # find id of reporters Ldha = which(DS$variable_meta$Gene.names=='Ldha') Hk2 = which(DS$variable_meta$Gene.names=='Hk2')  # chart object C = feature_boxplot(feature_to_plot=Ldha,factor_name='time',label_outliers=FALSE) g1=chart_plot(C,DS)+ggtitle('Ldha')+ylab('expression') C = feature_boxplot(feature_to_plot=Hk2,factor_name='time',label_outliers=FALSE) g2=chart_plot(C,DS)+ggtitle('Hk2')+ylab('expression')  plot_grid(g1,g2,nrow=1,align='vh',axis='tblr')"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"data-transformation","dir":"Articles","previous_headings":"Exploratory data analysis of LC-MS-based proteomics and metabolomics datasets (STATegra project) > LC-MS-based proteomics dataset","what":"Data transformation","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"data log2 transformed, scaled mean medians equal conditions. steps available structToolbox using log_transform mean_of_medians objects. Reporter genes plotted comparison.","code":"# prepare model sequence M = log_transform(   base=2) +    mean_of_medians(     factor_name = 'condition') # apply model sequence M = model_apply(M,DS)   # get transformed data DST = predicted(M) # chart object C = feature_boxplot(feature_to_plot=Ldha,factor_name='time',label_outliers=FALSE) g1=chart_plot(C,DST)+ggtitle('Ldha')+ylab('log2(expression)') C = feature_boxplot(feature_to_plot=Hk2,factor_name='time',label_outliers=FALSE) g2=chart_plot(C,DST)+ggtitle('Hk2')+ylab('log2(expression)')  plot_grid(g1,g2,nrow=1,align='vh',axis='tblr')"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"missing-value-filtering","dir":"Articles","previous_headings":"Exploratory data analysis of LC-MS-based proteomics and metabolomics datasets (STATegra project) > LC-MS-based proteomics dataset","what":"Missing value filtering","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"Missing value filtering involves removing feature (gene) least 3 missing values per group least 11 samples. specific filter structToolbox time, can achieved combining filter_na_count filter_by_name objects. Specifically, default output filter_na_count changed return matrix NA counts per class. output connected ‘names’ input filter_by_names converted TRUE/FALSE using ‘seq_fcn’ input. ‘seq_fcn’ function processes NA counts used inputs filter_by_names. data passed along model sequence passes unchanged filter_na_count object becuase default output changed, filter_na_count filter_by_name objects working together single filter.","code":"# build model sequence M2 = filter_na_count(   threshold=2,   factor_name='condition',    predicted='na_count') +    # override the default output   filter_by_name(     mode='exclude',     dimension='variable',     names='place_holder',     seq_in='names',     seq_fcn=function(x) {      # convert NA count pre group to true/false       x=x>2                  # more the two missing per group       x=rowSums(x)>10        # in more than 10 groups       return(x)     }   ) # apply to transformed data M2 = model_apply(M2,DST)  # get the filtered data DSTF = predicted(M2)"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"missing-value-imputation","dir":"Articles","previous_headings":"Exploratory data analysis of LC-MS-based proteomics and metabolomics datasets (STATegra project) > LC-MS-based proteomics dataset","what":"Missing value imputation","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"STATegra uses two imputation methods available struct objects, create temporary STATegra_impute objects using functions struct package. first imputation method imputes missing values treatment values missing samples using “random value discovery”. create new struct object using set_struct_obj global environment, “method_apply” method implements imputation. second imputation method replacing missing values condition exactly 1 missing value mean values condition. create new struct object corresponding method new object implement filter. new STATegra imputation objects can now used model sequences like struct object. final filter added remove feature missing values imputation.","code":"# create new imputation object set_struct_obj(   class_name = 'STATegra_impute1',   struct_obj = 'model',   params=c(factor_sd='character',factor_name='character'),   outputs=c(imputed='DatasetExperiment'),   prototype = list(     name = 'STATegra imputation 1',     description = 'If missing values are present for all one group then they are replaced with min/2 + \"random value below discovery\".',     predicted = 'imputed'   )  )  # create method_apply for imputation method 1 set_obj_method(   class_name='STATegra_impute1',   method_name='model_apply',   definition=function(M,D) {          # for each feature count NA within each level     na = apply(D$data,2,function(x){       tapply(x,D$sample_meta[[M$factor_name]],function(y){         sum(is.na(y))       })     })     # count number of samples in each group     count=summary(D$sample_meta[[M$factor_name]])     # standard deviation of features within levels of factor_sd     sd = apply(D$data,2,function(x) {tapply(x,D$sample_meta[[M$factor_sd]],sd,na.rm=TRUE)})     sd = median(sd,na.rm=TRUE)          # impute or not     check=na == matrix(count,nrow=2,ncol=ncol(D)) # all missing in one class          # impute matrix     mi = D$data     for (j in 1:nrow(mi)) {       # index of group for this sample       g = which(levels(D$sample_meta[[M$factor_name]])==D$sample_meta[[M$factor_name]][j])       iv=rnorm(ncol(D),min(D$data[j,],na.rm=TRUE)/2,sd)       mi[j,is.na(mi[j,]) & check[g,]] = iv[is.na(mi[j,]) & check[g,]]     }     D$data = mi     M$imputed=D     return(M)   } ) # create new imputation object set_struct_obj(   class_name = 'STATegra_impute2',   struct_obj = 'model',   params=c(factor_name='character'),   outputs=c(imputed='DatasetExperiment'),   prototype = list(     name = 'STATegra imputation 2',     description = 'For those conditions with only 1 NA impute with the mean of the condition.',     predicted = 'imputed'   )  )  # create method_apply for imputation method 2 set_obj_method(   class_name='STATegra_impute2',   method_name='model_apply',   definition=function(M,D) {     # levels in condition     L = levels(D$sample_meta[[M$factor_name]])          # for each feature count NA within each level     na = apply(D$data,2,function(x){       tapply(x,D$sample_meta[[M$factor_name]],function(y){         sum(is.na(y))       })     })          # standard deviation of features within levels of factor_sd     sd = apply(D$data,2,function(x) {tapply(x,D$sample_meta[[M$factor_name]],sd,na.rm=TRUE)})     sd = median(sd,na.rm=TRUE)          # impute or not     check=na == 1 # only one missing for a condition          # index of samples for each condition     IDX = list()     for (k in L) {       IDX[[k]]=which(D$sample_meta[[M$factor_name]]==k)     }          ## impute     # for each feature     for (k in 1:ncol(D)) {       # for each condition       for (j in 1:length(L)) {         # if passes test         if (check[j,k]) {           # mean of samples in group           m = mean(D$data[IDX[[j]],k],na.rm=TRUE)           # imputed value           im = rnorm(1,m,sd)           # replace NA with imputed           D$data[is.na(D$data[,k]) & D$sample_meta[[M$factor_name]]==L[j],k]=im         }       }     }     M$imputed=D     return(M)   } ) # model sequence M3 = STATegra_impute1(factor_name='treatment',factor_sd='condition') +      STATegra_impute2(factor_name = 'condition') +       filter_na_count(threshold = 3, factor_name='condition') # apply model M3 = model_apply(M3,DSTF) # get imputed data DSTFI = predicted(M3) DSTFI ## A \"DatasetExperiment\" object ## ---------------------------- ## name:          STATegra Proteomics ## description:   downloaded from: https://github.com/STATegraData/STATegraData/ ## data:          36 rows x 864 columns ## sample_meta:   36 rows x 4 columns ## variable_meta: 864 rows x 3 columns"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"exploratory-analysis-1","dir":"Articles","previous_headings":"Exploratory data analysis of LC-MS-based proteomics and metabolomics datasets (STATegra project) > LC-MS-based proteomics dataset","what":"Exploratory analysis","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"often useful visualise distribution values across samples verify transformations/normalisation/filtering etc effective.  values longer skewed show approximately normal distribution. boxplots comparable width outliers indicated, transformations etc overall positive effect. PCA used provide graphical representation data. comparison outputs STATegra filter included reduce data include treated samples (IKA)  appear strong batch effect. PC1 dominated time point “24” potentially outlying points time points “2” “0”.","code":"# model sequence P = filter_smeta(mode='include',factor_name='treatment',levels='IKA') +     mean_centre() +      PCA(number_components = 2) # apply model P = model_apply(P,DSTFI)  # scores plots coloured by factors g = list() for (k in c('batch','time')) {   C = pca_scores_plot(factor_name=k,ellipse='none')   g[[k]]=chart_plot(C,P[3]) }  plot_grid(plotlist = g,nrow=1)"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"lc-ms-based-metabolomics-dataset","dir":"Articles","previous_headings":"Exploratory data analysis of LC-MS-based proteomics and metabolomics datasets (STATegra project)","what":"LC-MS-based metabolomics dataset","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"LC-MS-based metabolomics dataset STATegra multi-omics dataset (see Introduction) can found github must extracted zip file prior data analysis. imported data needs converted DatasetExperiment format use structToolbox.","code":"# path to zip zipfile = \"https://raw.github.com/STATegraData/STATegraData/master/Script_STATegra_Metabolomics.zip\"  ## retrieve from BiocFileCache path = bfcrpath(bfc,zipfile) temp = bfccache(bfc)  ## ... or download to temp location # path = tempfile() # temp = tempdir() # download.file(zipfile,path)  # unzip unzip(zipfile=path, files = \"LC_MS_raw_data.xlsx\", exdir=temp)  # read samples data <- as.data.frame(read.xlsx(file.path(temp,\"LC_MS_raw_data.xlsx\"),sheet = 'Data')) # extract sample meta data SM = data[ ,1:8]  # add coloumn for sample type (QC, blank etc) blanks=c(1,2,33,34,65,66) QCs=c(3,4,11,18,25,32,35,36,43,50,57,64) SM$sample_type='Sample' SM$sample_type[blanks]='Blank' SM$sample_type[QCs]='QC'  # put qc/blank labels in all factors for plotting later SM$biol.batch[SM$sample_type!='Sample']=SM$sample_type[SM$sample_type!='Sample'] SM$time.point[SM$sample_type!='Sample']=SM$sample_type[SM$sample_type!='Sample'] SM$condition[SM$sample_type!='Sample']=SM$sample_type[SM$sample_type!='Sample']  # convert to factors SM$biol.batch=ordered(SM$biol.batch,c('9','10','11','12','QC','Blank')) SM$time.point=ordered(SM$time.point,c('0h','2h','6h','12h','18h','24h','QC','Blank')) SM$condition=factor(SM$condition) SM$sample_type=factor(SM$sample_type)  # variable meta data VM = data.frame('annotation'=colnames(data)[9:ncol(data)])  # raw data X = data[,9:ncol(data)] # convert 0 to NA X[X==0]=NA # force to numeric; any non-numerics will become NA X=data.frame(lapply(X,as.numeric),check.names = FALSE)  # make sure row/col names match rownames(X)=data$label rownames(SM)=data$label rownames(VM)=colnames(X)   # create DatasetExperiment object DE = DatasetExperiment(   data = X,    sample_meta = SM,    variable_meta = VM,    name = 'STATegra Metabolomics LCMS',   description = 'https://www.nature.com/articles/s41597-019-0202-7' )  DE ## A \"DatasetExperiment\" object ## ---------------------------- ## name:          STATegra Metabolomics LCMS ## description:   https://www.nature.com/articles/s41597-019-0202-7 ## data:          66 rows x 152 columns ## sample_meta:   66 rows x 9 columns ## variable_meta: 152 rows x 1 columns"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"data-preprocessing-1","dir":"Articles","previous_headings":"Exploratory data analysis of LC-MS-based proteomics and metabolomics datasets (STATegra project) > LC-MS-based metabolomics dataset","what":"Data preprocessing","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"STATegra project LCMS data combined GCMS data multiblock analysis conducted. LCMS explored, data processed differently comparison Gomez-Cabrero et al. basic processing steps applied order generate valid PCA plot biological QC samples.","code":"# prepare model sequence MS = filter_smeta(mode = 'include', levels='QC', factor_name = 'sample_type') +      knn_impute(neighbours=5) +      vec_norm() +       log_transform(base = 10)   # apply model sequence MS = model_apply(MS, DE) ## Warning in knnimp(x, k, maxmiss = rowmax, maxp = maxp): 3 rows with more than 50 % entries missing; ##  mean imputation used for these rows"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"exploratory-analysis-2","dir":"Articles","previous_headings":"Exploratory data analysis of LC-MS-based proteomics and metabolomics datasets (STATegra project) > LC-MS-based metabolomics dataset","what":"Exploratory analysis","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"First use PCA look QC samples order make assessment data quality.  QC labelled “36” clearly different QCs. STATegra QC removed, exclude well. corresponds QC H1. STATegra also excluded QC samples measured immediately blank, also .  Now plot QC samples context samples. several possible approaches, apply approach applying PCA full dataset including QCs. exclude blanks likely dominate plot removed. samples batch 12 excluded STATegra replicate . QCs appear representative samples, strong clusters data, including QC samples biological variation. likely number ‘low quality’ features excluded, now, use sophisticated normalisation (PQN) scaling methods (glog).  can see now QCs tightly clustered. indicates biological variance remaining high quality features much greater technical variance represented QCs. appear trend measurement order (), important indicator instrument drift throughout run large source variation dataset. appear strong clustering related biological batch (B). appear strong trend time (C) likely subtle variation might masked sources variance stage. clustering related condition (D) overlap. explore trends time, split data condition factor explore Ikaros group. Removing condition factor variation potentially make easier spot subtle trends. extract glog transformed matrix previous model sequence continue .  Colouring groups () makes time point trend difficult see, adding ggplot continuous colour scale “viridis” (B) trend time along PC1 becomes much clearer.","code":"# pca model sequence M =  mean_centre() +      PCA(number_components = 3)  # apply model M = model_apply(M,predicted(MS))   # PCA scores plot C = pca_scores_plot(factor_name = 'sample_type',label_factor = 'order',points_to_label = 'all') # plot chart_plot(C,M[2]) # prepare model sequence MS = filter_smeta(       mode = 'include',        levels='QC',        factor_name = 'sample_type') +         filter_by_name(       mode = 'exclude',        dimension='sample',       names = c('1358BZU_0001QC_H1','1358BZU_0001QC_A1','1358BZU_0001QC_G1')) +         knn_impute(       neighbours=5) +         vec_norm() +          log_transform(        base = 10) +          mean_centre() +         PCA(        number_components = 3)  # apply model sequence MS = model_apply(MS, DE) ## Warning in knnimp(x, k, maxmiss = rowmax, maxp = maxp): 4 rows with more than 50 % entries missing; ##  mean imputation used for these rows # PCA scores plot C = pca_scores_plot(factor_name = 'sample_type',label_factor = 'order',points_to_label = 'all') # plot chart_plot(C,MS[7]) # prepare model sequence MS = filter_smeta(       mode = 'exclude',        levels='Blank',        factor_name = 'sample_type') +         filter_smeta(       mode = 'exclude',        levels='12',        factor_name = 'biol.batch') +         filter_by_name(       mode = 'exclude',        dimension='sample',       names = c('1358BZU_0001QC_H1',                 '1358BZU_0001QC_A1',                 '1358BZU_0001QC_G1')) +         knn_impute(       neighbours=5) +         vec_norm() +          log_transform(        base = 10) +          mean_centre() +         PCA(        number_components = 3)  # apply model sequence MS = model_apply(MS, DE) ## Warning in knnimp(x, k, maxmiss = rowmax, maxp = maxp): 2 rows with more than 50 % entries missing; ##  mean imputation used for these rows # PCA scores plots C = pca_scores_plot(factor_name = 'sample_type') # plot chart_plot(C,MS[8]) MS =  filter_smeta(        mode = 'exclude',         levels = '12',         factor_name = 'biol.batch') +          filter_by_name(        mode = 'exclude',         dimension='sample',        names = c('1358BZU_0001QC_H1',                  '1358BZU_0001QC_A1',                  '1358BZU_0001QC_G1')) +        blank_filter(        fold_change = 20,        qc_label = 'QC',        factor_name = 'sample_type') +        filter_smeta(        mode='exclude',        levels='Blank',        factor_name='sample_type') +          mv_feature_filter(        threshold = 80,         qc_label = 'QC',         factor_name = 'sample_type',         method = 'QC') +             mv_feature_filter(         threshold = 50,          factor_name = 'sample_type',          method='across') +         rsd_filter(        rsd_threshold=20,         qc_label='QC',        factor_name='sample_type') +         mv_sample_filter(        mv_threshold = 50) +            pqn_norm(        qc_label='QC',        factor_name='sample_type') +            knn_impute(        neighbours=5,         by='samples') +            glog_transform(        qc_label = 'QC',        factor_name = 'sample_type') +            mean_centre() +             PCA(        number_components = 10)  # apply model sequence MS = model_apply(MS, DE)   # PCA plots using different factors g=list() for (k in c('order','biol.batch','time.point','condition')) {   C = pca_scores_plot(factor_name = k,ellipse='none')   # plot   g[[k]]=chart_plot(C,MS[length(MS)]) }  plot_grid(plotlist = g,align='vh',axis='tblr',nrow=2,labels=c('A','B','C','D')) # get the glog scaled data GL = predicted(MS[11])  # extract the Ikaros group and apply PCA IK = filter_smeta(       mode='include',       factor_name='condition',       levels='Ikaros') +      mean_centre() +       PCA(number_components = 5)  # apply the model sequence to glog transformed data IK = model_apply(IK,GL)  # plot the PCA scores C = pca_scores_plot(factor_name='time.point',ellipse = 'sample') g1=chart_plot(C,IK[3]) g2=g1 + scale_color_viridis_d() # add continuous scale colouring  plot_grid(g1,g2,nrow=2,align='vh',axis = 'tblr',labels=c('A','B'))"},{"path":"https://computational-metabolomics.github.io/structToolbox/articles/data_analysis_omics_using_the_structtoolbox.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Data analysis of metabolomics and other omics datasets using the structToolbox","text":"","code":"sessionInfo() ## R Under development (unstable) (2024-01-23 r85822) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] openxlsx_4.2.5.2     cowplot_1.1.3        gridExtra_2.3        ##  [4] ggplot2_3.4.4        BiocFileCache_2.11.1 dbplyr_2.4.0         ##  [7] ropls_1.35.4         pmp_1.15.0           structToolbox_1.15.1 ## [10] struct_1.15.3        BiocStyle_2.31.0     ##  ## loaded via a namespace (and not attached): ##   [1] DBI_1.2.1                   bitops_1.0-7                ##   [3] MultiDataSet_1.31.0         rlang_1.1.3                 ##   [5] magrittr_2.0.3              e1071_1.7-14                ##   [7] matrixStats_1.2.0           compiler_4.4.0              ##   [9] RSQLite_2.3.5               systemfonts_1.0.5           ##  [11] vctrs_0.6.5                 reshape2_1.4.4              ##  [13] stringr_1.5.1               pkgconfig_2.0.3             ##  [15] crayon_1.5.2                fastmap_1.1.1               ##  [17] XVector_0.43.1              labeling_0.4.3              ##  [19] utf8_1.2.4                  rmarkdown_2.25              ##  [21] itertools_0.1-3             ragg_1.2.7                  ##  [23] bit_4.0.5                   purrr_1.0.2                 ##  [25] xfun_0.41                   MultiAssayExperiment_1.29.0 ##  [27] randomForest_4.7-1.1        zlibbioc_1.49.0             ##  [29] cachem_1.0.8                GenomeInfoDb_1.39.5         ##  [31] jsonlite_1.8.8              progress_1.2.3              ##  [33] blob_1.2.4                  highr_0.10                  ##  [35] DelayedArray_0.29.1         prettyunits_1.2.0           ##  [37] parallel_4.4.0              rols_2.31.0                 ##  [39] R6_2.5.1                    bslib_0.6.1                 ##  [41] stringi_1.8.3               limma_3.59.1                ##  [43] GenomicRanges_1.55.2        jquerylib_0.1.4             ##  [45] Rcpp_1.0.12                 bookdown_0.37               ##  [47] SummarizedExperiment_1.33.3 iterators_1.0.14            ##  [49] knitr_1.45                  IRanges_2.37.1              ##  [51] Matrix_1.6-5                tidyselect_1.2.0            ##  [53] abind_1.4-5                 yaml_2.3.8                  ##  [55] codetools_0.2-19            curl_5.2.0                  ##  [57] doRNG_1.8.6                 lattice_0.22-5              ##  [59] tibble_3.2.1                plyr_1.8.9                  ##  [61] withr_3.0.0                 Biobase_2.63.0              ##  [63] evaluate_0.23               ontologyIndex_2.11          ##  [65] desc_1.4.3                  isoband_0.2.7               ##  [67] proxy_0.4-27                zip_2.3.1                   ##  [69] filelock_1.0.3              pillar_1.9.0                ##  [71] BiocManager_1.30.22         MatrixGenerics_1.15.0       ##  [73] rngtools_1.5.2              foreach_1.5.2               ##  [75] stats4_4.4.0                generics_0.1.3              ##  [77] sp_2.1-3                    RCurl_1.98-1.14             ##  [79] hms_1.1.3                   S4Vectors_0.41.3            ##  [81] munsell_0.5.0               scales_1.3.0                ##  [83] calibrate_1.7.7             class_7.3-22                ##  [85] glue_1.7.0                  tools_4.4.0                 ##  [87] fs_1.6.3                    grid_4.4.0                  ##  [89] impute_1.77.0               missForest_1.5              ##  [91] colorspace_2.1-0            GenomeInfoDbData_1.2.11     ##  [93] cli_3.6.2                   textshaping_0.3.7           ##  [95] fansi_1.0.6                 viridisLite_0.4.2           ##  [97] ggthemes_5.0.0              S4Arrays_1.3.3              ##  [99] dplyr_1.1.4                 pls_2.8-3                   ## [101] pcaMethods_1.95.0           gtable_0.3.4                ## [103] sass_0.4.8                  digest_0.6.34               ## [105] BiocGenerics_0.49.1         SparseArray_1.3.3           ## [107] farver_2.1.1                memoise_2.0.1               ## [109] htmltools_0.5.7             pkgdown_2.0.7.9000          ## [111] lifecycle_1.0.4             httr_1.4.7                  ## [113] statmod_1.5.0               bit64_4.0.5                 ## [115] qqman_0.1.9                 MASS_7.3-60.2"},{"path":"https://computational-metabolomics.github.io/structToolbox/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gavin Rhys Lloyd. Author, maintainer. Ralf Johannes Maria Weber. Author.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lloyd, G., Jankevics, ., Weber, R. 2020. struct: R/Bioconductor-based framework standardized metabolomics data analysis beyond. Bioinformatics, 36(22-23), p.5551-5552.","code":"@Article{,   title = {struct: an R/Bioconductor-based framework for standardized metabolomics data analysis and beyond},   author = {Gavin Rhys Lloyd and Andris Jankevics and Ralf Johannes Maria Weber},   journal = {Bioinformatics},   year = {2020},   volume = {36},   number = {22-23},   pages = {5551-5552},   url = {https://doi.org/10.1093/bioinformatics/btaa1031}, }"},{"path":"https://computational-metabolomics.github.io/structToolbox/index.html","id":"structtoolbox","dir":"","previous_headings":"","what":"Data processing & analysis tools for Metabolomics and other omics","title":"Data processing & analysis tools for Metabolomics and other omics","text":"extensive set data (pre-)processing analysis methods tools metabolomics omics, strong emphasis statistics machine learning. toolbox allows user build extensive standardised workflows data analysis. methods tools implemented using class-based templates provided struct (Statistics R Using Class-based Templates) package. toolbox includes pre-processing methods (e.g. signal drift batch correction, normalisation, missing value imputation scaling), univariate (e.g. ttest, various forms ANOVA, Kruskal–Wallis test ) multivariate statistical methods (e.g. PCA PLS, including cross-validation permutation testing) well machine learning methods (e.g. Support Vector Machines). STATistics Ontology (STATO) integrated implemented provide standardised definitions different methods, inputs outputs.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data processing & analysis tools for Metabolomics and other omics","text":"install package: install development version:","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"structToolbox\") if (!require(\"remotes\", quietly = TRUE))     install.packages(\"remotes\")  remotes::install_github(\"computational-metabolomics/structToolbox\")"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ANOVA.html","id":null,"dir":"Reference","previous_headings":"","what":"Analysis of Variance — ANOVA","title":"Analysis of Variance — ANOVA","text":"Analysis Variance (ANOVA) univariate method used analyse difference among group means. Multiple test corrected p-values computed indicate significance feature.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ANOVA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analysis of Variance — ANOVA","text":"","code":"ANOVA(alpha = 0.05, mtc = \"fdr\", formula, ss_type = \"III\", ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ANOVA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analysis of Variance — ANOVA","text":"alpha (numeric) p-value cutoff determining significance. default 0.05. mtc (character) Multiple test correction method. Allowed values limited following: \"bonferroni\": Bonferroni correction p-values multiplied number comparisons. \"fdr\": Benjamini Hochberg False Discovery Rate correction. \"none\": correction. default \"fdr\". formula (formula) symbolic description model fitted. ss_type (character) ANOVA sum squares. Allowed values limited following: \"\": Type sum squares. \"II\": Type II sum squares. \"III\": Type III sum squares. default \"III\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ANOVA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analysis of Variance — ANOVA","text":" ANOVA object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ANOVA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analysis of Variance — ANOVA","text":"object makes use functionality following packages: car","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ANOVA.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Analysis of Variance — ANOVA","text":"ANOVA object inherits following struct classes: [ANOVA] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ANOVA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Analysis of Variance — ANOVA","text":"Fox J, Weisberg S (2019). R Companion Applied Regression, Third edition. Sage, Thousand Oaks CA. https://socialsciences.mcmaster.ca/jfox/Books/Companion/.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ANOVA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analysis of Variance — ANOVA","text":"","code":"M = ANOVA(       alpha = 0.05,       mtc = \"fdr\",       formula = y ~ x,       ss_type = \"III\")  D = iris_DatasetExperiment() M = ANOVA(formula=y~Species) M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/AUC.html","id":null,"dir":"Reference","previous_headings":"","what":"Area under ROC curve — AUC","title":"Area under ROC curve — AUC","text":"area ROC curve classifier estimated using trapezoid method.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/AUC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Area under ROC curve — AUC","text":"","code":"AUC(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/AUC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Area under ROC curve — AUC","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/AUC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Area under ROC curve — AUC","text":"  AUC  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/AUC.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Area under ROC curve — AUC","text":"AUC object inherits following struct classes: [AUC] >> [metric] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/AUC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Area under ROC curve — AUC","text":"","code":"M = AUC()  D = iris_DatasetExperiment() XCV = kfold_xval(folds=5,factor_name='Species') *       (mean_centre() + PLSDA(number_components=2,factor_name='Species')) MET = AUC() XCV = run(XCV,D,MET) #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors #> Warning: ‘>=’ not meaningful for factors"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DFA.html","id":null,"dir":"Reference","previous_headings":"","what":"Discriminant Factor Analysis — DFA","title":"Discriminant Factor Analysis — DFA","text":"Discriminant Factor Analysis (DFA) supervised classification method. Using linear combination input variables, DFA finds new orthogonal axes (canonical values) minimize variance within given class maximize variance classes.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DFA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discriminant Factor Analysis — DFA","text":"","code":"DFA(factor_name, number_components = 2, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DFA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discriminant Factor Analysis — DFA","text":"factor_name (character) name sample-meta column use. number_components (numeric, integer) number DFA components calculated. default 2. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DFA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discriminant Factor Analysis — DFA","text":" DFA object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DFA.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Discriminant Factor Analysis — DFA","text":"DFA object inherits following struct classes: [DFA] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DFA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Discriminant Factor Analysis — DFA","text":"Manly B (1986). Multivariate Statistical Methods: Primer. Chapman Hall, Boca Raton.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DFA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discriminant Factor Analysis — DFA","text":"","code":"M = DFA(       factor_name = \"V1\",       number_components = 2)  D = iris_DatasetExperiment() M = DFA(factor_name='Species') M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature distribution histogram — DatasetExperiment_boxplot","title":"Feature distribution histogram — DatasetExperiment_boxplot","text":"boxplot visualise distribution values within subset features.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature distribution histogram — DatasetExperiment_boxplot","text":"","code":"DatasetExperiment_boxplot(   factor_name,   by_sample = TRUE,   per_class = TRUE,   number = 50,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature distribution histogram — DatasetExperiment_boxplot","text":"factor_name (character) name sample-meta column use. by_sample (logical) Plot sample. Allowed values limited following: \"TRUE\": data plotted across features subset samples. \"FALSE\": data plotted across samples subset features. default TRUE. per_class (logical) Plot per class. Allowed values limited following: \"TRUE\": data plotted class. \"FALSE\": data plotted samples. default TRUE. number (numeric, integer) number features/samples plotted. default 50. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Feature distribution histogram — DatasetExperiment_boxplot","text":"  DatasetExperiment_boxplot  object. object output slots. See chart_plot struct package plot chart object. struct object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_boxplot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Feature distribution histogram — DatasetExperiment_boxplot","text":"DatasetExperiment_boxplot object inherits following struct classes: [DatasetExperiment_boxplot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature distribution histogram — DatasetExperiment_boxplot","text":"","code":"M = DatasetExperiment_boxplot(       factor_name = \"V1\",       by_sample = FALSE,       per_class = FALSE,       number = 50)  D = MTBLS79_DatasetExperiment() C = DatasetExperiment_boxplot(factor_name='Class',number=10,per_class=FALSE) chart_plot(C,D) #> Warning: Removed 585 rows containing non-finite values (`stat_boxplot()`)."},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature distribution histogram — DatasetExperiment_dist","title":"Feature distribution histogram — DatasetExperiment_dist","text":"histogram visualise distribution values within features.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature distribution histogram — DatasetExperiment_dist","text":"","code":"DatasetExperiment_dist(factor_name, per_class = TRUE, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature distribution histogram — DatasetExperiment_dist","text":"factor_name (character) name sample-meta column use. per_class (logical) Plot per class. Allowed values limited following: \"TRUE\": distributions plotted class. \"FALSE\": distribution plotted samples. default TRUE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Feature distribution histogram — DatasetExperiment_dist","text":"  DatasetExperiment_dist  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_dist.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Feature distribution histogram — DatasetExperiment_dist","text":"DatasetExperiment_dist object inherits following struct classes: [DatasetExperiment_dist] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature distribution histogram — DatasetExperiment_dist","text":"","code":"M = DatasetExperiment_dist(       factor_name = \"V1\",       per_class = FALSE)  D = MTBLS79_DatasetExperiment() C = DatasetExperiment_dist(factor_name='Class') chart_plot(C,D) #> Warning: Removed 9222 rows containing non-finite values (`stat_bin()`)."},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_factor_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Factor boxplot — DatasetExperiment_factor_boxplot","title":"Factor boxplot — DatasetExperiment_factor_boxplot","text":"Boxplot feature visualise distribution values within group","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_factor_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factor boxplot — DatasetExperiment_factor_boxplot","text":"","code":"DatasetExperiment_factor_boxplot(feature_to_plot, factor_names, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_factor_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factor boxplot — DatasetExperiment_factor_boxplot","text":"feature_to_plot (character, numeric, integer) name plotted feature. factor_names (character) name sample meta column(s) use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_factor_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factor boxplot — DatasetExperiment_factor_boxplot","text":"  DatasetExperiment_factor_boxplot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_factor_boxplot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Factor boxplot — DatasetExperiment_factor_boxplot","text":"DatasetExperiment_factor_boxplot object inherits following struct classes: [DatasetExperiment_factor_boxplot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_factor_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Factor boxplot — DatasetExperiment_factor_boxplot","text":"","code":"M = DatasetExperiment_factor_boxplot(       factor_names = \"V1\",       feature_to_plot = \"V1\")  D = iris_DatasetExperiment() C = DatasetExperiment_factor_boxplot(factor_names='Species',feature_to_plot='Petal.Width') chart_plot(C,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"DatasetExperiment heatmap — DatasetExperiment_heatmap","title":"DatasetExperiment heatmap — DatasetExperiment_heatmap","text":"heatmap visualise measured values data matrix.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatasetExperiment heatmap — DatasetExperiment_heatmap","text":"","code":"DatasetExperiment_heatmap(na_colour = \"#FF00E4\", ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatasetExperiment heatmap — DatasetExperiment_heatmap","text":"na_colour (character) hex colour code used plot missing values. default \"#FF00E4\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DatasetExperiment heatmap — DatasetExperiment_heatmap","text":"  DatasetExperiment_heatmap  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DatasetExperiment heatmap — DatasetExperiment_heatmap","text":"object makes use functionality following packages: reshape2","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_heatmap.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"DatasetExperiment heatmap — DatasetExperiment_heatmap","text":"DatasetExperiment_heatmap object inherits following struct classes: [DatasetExperiment_heatmap] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_heatmap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DatasetExperiment heatmap — DatasetExperiment_heatmap","text":"Wickham H (2007). \"Reshaping Data reshape Package.\" Journal Statistical Software, 21(12), 1-20. http://www.jstatsoft.org/v21/i12/.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/DatasetExperiment_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatasetExperiment heatmap — DatasetExperiment_heatmap","text":"","code":"M = DatasetExperiment_heatmap(       na_colour = \"#FF00E4\")  D = iris_DatasetExperiment() C = DatasetExperiment_heatmap() chart_plot(C,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical Cluster Analysis — HCA","title":"Hierarchical Cluster Analysis — HCA","text":"Hierarchical Cluster Analysis numerical technique uses agglomerative clustering identify clusters groupings samples.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical Cluster Analysis — HCA","text":"","code":"HCA(   dist_method = \"euclidean\",   cluster_method = \"complete\",   minkowski_power = 2,   factor_name,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical Cluster Analysis — HCA","text":"dist_method (character) Distance measure. Allowed values limited following: \"euclidean\": euclidean distance (2 norm). \"maximum\": maximum distance. \"manhattan\": absolute distance (1 norm). \"canberra\": weighted version mahattan distance. \"minkowski\": generalisation manhattan euclidean distance nth norm. default \"euclidean\". cluster_method (character) Agglomeration method. Allowed values limited following: \"ward.D\": Ward clustering. \"ward.D2\": Ward clustering using sqaured distances. \"single\": Single linkage. \"complete\": Complete linkage. \"average\": Average linkage (UPGMA). \"mcquitty\": McQuitty linkage (WPGMA). \"median\": Median linkage (WPGMC). \"centroid\": Centroid linkage (UPGMC). default \"complete\". minkowski_power (numeric)  default 2. factor_name (character) name sample-meta column use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical Cluster Analysis — HCA","text":" HCA object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HCA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hierarchical Cluster Analysis — HCA","text":"object makes use functionality following packages: stats","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HCA.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Hierarchical Cluster Analysis — HCA","text":"HCA object inherits following struct classes: [HCA] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HCA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hierarchical Cluster Analysis — HCA","text":"R Core Team (2023). R: Language Environment Statistical Computing. R Foundation Statistical Computing, Vienna, Austria. https://www.R-project.org/.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical Cluster Analysis — HCA","text":"","code":"M = HCA(       dist_method = \"euclidean\",       cluster_method = \"complete\",       minkowski_power = numeric(0),       factor_name = \"V1\")  D = iris_DatasetExperiment() M = HCA(factor_name='Species') M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSD.html","id":null,"dir":"Reference","previous_headings":"","what":"Tukey's Honest Significant Difference — HSD","title":"Tukey's Honest Significant Difference — HSD","text":"Tukey's HSD post hoc test modified t-test applied features pairs levels factor. used determine groups different (). multiple test corrected p-value computed indicate groups significantly different others feature.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tukey's Honest Significant Difference — HSD","text":"","code":"HSD(alpha = 0.05, mtc = \"fdr\", formula, unbalanced = FALSE, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tukey's Honest Significant Difference — HSD","text":"alpha (numeric) p-value cutoff determining significance. default 0.05. mtc (character) Multiple test correction method. Allowed values limited following: \"bonferroni\": Bonferroni correction p-values multiplied number comparisons. \"fdr\": Benjamini Hochberg False Discovery Rate correction. \"none\": correction. default \"fdr\". formula (formula) symbolic description model fitted. unbalanced (logical) Unbalanced model. Allowed values limited following: \"TRUE\": correction applied unbalanced designs. \"FALSE\": correction applied unbalanced designs. default FALSE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tukey's Honest Significant Difference — HSD","text":" HSD object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSD.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tukey's Honest Significant Difference — HSD","text":"object makes use functionality following packages: agricolae","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSD.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Tukey's Honest Significant Difference — HSD","text":"HSD object inherits following struct classes: [HSD] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tukey's Honest Significant Difference — HSD","text":"de Mendiburu F (2023). agricolae: Statistical Procedures Agricultural Research. R package version 1.3-7, https://CRAN.R-project.org/package=agricolae.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tukey's Honest Significant Difference — HSD","text":"","code":"M = HSD(       alpha = 0.05,       mtc = \"fdr\",       formula = y ~ x,       unbalanced = FALSE)  D = iris_DatasetExperiment() M = HSD(formula=y~Species) M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSDEM.html","id":null,"dir":"Reference","previous_headings":"","what":"Tukey's Honest Significant Difference using estimated marginal means — HSDEM","title":"Tukey's Honest Significant Difference using estimated marginal means — HSDEM","text":"Tukey's HSD post hoc test modified t-test applied features pairs levels factor. used determine groups different (). multiple test corrected p-value computed indicate groups significantly different others feature. mixed effects models estimated marginal means used.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSDEM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tukey's Honest Significant Difference using estimated marginal means — HSDEM","text":"","code":"HSDEM(alpha = 0.05, mtc = \"fdr\", formula, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSDEM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tukey's Honest Significant Difference using estimated marginal means — HSDEM","text":"alpha (numeric) p-value cutoff determining significance. default 0.05. mtc (character) Multiple test correction method. Allowed values limited following: \"bonferroni\": Bonferroni correction p-values multiplied number comparisons. \"fdr\": Benjamini Hochberg False Discovery Rate correction. \"none\": correction. default \"fdr\". formula (formula) symbolic description model fitted. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSDEM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tukey's Honest Significant Difference using estimated marginal means — HSDEM","text":" HSDEM object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSDEM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tukey's Honest Significant Difference using estimated marginal means — HSDEM","text":"object makes use functionality following packages: emmeans nlme","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSDEM.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Tukey's Honest Significant Difference using estimated marginal means — HSDEM","text":"HSDEM object inherits following struct classes: [HSDEM] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSDEM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tukey's Honest Significant Difference using estimated marginal means — HSDEM","text":"Lenth R (2023). emmeans: Estimated Marginal Means, aka Least-Squares Means. R package version 1.9.0, https://CRAN.R-project.org/package=emmeans. Pinheiro J, Bates D, R Core Team (2023). nlme: Linear Nonlinear Mixed Effects Models. R package version 3.1-164, https://CRAN.R-project.org/package=nlme. Pinheiro JC, Bates DM (2000). Mixed-Effects Models S S-PLUS. Springer, New York. doi:10.1007/b98882 https://doi.org/10.1007/b98882.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/HSDEM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tukey's Honest Significant Difference using estimated marginal means — HSDEM","text":"","code":"M = HSDEM(       alpha = 0.05,       mtc = \"fdr\",       formula = y ~ x)  D = iris_DatasetExperiment() D$sample_meta$id=rownames(D) # dummy id column M = HSDEM(formula = y~Species+ Error(id/Species)) M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/MTBLS79_DatasetExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"MTBLS79: Direct infusion mass spectrometry metabolomics dataset: a benchmark for data processing and quality control — MTBLS79_DatasetExperiment","title":"MTBLS79: Direct infusion mass spectrometry metabolomics dataset: a benchmark for data processing and quality control — MTBLS79_DatasetExperiment","text":"Direct-infusion mass spectrometry (DIMS) metabolomics important approach characterising molecular responses organisms disease, drugs environment. Increasingly large-scale metabolomics studies conducted, necessitating improvements bioanalytical computational workflows maintain data quality. dataset represents systematic evaluation reproducibility multi-batch DIMS metabolomics study cardiac tissue extracts. comprises twenty biological samples (cow vs. sheep) analysed repeatedly, 8 batches across 7 days, together concurrent set quality control (QC) samples. Data presented step workflow available MetaboLights (https://www.ebi.ac.uk/metabolights/MTBLS79)","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/MTBLS79_DatasetExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MTBLS79: Direct infusion mass spectrometry metabolomics dataset: a benchmark for data processing and quality control — MTBLS79_DatasetExperiment","text":"","code":"MTBLS79_DatasetExperiment(filtered = FALSE)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/MTBLS79_DatasetExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MTBLS79: Direct infusion mass spectrometry metabolomics dataset: a benchmark for data processing and quality control — MTBLS79_DatasetExperiment","text":"filtered TRUE load data quality control filters already applied, FALSE load unfiltered data. Default FALSE. raw data available (https://www.ebi.ac.uk/metabolights/MTBLS79) R dataset pmp package, available Bioconductor.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/MTBLS79_DatasetExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MTBLS79: Direct infusion mass spectrometry metabolomics dataset: a benchmark for data processing and quality control — MTBLS79_DatasetExperiment","text":"DatasetExperiment object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/MTBLS79_DatasetExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MTBLS79: Direct infusion mass spectrometry metabolomics dataset: a benchmark for data processing and quality control — MTBLS79_DatasetExperiment","text":"","code":"D = MTBLS79_DatasetExperiment() summary(D) #> [1] \"DatasetExperiment object of length 172 with 7 metadata columns\""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/OPLSDA.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogonal Partial Least Squares regression — OPLSDA","title":"Orthogonal Partial Least Squares regression — OPLSDA","text":"OPLS splits data matrix two parts. One part contains information orthogonal input vector, non-orthogonal.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/OPLSDA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogonal Partial Least Squares regression — OPLSDA","text":"","code":"OPLSDA(number_components = 1, factor_name, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/OPLSDA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orthogonal Partial Least Squares regression — OPLSDA","text":"number_components (numeric, integer) number orthgonal components. default 1. factor_name (character) name sample-meta column use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/OPLSDA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Orthogonal Partial Least Squares regression — OPLSDA","text":" OPLSDA object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/OPLSDA.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Orthogonal Partial Least Squares regression — OPLSDA","text":"OPLSDA object inherits following struct classes: [OPLSDA] >> [OPLSR] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/OPLSDA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthogonal Partial Least Squares regression — OPLSDA","text":"","code":"M = OPLSDA(       number_components = 2,       factor_name = \"V1\")  M = OPLSR('number_components'=2,factor_name='Species')"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/OPLSR.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogonal Partial Least Squares regression — OPLSR","title":"Orthogonal Partial Least Squares regression — OPLSR","text":"OPLS splits data matrix two parts. One part contains information orthogonal input vector, non-orthogonal.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/OPLSR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogonal Partial Least Squares regression — OPLSR","text":"","code":"OPLSR(number_components = 2, factor_name, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/OPLSR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orthogonal Partial Least Squares regression — OPLSR","text":"number_components (numeric, integer) number orthgonal components. default 2. factor_name (character) name sample-meta column use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/OPLSR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Orthogonal Partial Least Squares regression — OPLSR","text":" OPLSR object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/OPLSR.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Orthogonal Partial Least Squares regression — OPLSR","text":"OPLSR object inherits following struct classes: [OPLSR] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/OPLSR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthogonal Partial Least Squares regression — OPLSR","text":"","code":"M = OPLSR(       number_components = 2,       factor_name = \"V1\")  M = OPLSR('number_components'=2,factor_name='Species')"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PCA.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal Component Analysis (PCA) — PCA","title":"Principal Component Analysis (PCA) — PCA","text":"PCA multivariate data reduction technique. summarises data smaller number Principal Components maximise variance.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Component Analysis (PCA) — PCA","text":"","code":"PCA(number_components = 2, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal Component Analysis (PCA) — PCA","text":"number_components (numeric, integer) number Principal Components calculated. default 2. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principal Component Analysis (PCA) — PCA","text":" PCA object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PCA.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Principal Component Analysis (PCA) — PCA","text":"PCA object inherits following struct classes: [PCA] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal Component Analysis (PCA) — PCA","text":"","code":"M = PCA(       number_components = 2)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSDA.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial least squares discriminant analysis — PLSDA","title":"Partial least squares discriminant analysis — PLSDA","text":"PLS multivariate regression technique extracts latent variables maximising covariance input data response. Discriminant Analysis variant uses group labels response variable. >2 groups 1-vs-approach used. Group membership can predicted test samples based probability estimate group membership, estimated y-value.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSDA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial least squares discriminant analysis — PLSDA","text":"","code":"PLSDA(number_components = 2, factor_name, pred_method = \"max_prob\", ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSDA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial least squares discriminant analysis — PLSDA","text":"number_components (numeric, integer) number PLS components. default 2. factor_name (character) name sample-meta column use. pred_method (character) Prediction method. Allowed values limited following: \"max_yhat\": predicted group selected based largest value y_hat. \"max_prob\": predicted group selected based largest probability group membership. default \"max_prob\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSDA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial least squares discriminant analysis — PLSDA","text":" PLSDA object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSDA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Partial least squares discriminant analysis — PLSDA","text":"object makes use functionality following packages: pls","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSDA.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Partial least squares discriminant analysis — PLSDA","text":"PLSDA object inherits following struct classes: [PLSDA] >> [PLSR] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSDA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Partial least squares discriminant analysis — PLSDA","text":"Liland K, Mevik B, Wehrens R (2023). pls: Partial Least Squares Principal Component Regression. R package version 2.8-3, https://CRAN.R-project.org/package=pls. Perez NF, Ferre J, Boque R (2009). \"Calculation reliability classification discriminant partial least-squares binary classification.\" Chemometrics Intelligent Laboratory Systems, 95(2), 122-128. Barker M, Rayens W (2003). \"Partial least squares discrimination.\" Journal Chemometrics, 17(3), 166-173.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSDA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial least squares discriminant analysis — PLSDA","text":"","code":"M = PLSDA(       number_components = 2,       factor_name = \"V1\",       pred_method = \"max_prob\")  M = PLSDA('number_components'=2,factor_name='Species')"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSR.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial least squares regression — PLSR","title":"Partial least squares regression — PLSR","text":"PLS multivariate regression technique extracts latent variables maximising covariance input data response. regression response continuous variable.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial least squares regression — PLSR","text":"","code":"PLSR(number_components = 2, factor_name, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial least squares regression — PLSR","text":"number_components (numeric, integer) number PLS components. default 2. factor_name (character) name sample meta column(s) use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Partial least squares regression — PLSR","text":" PLSR object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Partial least squares regression — PLSR","text":"object makes use functionality following packages: pls","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSR.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Partial least squares regression — PLSR","text":"PLSR object inherits following struct classes: [PLSR] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Partial least squares regression — PLSR","text":"Liland K, Mevik B, Wehrens R (2023). pls: Partial Least Squares Principal Component Regression. R package version 2.8-3, https://CRAN.R-project.org/package=pls.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/PLSR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial least squares regression — PLSR","text":"","code":"M = PLSR(       number_components = 2,       factor_name = \"V1\")  M = PLSR(factor_name='run_order')"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/SVM.html","id":null,"dir":"Reference","previous_headings":"","what":"Support Vector Machine Classifier — SVM","title":"Support Vector Machine Classifier — SVM","text":"Support Vector Machines (SVM) machine learning algorithm classification. can make use kernel functions generate highly non-linear boundaries groups.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/SVM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Support Vector Machine Classifier — SVM","text":"","code":"SVM(   factor_name,   kernel = \"linear\",   degree = 3,   gamma = 1,   coef0 = 0,   cost = 1,   class_weights = NULL,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/SVM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Support Vector Machine Classifier — SVM","text":"factor_name (character) name sample-meta column use. kernel (character) Kernel type. Allowed values limited following: \"linear\": . \"polynomial\": . \"radial\": . \"sigmoid\": . default \"linear\". degree (numeric) polynomial degree. default 3. gamma (numeric) gamma parameter. default 1. coef0 (numeric) offset coefficient. default 0. cost (numeric) cost violating constraints. default 1. class_weights (numeric, character, NULL) named vector weights different classes.  Specifying \"inverse\" choose weights inversely proportional class distribution. default NULL. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/SVM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Support Vector Machine Classifier — SVM","text":" SVM object following output slots: struct object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/SVM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Support Vector Machine Classifier — SVM","text":"object makes use functionality following packages: e1071","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/SVM.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Support Vector Machine Classifier — SVM","text":"SVM object inherits following struct classes: [SVM] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/SVM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Support Vector Machine Classifier — SVM","text":"Meyer D, Dimitriadou E, Hornik K, Weingessel , Leisch F (2023). e1071: Misc Functions Department Statistics, Probability Theory Group (Formerly: E1071), TU Wien. R package version 1.7-14, https://CRAN.R-project.org/package=e1071. Brereton RG, Lloyd GR (2010). \"Support Vector Machines classification regression.\" Analyst, 135(2), 230-267.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/SVM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Support Vector Machine Classifier — SVM","text":"","code":"M = SVM(       factor_name = \"V1\",       kernel = \"linear\",       degree = 3,       gamma = 1,       coef0 = 0,       cost = 1,       class_weights = 1)  M = SVM(factor_name='Species',gamma=1)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/as_data_frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to data.frame — as_data_frame","title":"Convert to data.frame — as_data_frame","text":"Convert outputs input model data.frame.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/as_data_frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to data.frame — as_data_frame","text":"","code":"# S4 method for filter_na_count as_data_frame(M)  # S4 method for ttest as_data_frame(M)  # S4 method for wilcox_test as_data_frame(M)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/as_data_frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to data.frame — as_data_frame","text":"M model object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/as_data_frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to data.frame — as_data_frame","text":"data.frame model outputs","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/as_data_frame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to data.frame — as_data_frame","text":"","code":"D = iris_DatasetExperiment() M = filter_na_count(threshold=50,factor_name='Species') M= model_apply(M,D) df = as_data_frame(M)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/autoscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Autoscaling — autoscale","title":"Autoscaling — autoscale","text":"variable/feature mean centred scaled standard deviation. transformed variables zero-mean unit-variance.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/autoscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Autoscaling — autoscale","text":"","code":"autoscale(mode = \"data\", ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/autoscale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Autoscaling — autoscale","text":"mode (character) Mode action. Allowed values limited following: \"data\": Autoscaling applied data matrix . \"sample_meta\": Autoscaling applied sample_meta data . \"\": Autoscaling applied data matrix meta data. default \"data\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/autoscale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Autoscaling — autoscale","text":" autoscale object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/autoscale.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Autoscaling — autoscale","text":"autoscale object inherits following struct classes: [autoscale] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/autoscale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Autoscaling — autoscale","text":"","code":"M = autoscale(       mode = \"data\")  D = iris_DatasetExperiment() M = autoscale() M = model_train(M,D) M = model_predict(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/balanced_accuracy.html","id":null,"dir":"Reference","previous_headings":"","what":"Balanced Accuracy — balanced_accuracy","title":"Balanced Accuracy — balanced_accuracy","text":"Balanced Accuracy average proportion correctly classified samples across groups.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/balanced_accuracy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Balanced Accuracy — balanced_accuracy","text":"","code":"balanced_accuracy(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/balanced_accuracy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Balanced Accuracy — balanced_accuracy","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/balanced_accuracy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Balanced Accuracy — balanced_accuracy","text":"  balanced_accuracy  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/balanced_accuracy.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Balanced Accuracy — balanced_accuracy","text":"balanced_accuracy object inherits following struct classes: [balanced_accuracy] >> [metric] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/balanced_accuracy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Balanced Accuracy — balanced_accuracy","text":"","code":"M = balanced_accuracy()  D = iris_DatasetExperiment() XCV = kfold_xval(folds=5,factor_name='Species') *       (mean_centre() + PLSDA(number_components=2,factor_name='Species')) MET = balanced_accuracy() XCV = run(XCV,D,MET)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/blank_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Blank filter — blank_filter","title":"Blank filter — blank_filter","text":"blank filter filters features comparing median intensity blank samples median intensity samples. Features relative intensity (fold change) large compared blank removed. number times feature detected across blank samples may also considered. feature detected high enough proportion blanks removed.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/blank_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Blank filter — blank_filter","text":"","code":"blank_filter(   fold_change = 20,   blank_label = \"blank\",   qc_label = \"QC\",   factor_name,   fraction_in_blank = 0,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/blank_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Blank filter — blank_filter","text":"fold_change (numeric) Features fold change less value removed. default 20. blank_label (character) label used identify blank samples. default \"blank\". qc_label (character, NULL) label used identify QC samples. set NULL median samples used. default \"QC\". factor_name (character) name sample-meta column use. fraction_in_blank (numeric) Features present less proportion blanks considered removal. default 0. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/blank_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Blank filter — blank_filter","text":" blank_filter object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/blank_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Blank filter — blank_filter","text":"object makes use functionality following packages: pmp","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/blank_filter.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Blank filter — blank_filter","text":"blank_filter object inherits following struct classes: [blank_filter] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/blank_filter.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Blank filter — blank_filter","text":"Jankevics , Lloyd GR, Weber RJM (2023). pmp: Peak Matrix Processing signal batch correction metabolomics datasets. doi:10.18129/B9.bioc.pmp https://doi.org/10.18129/B9.bioc.pmp, R package version 1.14.0, https://bioconductor.org/packages/pmp.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/blank_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Blank filter — blank_filter","text":"","code":"M = blank_filter(       fold_change = 20,       blank_label = \"Blank\",       qc_label = \"QC\",       factor_name = \"V1\",       fraction_in_blank = 0)  D = iris_DatasetExperiment() M = blank_filter(fold_change=2,                  factor_name='Species',                  blank_label='setosa',                  qc_label='versicolor') M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/blank_filter_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram of blank filter fold changes — blank_filter_hist","title":"Histogram of blank filter fold changes — blank_filter_hist","text":"histogram calculated fold changes blank filter (median samples divided median blanks)","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/blank_filter_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram of blank filter fold changes — blank_filter_hist","text":"","code":"blank_filter_hist(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/blank_filter_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram of blank filter fold changes — blank_filter_hist","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/blank_filter_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram of blank filter fold changes — blank_filter_hist","text":"  blank_filter_hist  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/blank_filter_hist.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Histogram of blank filter fold changes — blank_filter_hist","text":"blank_filter_hist object inherits following struct classes: [blank_filter_hist] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/blank_filter_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Histogram of blank filter fold changes — blank_filter_hist","text":"","code":"M = blank_filter_hist()  C = blank_filter_hist()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap resampling — bootstrap","title":"Bootstrap resampling — bootstrap","text":"bootstrap resampling subset samples selected random replacement form training set. sample selected training included test set. process repeated many times, performance metrics computed repetition.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap resampling — bootstrap","text":"","code":"bootstrap(number_of_repetitions = 100, collect, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap resampling — bootstrap","text":"number_of_repetitions (numeric, integer) number bootstrap repetitions. default 100. collect (character) name model output collect bootstrap repetitions, addition input metric. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap resampling — bootstrap","text":" bootstrap object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/bootstrap.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Bootstrap resampling — bootstrap","text":"bootstrap object inherits following struct classes: [bootstrap] >> [resampler] >> [iterator] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap resampling — bootstrap","text":"","code":"M = bootstrap(       number_of_repetitions = 10,       collect = \"vip\")  I = bootstrap(number_of_repetitions = 10, collect = 'vip')"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/calculate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate metric — calculate,AUC-method","title":"Calculate metric — calculate,AUC-method","text":"Calculate metric","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/calculate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate metric — calculate,AUC-method","text":"","code":"# S4 method for AUC calculate(obj, Y, Yhat)  # S4 method for balanced_accuracy calculate(obj, Y, Yhat)  # S4 method for r_squared calculate(obj, Y, Yhat)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/calculate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate metric — calculate,AUC-method","text":"obj metric object Y true values/group labels Yhat predicted values/group labels","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/calculate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate metric — calculate,AUC-method","text":"modified metric object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/calculate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate metric — calculate,AUC-method","text":"","code":"MET = metric() calculate(MET) #> Warning: no calculation provided for this metric #> A \"metric\" object #> ----------------- #> name:           #> description:    #> value:          #>"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/chart_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"chart_plot method — chart_plot,dfa_scores_plot,DFA-method","title":"chart_plot method — chart_plot,dfa_scores_plot,DFA-method","text":"Plots chart object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/chart_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"chart_plot method — chart_plot,dfa_scores_plot,DFA-method","text":"","code":"# S4 method for dfa_scores_plot,DFA chart_plot(obj, dobj)  # S4 method for scatter_chart,DatasetExperiment chart_plot(obj, dobj)  # S4 method for pca_correlation_plot,PCA chart_plot(obj, dobj)  # S4 method for pca_scores_plot,PCA chart_plot(obj, dobj)  # S4 method for pca_biplot,PCA chart_plot(obj, dobj)  # S4 method for pca_loadings_plot,PCA chart_plot(obj, dobj)  # S4 method for pca_scree_plot,PCA chart_plot(obj, dobj)  # S4 method for pca_dstat_plot,PCA chart_plot(obj, dobj)  # S4 method for plsr_prediction_plot,PLSR chart_plot(obj, dobj)  # S4 method for plsr_residual_hist,PLSR chart_plot(obj, dobj)  # S4 method for plsr_qq_plot,PLSR chart_plot(obj, dobj)  # S4 method for plsr_cook_dist,PLSR chart_plot(obj, dobj)  # S4 method for pls_scores_plot,PLSR chart_plot(obj, dobj)  # S4 method for plsda_predicted_plot,PLSDA chart_plot(obj, dobj)  # S4 method for plsda_roc_plot,PLSDA chart_plot(obj, dobj)  # S4 method for pls_vip_plot,PLSR chart_plot(obj, dobj)  # S4 method for pls_regcoeff_plot,PLSR chart_plot(obj, dobj)  # S4 method for blank_filter_hist,blank_filter chart_plot(obj, dobj)  # S4 method for confounders_lsq_barchart,confounders_clsq chart_plot(obj, dobj)  # S4 method for confounders_lsq_boxplot,confounders_clsq chart_plot(obj, dobj)  # S4 method for feature_boxplot,DatasetExperiment chart_plot(obj, dobj)  # S4 method for mv_histogram,DatasetExperiment chart_plot(obj, dobj)  # S4 method for mv_boxplot,DatasetExperiment chart_plot(obj, dobj)  # S4 method for DatasetExperiment_dist,DatasetExperiment chart_plot(obj, dobj)  # S4 method for DatasetExperiment_boxplot,DatasetExperiment chart_plot(obj, dobj)  # S4 method for compare_dist,DatasetExperiment chart_plot(obj, dobj, eobj)  # S4 method for DatasetExperiment_heatmap,DatasetExperiment chart_plot(obj, dobj)  # S4 method for DatasetExperiment_factor_boxplot,DatasetExperiment chart_plot(obj, dobj)  # S4 method for feature_profile_array,DatasetExperiment chart_plot(obj, dobj)  # S4 method for feature_profile,DatasetExperiment chart_plot(obj, dobj)  # S4 method for fold_change_plot,fold_change chart_plot(obj, dobj)  # S4 method for fs_line,forward_selection_by_rank chart_plot(obj, dobj)  # S4 method for glog_opt_plot,glog_transform chart_plot(obj, dobj, gobj)  # S4 method for gs_line,grid_search_1d chart_plot(obj, dobj)  # S4 method for hca_dendrogram,HCA chart_plot(obj, dobj)  # S4 method for kfoldxcv_grid,kfold_xval chart_plot(obj, dobj)  # S4 method for kfoldxcv_metric,kfold_xval chart_plot(obj, dobj)  # S4 method for kw_p_hist,kw_rank_sum chart_plot(obj, dobj)  # S4 method for mv_feature_filter_hist,mv_feature_filter chart_plot(obj, dobj)  # S4 method for mv_sample_filter_hist,mv_sample_filter chart_plot(obj, dobj)  # S4 method for permutation_test_plot,permutation_test chart_plot(obj, dobj)  # S4 method for plsda_feature_importance_plot,PLSDA chart_plot(obj, dobj)  # S4 method for pqn_norm_hist,pqn_norm chart_plot(obj, dobj)  # S4 method for resample_chart,resample chart_plot(obj, dobj)  # S4 method for rsd_filter_hist,rsd_filter chart_plot(obj, dobj)  # S4 method for feature_profile,sb_corr chart_plot(obj, dobj, gobj)  # S4 method for svm_plot_2d,SVM chart_plot(obj, dobj, gobj)  # S4 method for tSNE_scatter,tSNE chart_plot(obj, dobj)  # S4 method for tic_chart,DatasetExperiment chart_plot(obj, dobj)  # S4 method for wilcox_p_hist,wilcox_test chart_plot(obj, dobj)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/chart_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"chart_plot method — chart_plot,dfa_scores_plot,DFA-method","text":"obj chart object dobj struct object eobj second DatasetExperiment object compare first gobj DatasetExperiment object signal correction applied.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/chart_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"chart_plot method — chart_plot,dfa_scores_plot,DFA-method","text":"plot object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/chart_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"chart_plot method — chart_plot,dfa_scores_plot,DFA-method","text":"","code":"C = example_chart() chart_plot(C,iris_DatasetExperiment()) #> Warning: no chart defined for \"DatasetExperiment\" #> A \"example_chart\" object #> ------------------------ #> name:           #> description:"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/classical_lsq.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate Classical Least Squares Regression — classical_lsq","title":"Univariate Classical Least Squares Regression — classical_lsq","text":"univariate classical least squares regression line fitted feature/variable response variable. fitted line minimises sum squared differences true response predicted response. coefficients (offset, gradient) fit can tested significance.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/classical_lsq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate Classical Least Squares Regression — classical_lsq","text":"","code":"classical_lsq(alpha = 0.05, mtc = \"fdr\", factor_names, intercept = TRUE, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/classical_lsq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate Classical Least Squares Regression — classical_lsq","text":"alpha (numeric) p-value cutoff determining significance. default 0.05. mtc (character) Multiple test correction method. Allowed values limited following: \"bonferroni\": Bonferroni correction p-values multiplied number comparisons. \"fdr\": Benjamini Hochberg False Discovery Rate correction. \"none\": correction. default \"fdr\". factor_names (character, list) column names regress . character vector list used ofr features. list character vectors provided assumed different set columns feature. intercept (logical) Model intercept. Allowed values limited following: \"TRUE\": intercept term included model. \"FALSE\": intercept term included model. default TRUE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/classical_lsq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate Classical Least Squares Regression — classical_lsq","text":" classical_lsq object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/classical_lsq.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Univariate Classical Least Squares Regression — classical_lsq","text":"classical_lsq object inherits following struct classes: [classical_lsq] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/classical_lsq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Univariate Classical Least Squares Regression — classical_lsq","text":"","code":"M = classical_lsq(       alpha = 0.05,       mtc = \"fdr\",       factor_names = \"V1\",       intercept = FALSE)  D = iris_DatasetExperiment() M = classical_lsq(factor_names = 'Species') M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/compare_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare distributions — compare_dist","title":"Compare distributions — compare_dist","text":"Histograms boxplots computed across samples features used visually compare two datasets e.g. filtering /normalisation.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/compare_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare distributions — compare_dist","text":"","code":"compare_dist(factor_name, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/compare_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare distributions — compare_dist","text":"factor_name (character) name sample-meta column use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/compare_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare distributions — compare_dist","text":"  compare_dist  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/compare_dist.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Compare distributions — compare_dist","text":"compare_dist object inherits following struct classes: [compare_dist] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/compare_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare distributions — compare_dist","text":"","code":"M = compare_dist(       factor_name = \"V1\")  D1=MTBLS79_DatasetExperiment(filtered=FALSE) D2=MTBLS79_DatasetExperiment(filtered=TRUE) C = compare_dist(factor_name='Class') chart_plot(C,D1,D2) #> Warning: Removed 109 rows containing non-finite values (`stat_boxplot()`). #> Warning: Removed 109 rows containing non-finite values (`stat_boxplot()`). #> Warning: Removed 8012 rows containing non-finite values (`stat_bin()`). #> Warning: Removed 8012 rows containing non-finite values (`stat_bin()`). #> Warning: Removed 10623 rows containing non-finite values (`stat_bin()`). #> Warning: Removed 6 rows containing missing values (`geom_path()`). #> Warning: Removed 10623 rows containing non-finite values (`stat_bin()`). #> Warning: Removed 6 rows containing missing values (`geom_path()`). #> Warning: Removed 109 rows containing non-finite values (`stat_boxplot()`). #> Warning: Removed 109 rows containing non-finite values (`stat_boxplot()`).  #> TableGrob (4 x 2) \"arrange\": 4 grobs #>   z     cells    name           grob #> 1 1 (1-1,1-1) arrange gtable[layout] #> 2 2 (1-1,2-2) arrange gtable[layout] #> 3 3 (2-4,1-1) arrange gtable[layout] #> 4 4 (2-4,2-2) arrange gtable[layout]"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_clsq.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for confounding factors — confounders_clsq","title":"Check for confounding factors — confounders_clsq","text":"Univariate least squares regression models used compare models without potential confounding factors included. change coefficients (delta) computed potential confounding factor. Factors large delta said large impact model therefore confounding. p-values computed models confounders included reduce potential false positives. suitable main factors 2 levels.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_clsq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for confounding factors — confounders_clsq","text":"","code":"confounders_clsq(   alpha = 0.05,   mtc = \"fdr\",   factor_name,   confounding_factors,   threshold = 0.15,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_clsq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for confounding factors — confounders_clsq","text":"alpha (numeric) p-value cutoff determining significance. default 0.05. mtc (character) Multiple test correction method. Allowed values limited following: \"bonferroni\": Bonferroni correction p-values multiplied number comparisons. \"fdr\": Benjamini Hochberg False Discovery Rate correction. \"none\": correction. default \"fdr\". factor_name (character) name main factor factors may confounding. confounding_factors (character) name(s) factor(s) potential confounding factors. threshold (numeric) Factors delta greater threshold considered confounding. default 0.15. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_clsq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for confounding factors — confounders_clsq","text":" confounders_clsq object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_clsq.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Check for confounding factors — confounders_clsq","text":"confounders_clsq object inherits following struct classes: [confounders_clsq] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_clsq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for confounding factors — confounders_clsq","text":"","code":"M = confounders_clsq(       alpha = 0.05,       mtc = \"fdr\",       factor_name = character(0),       confounding_factors = character(0),       threshold = 0.15)  D = MTBLS79_DatasetExperiment() M = filter_by_name(mode='include',dimension='variable',         names=colnames(D$data)[1:10]) + # first 10 features     filter_smeta(mode='exclude',levels='QC',         factor_name='Class') + # reduce to two group comparison     confounders_clsq(factor_name = 'Class',         confounding_factors=c('run_order','Batch')) M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_lsq_barchart.html","id":null,"dir":"Reference","previous_headings":"","what":"Confounding factor relative change barchart — confounders_lsq_barchart","title":"Confounding factor relative change barchart — confounders_lsq_barchart","text":"barchart relative change (delta) regression coefficient potential confounding factors included, excluded, model. Factors large delta considered confounding factors.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_lsq_barchart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confounding factor relative change barchart — confounders_lsq_barchart","text":"","code":"confounders_lsq_barchart(feature_to_plot, threshold = 10, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_lsq_barchart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confounding factor relative change barchart — confounders_lsq_barchart","text":"feature_to_plot (numeric, character, integer) column name feature plotted. threshold (numeric) horizontal line plotted indicate threshold. default 10. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_lsq_barchart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confounding factor relative change barchart — confounders_lsq_barchart","text":"  confounders_lsq_barchart  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_lsq_barchart.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Confounding factor relative change barchart — confounders_lsq_barchart","text":"confounders_lsq_barchart object inherits following struct classes: [confounders_lsq_barchart] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_lsq_barchart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confounding factor relative change barchart — confounders_lsq_barchart","text":"","code":"M = confounders_lsq_barchart(       feature_to_plot = 1,       threshold = 10)  D = MTBLS79_DatasetExperiment() M = filter_by_name(mode='include',dimension='variable',         names=colnames(D$data)[1:10]) + # first 10 features     filter_smeta(mode='exclude',levels='QC',         factor_name='Class') + # reduce to two group comparison     confounders_clsq(factor_name = 'Class',         confounding_factors=c('run_order','Batch')) M = model_apply(M,D) C = C=confounders_lsq_barchart(feature_to_plot=1,threshold=15) chart_plot(C,M[3])"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_lsq_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Confounding factor relative change boxplot — confounders_lsq_boxplot","title":"Confounding factor relative change boxplot — confounders_lsq_boxplot","text":"boxplot relative change (delta) regression coefficient potential confounding factors included, excluded, model. Factors large delta considered confounding factors.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_lsq_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confounding factor relative change boxplot — confounders_lsq_boxplot","text":"","code":"confounders_lsq_boxplot(threshold = 10, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_lsq_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confounding factor relative change boxplot — confounders_lsq_boxplot","text":"threshold (numeric) horizontal line plotted indicate threshold. default 10. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_lsq_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confounding factor relative change boxplot — confounders_lsq_boxplot","text":"  confounders_lsq_boxplot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_lsq_boxplot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Confounding factor relative change boxplot — confounders_lsq_boxplot","text":"confounders_lsq_boxplot object inherits following struct classes: [confounders_lsq_boxplot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/confounders_lsq_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confounding factor relative change boxplot — confounders_lsq_boxplot","text":"","code":"M = confounders_lsq_boxplot(       threshold = 10)  D = MTBLS79_DatasetExperiment() M = filter_by_name(mode='include',dimension='variable',         names=colnames(D$data)[1:10]) + # first 10 features     filter_smeta(mode='exclude',levels='QC',         factor_name='Class') + # reduce to two group comparison     confounders_clsq(factor_name = 'Class',         confounding_factors=c('run_order','Batch')) M = model_apply(M,D) C = C=confounders_lsq_boxplot(threshold=15) chart_plot(C,M[3])"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/constant_sum_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalisation to constant sum — constant_sum_norm","title":"Normalisation to constant sum — constant_sum_norm","text":"sample normalised total signal equal one (scaling factor specified).","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/constant_sum_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalisation to constant sum — constant_sum_norm","text":"","code":"constant_sum_norm(scaling_factor = 1, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/constant_sum_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalisation to constant sum — constant_sum_norm","text":"scaling_factor (numeric) scaling factor applied normalisation. default 1. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/constant_sum_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalisation to constant sum — constant_sum_norm","text":" constant_sum_norm object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/constant_sum_norm.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Normalisation to constant sum — constant_sum_norm","text":"constant_sum_norm object inherits following struct classes: [constant_sum_norm] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/constant_sum_norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalisation to constant sum — constant_sum_norm","text":"","code":"M = constant_sum_norm(       scaling_factor = 1)  M = constant_sum_norm()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/corr_coef.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation coefficient — corr_coef","title":"Correlation coefficient — corr_coef","text":"correlation features set continuous factor calculated. Multiple-test corrected p-values used indicate whether computed coefficients may occurred chance.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/corr_coef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation coefficient — corr_coef","text":"","code":"corr_coef(alpha = 0.05, mtc = \"fdr\", factor_names, method = \"spearman\", ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/corr_coef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation coefficient — corr_coef","text":"alpha (numeric) p-value cutoff determining significance. default 0.05. mtc (character) Multiple test correction method. Allowed values limited following: \"bonferroni\": Bonferroni correction p-values multiplied number comparisons. \"fdr\": Benjamini Hochberg False Discovery Rate correction. \"none\": correction. default \"fdr\". factor_names (character) name sample meta column(s) use. method (character) Type correlation. Allowed values limited following: \"kendall\": Kendall's tau computed. \"pearson\": Pearson product moment correlation computed. \"spearman\": Spearman's rho statistic computed. default \"spearman\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/corr_coef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlation coefficient — corr_coef","text":" corr_coef object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/corr_coef.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correlation coefficient — corr_coef","text":"object makes use functionality following packages: stats","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/corr_coef.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Correlation coefficient — corr_coef","text":"corr_coef object inherits following struct classes: [corr_coef] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/corr_coef.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Correlation coefficient — corr_coef","text":"R Core Team (2023). R: Language Environment Statistical Computing. R Foundation Statistical Computing, Vienna, Austria. https://www.R-project.org/.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/corr_coef.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation coefficient — corr_coef","text":"","code":"M = corr_coef(       alpha = 0.05,       mtc = \"fdr\",       factor_names = \"V1\",       method = \"spearman\")  D = MTBLS79_DatasetExperiment(filtered=TRUE)  # subset for this example D = D[,1:10]  # convert to numeric for this example D$sample_meta$sample_order=as.numeric(D$sample_meta$run_order) D$sample_meta$sample_rep=as.numeric(D$sample_meta$Sample_Rep)  M = corr_coef(factor_names=c('sample_order','sample_rep')) M = model_apply(M,D) #> Warning: Cannot compute exact p-value with ties #> Warning: Cannot compute exact p-value with ties #> Warning: Cannot compute exact p-value with ties #> Warning: Cannot compute exact p-value with ties #> Warning: Cannot compute exact p-value with ties #> Warning: Cannot compute exact p-value with ties #> Warning: Cannot compute exact p-value with ties #> Warning: Cannot compute exact p-value with ties #> Warning: Cannot compute exact p-value with ties #> Warning: Cannot compute exact p-value with ties #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion #> Warning: NAs introduced by coercion"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/dfa_scores_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"DFA scores plot — dfa_scores_plot","title":"DFA scores plot — dfa_scores_plot","text":"scatter plot selected DFA components.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/dfa_scores_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DFA scores plot — dfa_scores_plot","text":"","code":"dfa_scores_plot(   components = c(1, 2),   points_to_label = \"none\",   factor_name,   ellipse = \"all\",   label_filter = character(0),   label_factor = \"rownames\",   label_size = 3.88,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/dfa_scores_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DFA scores plot — dfa_scores_plot","text":"components (numeric) components selected plotting. default c(1, 2). points_to_label (character) Points label. Allowed values limited following: \"none\": samples labels displayed. \"\": labels samples displayed. \"outliers\": Labels potential outlier samples displayed. default \"none\". factor_name (character) name sample-meta column use. ellipse (character) Plot ellipses. Allowed values limited following: \"\": Hotelling T2 ellipses (p=0.95) plotted groups samples. \"group\": Hotelling T2 ellipses (p=0.95) plotted groups. \"none\": Ellipses included plot. \"sample\": Hotelling T2 ellipse (p=0.95) plotted samples (ignoring group). default \"\". label_filter (character) Labels plotted named groups. zero-length groups included. default character(0). label_factor (character) column name sample_meta use labelling samples plot. \"rownames\" use row names sample_meta. default \"rownames\". label_size (numeric) text size labels. Note Font Units. default 3.88. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/dfa_scores_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DFA scores plot — dfa_scores_plot","text":"  dfa_scores_plot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/dfa_scores_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DFA scores plot — dfa_scores_plot","text":"object makes use functionality following packages: scales ggplot2","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/dfa_scores_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"DFA scores plot — dfa_scores_plot","text":"dfa_scores_plot object inherits following struct classes: [dfa_scores_plot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/dfa_scores_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DFA scores plot — dfa_scores_plot","text":"Wickham H, Pedersen T, Seidel D (2023). scales: Scale Functions Visualization. R package version 1.3.0, https://CRAN.R-project.org/package=scales. Wickham H (2016). ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York. ISBN 978-3-319-24277-4, https://ggplot2.tidyverse.org.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/dfa_scores_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DFA scores plot — dfa_scores_plot","text":"","code":"M = dfa_scores_plot(       components = c(1, 2),       points_to_label = \"none\",       factor_name = \"V1\",       ellipse = \"all\",       label_filter = character(0),       label_factor = \"rownames\",       label_size = 3.88)  D = iris_DatasetExperiment() M = mean_centre() + DFA(factor_name='Species') M = model_apply(M,D) C = dfa_scores_plot(factor_name = 'Species') chart_plot(C,M[2]) #> Warning: The following aesthetics were dropped during statistical transformation: label #> ℹ This can happen when ggplot fails to infer the correct grouping structure in #>   the data. #> ℹ Did you forget to specify a `group` aesthetic or to convert a numerical #>   variable into a factor? #> Warning: The following aesthetics were dropped during statistical transformation: label #> ℹ This can happen when ggplot fails to infer the correct grouping structure in #>   the data. #> ℹ Did you forget to specify a `group` aesthetic or to convert a numerical #>   variable into a factor? #> Warning: The following aesthetics were dropped during statistical transformation: label #> ℹ This can happen when ggplot fails to infer the correct grouping structure in #>   the data. #> ℹ Did you forget to specify a `group` aesthetic or to convert a numerical #>   variable into a factor? #> Warning: The following aesthetics were dropped during statistical transformation: label #> ℹ This can happen when ggplot fails to infer the correct grouping structure in #>   the data. #> ℹ Did you forget to specify a `group` aesthetic or to convert a numerical #>   variable into a factor?"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/dratio_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Dispersion ratio filter — dratio_filter","title":"Dispersion ratio filter — dratio_filter","text":"dispersion ratio (d-ratio) compares standard deviation (non-parametric equivalent) Quality Control (QC) samples relative standard deviation (non-parametric equivalent) samples feature. d-ratio greater predefined threshold observed sample variance due technical variance feature removed.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/dratio_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dispersion ratio filter — dratio_filter","text":"","code":"dratio_filter(   threshold = 20,   qc_label = \"QC\",   factor_name,   method = \"ratio\",   dispersion = \"sd\",   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/dratio_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dispersion ratio filter — dratio_filter","text":"threshold (numeric) threshold features removed. default 20. qc_label (character) label used identify QC samples. default \"QC\". factor_name (character) name sample-meta column use. method (character) dratio method. Allowed values limited following: \"ratio\": Dispersion QCs divided dispersion samples. Corresponds Eq 4  Broadhurst et al (2018). \"euclidean\": Dispersion QCs divided euclidean length total dispersion. Total dispersion estimated QC Sample dispersion assuming orthogonal. Corresponds Eq 5 Broadhurst et al (2018). default \"ratio\". dispersion (character) Dispersion method. Allowed values limited following: \"sd\": Dispersion estimated using standard deviation. \"mad\": Dispersion estimated using median absolute deviation. default \"sd\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/dratio_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dispersion ratio filter — dratio_filter","text":" dratio_filter object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/dratio_filter.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Dispersion ratio filter — dratio_filter","text":"dratio_filter object inherits following struct classes: [dratio_filter] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/dratio_filter.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dispersion ratio filter — dratio_filter","text":"Broadhurst D, Goodacre R, Reinke SN, Kuligowski J, Wilson ID, Lewis MR, Dunn WB (2018). \"Guidelines considerations use system suitability quality control samples mass spectrometry assays applied untargeted clinical metabolomic studies.\" Metabolomics, 14(6).","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/dratio_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dispersion ratio filter — dratio_filter","text":"","code":"M = dratio_filter(       threshold = 20,       qc_label = \"QC\",       factor_name = \"V1\",       method = \"ratio\",       dispersion = \"sd\")  D = MTBLS79_DatasetExperiment() M = dratio_filter(threshold=20,qc_label='QC',factor_name='Class') M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/equal_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Equal group sized sampling — equal_split","title":"Equal group sized sampling — equal_split","text":"Samples randomly chosen level training set equal numbers samples levels. number samples based input proportion smallest group size.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/equal_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equal group sized sampling — equal_split","text":"","code":"equal_split(p_train = 1, factor_name, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/equal_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equal group sized sampling — equal_split","text":"p_train (numeric) proportion samples selected training set. default 1. factor_name (character) name sample-meta column use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/equal_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equal group sized sampling — equal_split","text":" equal_split object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/equal_split.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Equal group sized sampling — equal_split","text":"equal_split object inherits following struct classes: [equal_split] >> [split_data] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/equal_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equal group sized sampling — equal_split","text":"","code":"M = equal_split(       factor_name = \"V1\",       p_train = 0.75)  D = iris_DatasetExperiment() M = equal_split(factor_name='Species') M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature boxplot — feature_boxplot","title":"Feature boxplot — feature_boxplot","text":"boxplot visualise distribution values within feature.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature boxplot — feature_boxplot","text":"","code":"feature_boxplot(   label_outliers = TRUE,   feature_to_plot,   factor_name,   show_counts = TRUE,   style = \"boxplot\",   jitter = FALSE,   fill = FALSE,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature boxplot — feature_boxplot","text":"label_outliers (logical) Label outliers. Allowed values limited following: \"TRUE\": index outlier samples included plot. \"FALSE\": labels displayed. default TRUE. feature_to_plot (character, numeric, integer) column name plotted feature. factor_name (character) name sample-meta column use. show_counts (logical) Show counts. Allowed values limited following: \"TRUE\": number samples box displayed. \"FALSE\": number samples box displayed. default TRUE. style (character) Plot style. Allowed values limited following: \"boxplot\": Boxplot style. \"violin\": Violon plot style. default \"boxplot\". jitter (logical) Include points plotted added jitter. default FALSE. fill (logical) Block fill boxes violins group colour. default FALSE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Feature boxplot — feature_boxplot","text":"  feature_boxplot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_boxplot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Feature boxplot — feature_boxplot","text":"feature_boxplot object inherits following struct classes: [feature_boxplot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature boxplot — feature_boxplot","text":"","code":"M = feature_boxplot(       label_outliers = FALSE,       feature_to_plot = \"V1\",       factor_name = \"V1\",       show_counts = FALSE,       style = \"boxplot\",       jitter = FALSE,       fill = FALSE)  D = MTBLS79_DatasetExperiment C = feature_boxplot(factor_name='Species',feature_to_plot='Petal.Width') chart_plot(C,D) #> Warning: no chart defined for \"function\" #> A \"feature_boxplot\" object #> -------------------------- #> name:          Feature boxplot #> description:   A boxplot to visualise the distribution of values within a feature. #> input params:  label_outliers, feature_to_plot, factor_name, show_counts, style, jitter, fill"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature profile — feature_profile","title":"Feature profile — feature_profile","text":"plot visualising change intensity feature continuous variable time, dose, run order.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature profile — feature_profile","text":"","code":"feature_profile(   run_order,   qc_label,   qc_column,   colour_by,   feature_to_plot,   plot_sd = FALSE,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature profile — feature_profile","text":"run_order (character) sample-meta column name containing run order. qc_label (character) label used identify QC samples. qc_column (character) sample-meta column name containing labels used identify QC samples. colour_by (character) sample-meta column name used colour plot. feature_to_plot (numeric, character, integer) name column id plotted feature. plot_sd (logical) Plot standard deviation. Allowed values limited following: \"TRUE\": Standard deviation samples QCs included plot. \"FALSE\": Standard deviation plotted. default FALSE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Feature profile — feature_profile","text":"  feature_profile  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_profile.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Feature profile — feature_profile","text":"feature_profile object inherits following struct classes: [feature_profile] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature profile — feature_profile","text":"","code":"M = feature_profile(       run_order = character(0),       qc_label = character(0),       qc_column = character(0),       colour_by = character(0),       feature_to_plot = numeric(0),       plot_sd = FALSE)  D = MTBLS79_DatasetExperiment() C = feature_profile(run_order='run_order',     qc_label='QC',     qc_column='Class',     colour_by='Class',     feature_to_plot=1) chart_plot(C,D) #> Warning: Removed 18 rows containing missing values (`geom_point()`)."},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_profile_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature profile — feature_profile_array","title":"Feature profile — feature_profile_array","text":"plot visualising change intensity feature continuous variable time, dose, run order.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_profile_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature profile — feature_profile_array","text":"","code":"feature_profile_array(   run_order,   qc_label,   qc_column,   colour_by,   feature_to_plot,   nrow = 5,   log = TRUE,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_profile_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature profile — feature_profile_array","text":"run_order (character) sample-meta column name containing run order. qc_label (character) label used identify QC samples. qc_column (character) sample-meta column name containing labels used identify QC samples. colour_by (character) sample-meta column name used colour plot. feature_to_plot (numeric, character, integer) name column id plotted feature. nrow (numeric, integer) number rows plot. default 5. log (logical) Log transform. Allowed values limited following: \"TRUE\": data log tranformed plotting. \"FALSE\": data transformed plotting. default TRUE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_profile_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Feature profile — feature_profile_array","text":"  feature_profile_array  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_profile_array.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Feature profile — feature_profile_array","text":"feature_profile_array object inherits following struct classes: [feature_profile_array] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/feature_profile_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature profile — feature_profile_array","text":"","code":"M = feature_profile_array(       run_order = character(0),       qc_label = character(0),       qc_column = character(0),       colour_by = character(0),       feature_to_plot = numeric(0),       nrow = 1,       log = FALSE)  D = MTBLS79_DatasetExperiment() C = feature_profile_array(     run_order='run_order',     qc_label='QC',     qc_column='Class',     colour_by='Class',     feature_to_plot=1:3,     nrow=1,     log=TRUE) chart_plot(C,D) #> Warning: Removed 23 rows containing missing values (`geom_point()`)."},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_by_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter by name — filter_by_name","title":"Filter by name — filter_by_name","text":"Filter samples/variables row/column name, index logicals.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_by_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter by name — filter_by_name","text":"","code":"filter_by_name(mode = \"exclude\", dimension = \"sample\", names, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_by_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter by name — filter_by_name","text":"mode (character) filtering mode controls whether samples/features mode=\"included\" mode=\"excluded\" based name. default \"exclude\". dimension (character) filtering dimensions controls whether dimension=\"sample\" dimension=\"variable\" filtered based name. default \"sample\". names (character, numeric, logical) name features/samples filtered. Must exact match. Can also provide indexes (numeric) logical. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_by_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter by name — filter_by_name","text":" filter_by_name object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_by_name.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Filter by name — filter_by_name","text":"filter_by_name object inherits following struct classes: [filter_by_name] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_by_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter by name — filter_by_name","text":"","code":"M = filter_by_name(       mode = \"exclude\",       dimension = \"sample\",       names = character(0))  D = MTBLS79_DatasetExperiment() M = filter_by_name(mode='exclude',dimension='variable',names=c(1,2,3)) M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_na_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimum number of measured values filter — filter_na_count","title":"Minimum number of measured values filter — filter_na_count","text":"number measured values counted feature, feature less predefined minimum number values group removed. several factors, threshold applied minimum number samples present combinations (interactions) groups.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_na_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimum number of measured values filter — filter_na_count","text":"","code":"filter_na_count(threshold, factor_name, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_na_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimum number of measured values filter — filter_na_count","text":"threshold (numeric) minimum number samples group/interaction. factor_name (character) name sample-meta column use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_na_count.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimum number of measured values filter — filter_na_count","text":" filter_na_count object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_na_count.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Minimum number of measured values filter — filter_na_count","text":"filter_na_count object inherits following struct classes: [filter_na_count] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_na_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimum number of measured values filter — filter_na_count","text":"","code":"M = filter_na_count(       threshold = 2,       factor_name = \"V1\")  D = MTBLS79_DatasetExperiment() M = filter_na_count(threshold=3,factor_name='Class') M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_smeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter by sample meta data — filter_smeta","title":"Filter by sample meta data — filter_smeta","text":"data filtered named levels factor included/excluded dataset.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_smeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter by sample meta data — filter_smeta","text":"","code":"filter_smeta(mode = \"include\", levels, factor_name, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_smeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter by sample meta data — filter_smeta","text":"mode (character) Mode action. Allowed values limited following: \"include\": Samples specified levels retained. \"exclude\": Samples specified levels excluded. default \"include\". levels (character) level name(s) filtering. factor_name (character) name sample-meta column use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_smeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter by sample meta data — filter_smeta","text":" filter_smeta object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_smeta.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Filter by sample meta data — filter_smeta","text":"filter_smeta object inherits following struct classes: [filter_smeta] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/filter_smeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter by sample meta data — filter_smeta","text":"","code":"M = filter_smeta(       mode = \"include\",       levels = character(0),       factor_name = \"V1\")  D = MTBLS79_DatasetExperiment() M = filter_smeta(mode='exclude',levels='QC',factor_name='QC') M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fisher_exact.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher Exact Test — fisher_exact","title":"Fisher Exact Test — fisher_exact","text":"fisher exact test used analyse contingency tables comparing number correctly/incorrectly predicted group labels. multiple test corrected p-value indicates whether number measured values significantly different groups.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fisher_exact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher Exact Test — fisher_exact","text":"","code":"fisher_exact(alpha = 0.05, mtc = \"fdr\", factor_name, factor_pred, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fisher_exact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher Exact Test — fisher_exact","text":"alpha (numeric) p-value cutoff determining significance. default 0.05. mtc (character) Multiple test correction method. Allowed values limited following: \"bonferroni\": Bonferroni correction p-values multiplied number comparisons. \"fdr\": Benjamini Hochberg False Discovery Rate correction. \"none\": correction. default \"fdr\". factor_name (character) name sample-meta column use. factor_pred (data.frame) data.frame, column factor predicted group labels compare true groups labels. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fisher_exact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fisher Exact Test — fisher_exact","text":" fisher_exact object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fisher_exact.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Fisher Exact Test — fisher_exact","text":"fisher_exact object inherits following struct classes: [fisher_exact] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fisher_exact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fisher Exact Test — fisher_exact","text":"","code":"M = fisher_exact(       alpha = 0.05,       mtc = \"fdr\",       factor_name = \"V1\",       factor_pred = data.frame(id=NA))  # load some data D=MTBLS79_DatasetExperiment()  # prepare predictions based on NA pred=as.data.frame(is.na(D$data)) pred=lapply(pred,factor,levels=c(TRUE,FALSE)) pred=as.data.frame(pred)  # apply method M = fisher_exact(alpha=0.05,mtc='fdr',factor_name='Class',factor_pred=pred) M=model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change.html","id":null,"dir":"Reference","previous_headings":"","what":"Fold change — fold_change","title":"Fold change — fold_change","text":"Fold change relative change mean (non-parametric equivalent) intensities feature pairs levels factor.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fold change — fold_change","text":"","code":"fold_change(   factor_name,   paired = FALSE,   sample_name = character(0),   threshold = 2,   control_group = character(0),   method = \"geometric\",   conf_level = 0.95,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fold change — fold_change","text":"factor_name (character) name sample-meta column use. paired (logical) Paired fold change. Allowed values limited following: \"TRUE\": Fold change calculated taking account paired sampling. \"FALSE\": Fold change calculated assuming paired sampling. default FALSE. sample_name (character) name sample_meta column containing sample identifiers paired sampling. default character(0). threshold (numeric) fold change threshold labelling features significant. default 2. control_group (character) level name group used denominator (possible) computing fold change. default character(0). method (character) Fold change method. Allowed values limited following: \"geometric\": log transform applied using group means calculate fold change. non-tranformedspace equivalent using geometric group means. Confidence intervals independant paired sampling estimated using standard error mean log transformed space transformed back original space. \"median\": group medians method described Price Bonett used estimate confidence intervals. paired data standard error median used estimate confidence intervals median fold change pairs. \"mean\": group means method described Price Bonnet used estimate confidence intervals. paired data standard error mean used estimate confidence intervals mean fold change pairs. default \"geometric\". conf_level (numeric) confidence level interval. default 0.95. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fold change — fold_change","text":" fold_change object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Fold change — fold_change","text":"fold_change object inherits following struct classes: [fold_change] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fold change — fold_change","text":"Price Jr RM, Bonett DG (2020). \"Confidence Intervals Ratios Means Medians.\" Journal Educational Behavioral Statistics, 45(6), 750-770.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fold change — fold_change","text":"","code":"M = fold_change(       factor_name = \"V1\",       sample_name = character(0),       paired = FALSE,       threshold = 2,       control_group = character(0),       method = \"geometric\",       conf_level = 0.95)  D = MTBLS79_DatasetExperiment() M = fold_change(factor_name='Class') M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change_int.html","id":null,"dir":"Reference","previous_headings":"","what":"Fold change for interactions between factors — fold_change_int","title":"Fold change for interactions between factors — fold_change_int","text":"one factor fold change calculation extended include combinations levels (interactions) factors. Paired fold changes possible computation.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change_int.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fold change for interactions between factors — fold_change_int","text":"","code":"fold_change_int(   factor_name,   threshold = 2,   control_group = character(0),   method = \"geometric\",   conf_level = 0.95,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change_int.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fold change for interactions between factors — fold_change_int","text":"factor_name (character) name sample-meta column use. threshold (numeric) fold change threshold labelling features significant. default 2. control_group (character) level names groups used denominator (possible) computing fold change. One level factor, assumed order factor_name. default character(0). method (character) Fold change method. Allowed values limited following: \"geometric\": log transform applied using group means calculate fold change. non-tranformedspace equivalent using geometric group means. Confidence intervals independant paired sampling estimated using standard error mean log transformed space transformed back original space. \"median\": group medians method described Price Bonett used estimate confidence intervals. paired data standard error median used estimate confidence intervals median fold change pairs. \"mean\": group means method described Price Bonnet used estimate confidence intervals. paired data standard error mean used estimate confidence intervals mean fold change pairs. default \"geometric\". conf_level (numeric) confidence level interval. default 0.95. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change_int.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fold change for interactions between factors — fold_change_int","text":" fold_change_int object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change_int.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Fold change for interactions between factors — fold_change_int","text":"fold_change_int object inherits following struct classes: [fold_change_int] >> [fold_change] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change_int.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fold change for interactions between factors — fold_change_int","text":"Lloyd GR, Jankevics , Weber RJM (2020). \"struct: R/Bioconductor-based framework standardized metabolomics data analysis beyond.\" Bioinformatics, 36(22-23), 5551-5552. https://doi.org/10.1093/bioinformatics/btaa1031.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change_int.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fold change for interactions between factors — fold_change_int","text":"","code":"M = fold_change_int(       factor_name = \"V1\",       sample_name = character(0),       threshold = 2,       control_group = character(0),       method = \"geometric\",       paired = FALSE,       conf_level = 0.95)  D = MTBLS79_DatasetExperiment() D=D[,1:10,drop=FALSE] M = filter_smeta(mode='exclude',levels='QC',factor_name='Class') +     fold_change_int(factor_name=c('Class','Batch')) M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Fold change plot — fold_change_plot","title":"Fold change plot — fold_change_plot","text":"plot fold changes calculated chosen subset features. predefined fold change threshold indicated shaded regions.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fold change plot — fold_change_plot","text":"","code":"fold_change_plot(number_features = 20, orientation = \"portrait\", ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fold change plot — fold_change_plot","text":"number_features (numeric) number randomly selected features plot, list column numbers. default 20. orientation (character) Plot orientation. Allowed values limited following: \"landscape\": Features plotted y-axis. \"portrait\": Features plotted x-axis. default \"portrait\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fold change plot — fold_change_plot","text":"  fold_change_plot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Fold change plot — fold_change_plot","text":"fold_change_plot object inherits following struct classes: [fold_change_plot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fold_change_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fold change plot — fold_change_plot","text":"","code":"M = fold_change_plot(       number_features = 10,       orientation = \"portrait\")  C = fold_change_plot()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/forward_selection_by_rank.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward selection by rank — forward_selection_by_rank","title":"Forward selection by rank — forward_selection_by_rank","text":"model trained performance metric computed including increasing numbers features model. features included step defined rank, computed another variable e.g. VIP score. \"optimal\"subset features suggested minimising input performance metric.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/forward_selection_by_rank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward selection by rank — forward_selection_by_rank","text":"","code":"forward_selection_by_rank(   min_no_vars = 1,   max_no_vars = 100,   step_size = 1,   factor_name,   variable_rank,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/forward_selection_by_rank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward selection by rank — forward_selection_by_rank","text":"min_no_vars (numeric) minimum number variables include model. default 1. max_no_vars (numeric) maximum number variables include model. default 100. step_size (numeric) incremental change number features model. default 1. factor_name (character) name sample-meta column use. variable_rank (numeric, integer) values used rank features. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/forward_selection_by_rank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward selection by rank — forward_selection_by_rank","text":" forward_selection_by_rank object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/forward_selection_by_rank.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Forward selection by rank — forward_selection_by_rank","text":"forward_selection_by_rank object inherits following struct classes: [forward_selection_by_rank] >> [resampler] >> [iterator] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/forward_selection_by_rank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward selection by rank — forward_selection_by_rank","text":"","code":"M = forward_selection_by_rank(       min_no_vars = 1,       max_no_vars = 100,       step_size = 1,       factor_name = \"V1\",       variable_rank = 1)  # some data D = MTBLS79_DatasetExperiment(filtered=TRUE)  # normalise, impute and scale then remove QCs P = pqn_norm(qc_label='QC',factor_name='Class') +     knn_impute(neighbours=5) +     glog_transform(qc_label='QC',factor_name='Class') +     filter_smeta(mode='exclude',levels='QC',factor_name='Class') P = model_apply(P,D) D = predicted(P)  # forward selection using a PLSDA model M = forward_selection_by_rank(factor_name='Class',                              min_no_vars=2,                              max_no_vars=11,                              variable_rank=1:2063) *     (mean_centre() + PLSDA(number_components=1,                            factor_name='Class')) M = run(M,D,balanced_accuracy())"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fs_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward selection line plot — fs_line","title":"Forward selection line plot — fs_line","text":"line plot forward selection. computed model performance metric plotted number features included model.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fs_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward selection line plot — fs_line","text":"","code":"fs_line(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fs_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward selection line plot — fs_line","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fs_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward selection line plot — fs_line","text":"  fs_line  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fs_line.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Forward selection line plot — fs_line","text":"fs_line object inherits following struct classes: [fs_line] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/fs_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward selection line plot — fs_line","text":"","code":"M = fs_line()  # some data D = MTBLS79_DatasetExperiment(filtered=TRUE)  # normalise, impute and scale then remove QCs P = pqn_norm(qc_label='QC',factor_name='Class') +     knn_impute(neighbours=5) +     glog_transform(qc_label='QC',factor_name='Class') +     filter_smeta(mode='exclude',levels='QC',factor_name='Class') P = model_apply(P,D) D = predicted(P)  # forward selection using a PLSDA model M = forward_selection_by_rank(factor_name='Class',                              min_no_vars=2,                              max_no_vars=11,                              variable_rank=1:2063) *     (mean_centre() + PLSDA(number_components=1,                            factor_name='Class')) M = run(M,D,balanced_accuracy())  # chart C = fs_line() chart_plot(C,M)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_opt_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Glog optimisation — glog_opt_plot","title":"Glog optimisation — glog_opt_plot","text":"plot sum squares error (SSE) vs different values lambda glog transform. indicated optimum value lambda minimises SSE.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_opt_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glog optimisation — glog_opt_plot","text":"","code":"glog_opt_plot(plot_grid = 100, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_opt_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glog optimisation — glog_opt_plot","text":"plot_grid (numeric)  default 100. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_opt_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glog optimisation — glog_opt_plot","text":"  glog_opt_plot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_opt_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Glog optimisation — glog_opt_plot","text":"object makes use functionality following packages: pmp","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_opt_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Glog optimisation — glog_opt_plot","text":"glog_opt_plot object inherits following struct classes: [glog_opt_plot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_opt_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Glog optimisation — glog_opt_plot","text":"Jankevics , Lloyd GR, Weber RJM (2023). pmp: Peak Matrix Processing signal batch correction metabolomics datasets. doi:10.18129/B9.bioc.pmp https://doi.org/10.18129/B9.bioc.pmp, R package version 1.14.0, https://bioconductor.org/packages/pmp.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_opt_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Glog optimisation — glog_opt_plot","text":"","code":"M = glog_opt_plot(       plot_grid = numeric(0))  D = iris_DatasetExperiment() M = glog_transform(qc_label='versicolor',factor_name='Species') M = model_apply(M,D) #> Error!Lambda tending to infinity! Using standard #> Error!Lambda tending to infinity! Using standard C = glog_opt_plot() chart_plot(C,M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalised logarithmic transform — glog_transform","title":"Generalised logarithmic transform — glog_transform","text":"generalised logarithm (glog) transformation applies log transformation applying offset account technical variation.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalised logarithmic transform — glog_transform","text":"","code":"glog_transform(qc_label = \"QC\", factor_name, lambda = NULL, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalised logarithmic transform — glog_transform","text":"qc_label (character) label used identify QC samples. default \"QC\". factor_name (character) name sample-meta column use. lambda (numeric, NULL) value lambda use. NULL pmp package used determine \"optimal\" value lambda. default NULL. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalised logarithmic transform — glog_transform","text":" glog_transform object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_transform.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalised logarithmic transform — glog_transform","text":"object makes use functionality following packages: pmp","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_transform.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Generalised logarithmic transform — glog_transform","text":"glog_transform object inherits following struct classes: [glog_transform] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_transform.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalised logarithmic transform — glog_transform","text":"Jankevics , Lloyd GR, Weber RJM (2023). pmp: Peak Matrix Processing signal batch correction metabolomics datasets. doi:10.18129/B9.bioc.pmp https://doi.org/10.18129/B9.bioc.pmp, R package version 1.14.0, https://bioconductor.org/packages/pmp. Durbin B, Hardin J, Hawkins D, Rocke D (2002). \"variance-stabilizing transformation gene-expression microarray data.\" Bioinformatics, 18(Suppl 1), S105-S110. Parsons HM, Ludwig C, Gunther UL, Viant MR (2007). \"Improved classification accuracy 1- ', '2-dimensional NMR metabolomics data using variance ', 'stabilising generalised logarithm transformation.\" Bioinformatics, 8(1), 234.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/glog_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalised logarithmic transform — glog_transform","text":"","code":"M = glog_transform(       qc_label = \"QC\",       factor_name = \"V1\",       lambda = NULL)  D = iris_DatasetExperiment() M = glog_transform(qc_label='versicolor',factor_name='Species') M = model_apply(M,D) #> Error!Lambda tending to infinity! Using standard #> Error!Lambda tending to infinity! Using standard"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/grid_search_1d.html","id":null,"dir":"Reference","previous_headings":"","what":"One dimensional grid search — grid_search_1d","title":"One dimensional grid search — grid_search_1d","text":"one dimensional grid search calculates performance metric model evenly spaced values model input parameter. \"optimum\" value parameter suggested one maximises performance, minimises error (whichever appropriate chosen metric)","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/grid_search_1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One dimensional grid search — grid_search_1d","text":"","code":"grid_search_1d(   param_to_optimise,   search_values,   model_index,   factor_name,   max_min = \"min\",   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/grid_search_1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One dimensional grid search — grid_search_1d","text":"param_to_optimise (character) name model input parameter focus search. search_values () values input parameter optimised. model_index (numeric, integer) index model sequence uses parameter optimised. factor_name (character) name sample-meta column use. max_min (character) Maximise minimise. Allowed values limited following: \"max\": optimium parameter value suggested based maximising performance metric. \"min\": optimium parameter value suggested based minimising performance metric. default \"min\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/grid_search_1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One dimensional grid search — grid_search_1d","text":" grid_search_1d object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/grid_search_1d.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"One dimensional grid search — grid_search_1d","text":"grid_search_1d object inherits following struct classes: [grid_search_1d] >> [resampler] >> [iterator] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/grid_search_1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"One dimensional grid search — grid_search_1d","text":"","code":"M = grid_search_1d(       param_to_optimise = character(0),       search_values = numeric(0),       model_index = numeric(0),       factor_name = \"V1\",       max_min = \"min\")  D = MTBLS79_DatasetExperiment() # some preprocessing M = pqn_norm(qc_label='QC',factor_name='Class') +     knn_impute() +     glog_transform(qc_label='QC',factor_name='Class') +     filter_smeta(factor_name='Class',levels='QC',mode='exclude') M=model_apply(M,D) D=predicted(M)  # reduce number of features for this example D=D[,1:10]  # optmise number of components for PLS model I = grid_search_1d(param_to_optimise='number_components',search_values=1:5,         model_index=2,factor_name='Class') *         (mean_centre()+PLSDA(factor_name='Class')) I = run(I,D,balanced_accuracy())"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/gs_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Grid search line plot — gs_line","title":"Grid search line plot — gs_line","text":"plot calculated performance metric model input parameter values used train model. optimum parameter value indicated based minimising (maximising) chosen metric.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/gs_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grid search line plot — gs_line","text":"","code":"gs_line(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/gs_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grid search line plot — gs_line","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/gs_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grid search line plot — gs_line","text":"  gs_line  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/gs_line.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Grid search line plot — gs_line","text":"gs_line object inherits following struct classes: [gs_line] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/gs_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grid search line plot — gs_line","text":"","code":"M = gs_line()  C = gs_line()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/hca_dendrogram.html","id":null,"dir":"Reference","previous_headings":"","what":"HCA dendrogram — hca_dendrogram","title":"HCA dendrogram — hca_dendrogram","text":"dendrogram visualising clustering HCA.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/hca_dendrogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HCA dendrogram — hca_dendrogram","text":"","code":"hca_dendrogram(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/hca_dendrogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HCA dendrogram — hca_dendrogram","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/hca_dendrogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HCA dendrogram — hca_dendrogram","text":"  hca_dendrogram  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/hca_dendrogram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HCA dendrogram — hca_dendrogram","text":"object makes use functionality following packages: ggdendro","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/hca_dendrogram.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"HCA dendrogram — hca_dendrogram","text":"hca_dendrogram object inherits following struct classes: [hca_dendrogram] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/hca_dendrogram.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"HCA dendrogram — hca_dendrogram","text":"de Vries , Ripley BD (2022). ggdendro: Create Dendrograms Tree Diagrams Using 'ggplot2'. R package version 0.1.23, https://CRAN.R-project.org/package=ggdendro.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/hca_dendrogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HCA dendrogram — hca_dendrogram","text":"","code":"M = hca_dendrogram()  C = hca_dendrogram()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfold_xval.html","id":null,"dir":"Reference","previous_headings":"","what":"k-fold cross-validation — kfold_xval","title":"k-fold cross-validation — kfold_xval","text":"k-fold cross-validation iterative approach applied validate models. samples divided k \"folds\", subsets. subset excluded model training used model validation , resulting single left-prediction sample. Model performance metrics computed training test sets across folds.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfold_xval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"k-fold cross-validation — kfold_xval","text":"","code":"kfold_xval(folds = 10, method = \"venetian\", factor_name, collect = NULL, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfold_xval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"k-fold cross-validation — kfold_xval","text":"folds (numeric, integer) number cross-validation folds. default 10. method (character) Fold selection method. Allowed values limited following: \"venetian\": Every nth sample assigned fold, n number folds. \"blocks\": Blocks adjacent samples assigned fold. \"random\": Samples randomly assigned fold. default \"venetian\". factor_name (character) name sample-meta column use. collect (NULL, character) name model output collect bootstrap repetitions, addition input metric. default NULL. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfold_xval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"k-fold cross-validation — kfold_xval","text":" kfold_xval object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfold_xval.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"k-fold cross-validation — kfold_xval","text":"kfold_xval object inherits following struct classes: [kfold_xval] >> [resampler] >> [iterator] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfold_xval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"k-fold cross-validation — kfold_xval","text":"","code":"M = kfold_xval(       folds = 5,       method = \"random\",       factor_name = \"V1\",       collect = NULL)  D = iris_DatasetExperiment() I = kfold_xval(factor_name='Species') *     (mean_centre() + PLSDA(factor_name='Species')) I = run(I,D,balanced_accuracy())"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfoldxcv_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"k-fold cross validation plot — kfoldxcv_grid","title":"k-fold cross validation plot — kfoldxcv_grid","text":"graphic visualising true class predicted class samples groups cross-validation folds.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfoldxcv_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"k-fold cross validation plot — kfoldxcv_grid","text":"","code":"kfoldxcv_grid(factor_name, level, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfoldxcv_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"k-fold cross validation plot — kfoldxcv_grid","text":"factor_name (character) name sample-meta column use. level (character) level/group plot. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfoldxcv_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"k-fold cross validation plot — kfoldxcv_grid","text":"  kfoldxcv_grid  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfoldxcv_grid.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"k-fold cross validation plot — kfoldxcv_grid","text":"kfoldxcv_grid object inherits following struct classes: [kfoldxcv_grid] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfoldxcv_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"k-fold cross validation plot — kfoldxcv_grid","text":"","code":"M = kfoldxcv_grid(       factor_name = \"V1\",       level = \"level_1\")  D = iris_DatasetExperiment() I = kfold_xval(factor_name='Species') *     (mean_centre() + PLSDA(factor_name='Species')) I = run(I,D,balanced_accuracy())  C = kfoldxcv_grid(factor_name='Species',level='setosa') chart_plot(C,I) #> Warning: Removed 900 rows containing missing values (`geom_tile()`)."},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfoldxcv_metric.html","id":null,"dir":"Reference","previous_headings":"","what":"kfoldxcv metric plot — kfoldxcv_metric","title":"kfoldxcv metric plot — kfoldxcv_metric","text":"boxplot performance metric computed fold k-fold cross-validation.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfoldxcv_metric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kfoldxcv metric plot — kfoldxcv_metric","text":"","code":"kfoldxcv_metric(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfoldxcv_metric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kfoldxcv metric plot — kfoldxcv_metric","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfoldxcv_metric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kfoldxcv metric plot — kfoldxcv_metric","text":"  kfoldxcv_metric  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfoldxcv_metric.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"kfoldxcv metric plot — kfoldxcv_metric","text":"kfoldxcv_metric object inherits following struct classes: [kfoldxcv_metric] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kfoldxcv_metric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"kfoldxcv metric plot — kfoldxcv_metric","text":"","code":"M = kfoldxcv_metric()  C = kfoldxcv_metric()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/knn_impute.html","id":null,"dir":"Reference","previous_headings":"","what":"kNN missing value imputation — knn_impute","title":"kNN missing value imputation — knn_impute","text":"k-nearest neighbour missing value imputation replaces missing values data average predefined number similar neighbours value present","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/knn_impute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kNN missing value imputation — knn_impute","text":"","code":"knn_impute(   neighbours = 5,   sample_max = 50,   feature_max = 50,   by = \"features\",   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/knn_impute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kNN missing value imputation — knn_impute","text":"neighbours (numeric) number neighbours (k) use imputation. default 5. sample_max (numeric) maximum percent missing values per sample. default 50. feature_max (numeric) maximum percent missing values per feature. default 50. (character) Impute using similar \"samples\" \"features\". Default features. default \"features\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/knn_impute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kNN missing value imputation — knn_impute","text":" knn_impute object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/knn_impute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"kNN missing value imputation — knn_impute","text":"object makes use functionality following packages: pmp","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/knn_impute.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"kNN missing value imputation — knn_impute","text":"knn_impute object inherits following struct classes: [knn_impute] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/knn_impute.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"kNN missing value imputation — knn_impute","text":"Jankevics , Lloyd GR, Weber RJM (2023). pmp: Peak Matrix Processing signal batch correction metabolomics datasets. doi:10.18129/B9.bioc.pmp https://doi.org/10.18129/B9.bioc.pmp, R package version 1.14.0, https://bioconductor.org/packages/pmp.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/knn_impute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"kNN missing value imputation — knn_impute","text":"","code":"M = knn_impute(       neighbours = 5,       feature_max = 50,       sample_max = 50,       by = \"features\")  M = knn_impute()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kw_p_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram of p values — kw_p_hist","title":"Histogram of p values — kw_p_hist","text":"histogram p-values computed kruskal-wallis method","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kw_p_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram of p values — kw_p_hist","text":"","code":"kw_p_hist(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kw_p_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram of p values — kw_p_hist","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kw_p_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram of p values — kw_p_hist","text":"  kw_p_hist  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kw_p_hist.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Histogram of p values — kw_p_hist","text":"kw_p_hist object inherits following struct classes: [kw_p_hist] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kw_p_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Histogram of p values — kw_p_hist","text":"","code":"M = kw_p_hist()  C = kw_p_hist()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kw_rank_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Kruskal-Wallis rank sum test — kw_rank_sum","title":"Kruskal-Wallis rank sum test — kw_rank_sum","text":"Kruskal-Wallis test univariate hypothesis testing method allows multiple (n>=2) groups compared without making assumption values normally distributed. non-parametric equivalent 1-way ANOVA. test applied variables/features individually, multiple test corrected p-values computed indicate significance variables/features.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kw_rank_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kruskal-Wallis rank sum test — kw_rank_sum","text":"","code":"kw_rank_sum(alpha = 0.05, mtc = \"fdr\", factor_names, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kw_rank_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kruskal-Wallis rank sum test — kw_rank_sum","text":"alpha (numeric) p-value cutoff determining significance. default 0.05. mtc (character) Multiple test correction method. Allowed values limited following: \"bonferroni\": Bonferroni correction p-values multiplied number comparisons. \"fdr\": Benjamini Hochberg False Discovery Rate correction. \"none\": correction. default \"fdr\". factor_names (character) name sample meta column(s) use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kw_rank_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kruskal-Wallis rank sum test — kw_rank_sum","text":" kw_rank_sum object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kw_rank_sum.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Kruskal-Wallis rank sum test — kw_rank_sum","text":"kw_rank_sum object inherits following struct classes: [kw_rank_sum] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/kw_rank_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kruskal-Wallis rank sum test — kw_rank_sum","text":"","code":"M = kw_rank_sum(       alpha = 0.05,       mtc = \"fdr\",       factor_names = \"V1\")  D = iris_DatasetExperiment() M = kw_rank_sum(factor_names='Species') M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/linear_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear model — linear_model","title":"Linear model — linear_model","text":"Linear models can used carry regression, single stratum analysis variance analysis covariance.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/linear_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear model — linear_model","text":"","code":"linear_model(formula, na_action = \"na.omit\", contrasts = list(), ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/linear_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear model — linear_model","text":"formula (formula) symbolic description model fitted. na_action (character) NA action. Allowed values limited following: \"na.omit\": Incomplete cases removed. \"na.fail\": error thrown NA present. \"na.exclude\": Incomplete cases removed, output result padded correct size using NA. \"na.pass\": apply linear model NA present. default \"na.omit\". contrasts (list) contrasts associated factor. default list(). ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/linear_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear model — linear_model","text":" linear_model object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/linear_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear model — linear_model","text":"object makes use functionality following packages: stats","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/linear_model.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Linear model — linear_model","text":"linear_model object inherits following struct classes: [linear_model] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/linear_model.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Linear model — linear_model","text":"R Core Team (2023). R: Language Environment Statistical Computing. R Foundation Statistical Computing, Vienna, Austria. https://www.R-project.org/.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/linear_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear model — linear_model","text":"","code":"M = linear_model(       formula = y ~ x,       na_action = \"na.omit\",       contrasts = list())  D = iris_DatasetExperiment() M = linear_model(formula = y~Species)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/log_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"logarithm transform — log_transform","title":"logarithm transform — log_transform","text":"logarithmic transform applied values data matrix.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/log_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logarithm transform — log_transform","text":"","code":"log_transform(base = 10, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/log_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logarithm transform — log_transform","text":"base (numeric) base logarithm used transform. default 10. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/log_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logarithm transform — log_transform","text":" log_transform object following output slots: struct object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/log_transform.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"logarithm transform — log_transform","text":"log_transform object inherits following struct classes: [log_transform] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/log_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logarithm transform — log_transform","text":"","code":"M = log_transform(       base = 10)  M = log_transform()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mean_centre.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean centre — mean_centre","title":"Mean centre — mean_centre","text":"mean sample subtracted samples data matrix. features centred matrix zero mean.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mean_centre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean centre — mean_centre","text":"","code":"mean_centre(mode = \"data\", ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mean_centre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean centre — mean_centre","text":"mode (character) Mode action. Allowed values limited following: \"data\": Centring applied data block. \"sample_meta\": Centring applied sample_meta block. \"\": Centring applied data sample_meta blocks. default \"data\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mean_centre.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean centre — mean_centre","text":" mean_centre object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mean_centre.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Mean centre — mean_centre","text":"mean_centre object inherits following struct classes: [mean_centre] >> [preprocess] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mean_centre.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean centre — mean_centre","text":"","code":"M = mean_centre(       mode = \"data\")  M = mean_centre()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mean_of_medians.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean of medians — mean_of_medians","title":"Mean of medians — mean_of_medians","text":"data matrix normalised mean median factor level.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mean_of_medians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean of medians — mean_of_medians","text":"","code":"mean_of_medians(factor_name, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mean_of_medians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean of medians — mean_of_medians","text":"factor_name (character) name sample-meta column use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mean_of_medians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean of medians — mean_of_medians","text":" mean_of_medians object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mean_of_medians.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Mean of medians — mean_of_medians","text":"mean_of_medians object inherits following struct classes: [mean_of_medians] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mean_of_medians.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mean of medians — mean_of_medians","text":"","code":"M = mean_of_medians(       factor_name = \"V1\")  D = iris_DatasetExperiment() M = mean_of_medians(factor_name='Species') M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mixed_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixed effects model — mixed_effect","title":"Mixed effects model — mixed_effect","text":"mixed effects model extension ANOVA fixed random effects.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mixed_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixed effects model — mixed_effect","text":"","code":"mixed_effect(alpha = 0.05, mtc = \"fdr\", formula, ss_type = \"marginal\", ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mixed_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixed effects model — mixed_effect","text":"alpha (numeric) p-value cutoff determining significance. default 0.05. mtc (character) Multiple test correction method. Allowed values limited following: \"bonferroni\": Bonferroni correction p-values multiplied number comparisons. \"fdr\": Benjamini Hochberg False Discovery Rate correction. \"none\": correction. default \"fdr\". formula (formula) symbolic description model fitted. ss_type (character) Sum squares type. Allowed values limited following: \"marginal\": Type III sum squares. \"sequential\": Type II sum squares. default \"marginal\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mixed_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mixed effects model — mixed_effect","text":" mixed_effect object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mixed_effect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mixed effects model — mixed_effect","text":"object makes use functionality following packages: nlme emmeans","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mixed_effect.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Mixed effects model — mixed_effect","text":"mixed_effect object inherits following struct classes: [mixed_effect] >> [ANOVA] >> [model] >> [stato] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mixed_effect.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mixed effects model — mixed_effect","text":"Pinheiro J, Bates D, R Core Team (2023). nlme: Linear Nonlinear Mixed Effects Models. R package version 3.1-164, https://CRAN.R-project.org/package=nlme. Pinheiro JC, Bates DM (2000). Mixed-Effects Models S S-PLUS. Springer, New York. doi:10.1007/b98882 https://doi.org/10.1007/b98882. Lenth R (2023). emmeans: Estimated Marginal Means, aka Least-Squares Means. R package version 1.9.0, https://CRAN.R-project.org/package=emmeans. Fox J, Weisberg S (2019). R Companion Applied Regression, Third edition. Sage, Thousand Oaks CA. https://socialsciences.mcmaster.ca/jfox/Books/Companion/.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mixed_effect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mixed effects model — mixed_effect","text":"","code":"M = mixed_effect(       alpha = 0.05,       mtc = \"fdr\",       formula = y ~ x,       ss_type = \"marginal\")  D = iris_DatasetExperiment() D$sample_meta$id=rownames(D) # dummy id column M = mixed_effect(formula = y~Species+ Error(id/Species)) M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply method — model_apply,ANOVA,DatasetExperiment-method","title":"Apply method — model_apply,ANOVA,DatasetExperiment-method","text":"Applies method input DatasetExperiment","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply method — model_apply,ANOVA,DatasetExperiment-method","text":"","code":"# S4 method for ANOVA,DatasetExperiment model_apply(M, D)  # S4 method for HSD,DatasetExperiment model_apply(M, D)  # S4 method for mixed_effect,DatasetExperiment model_apply(M, D)  # S4 method for HSDEM,DatasetExperiment model_apply(M, D)  # S4 method for classical_lsq,DatasetExperiment model_apply(M, D)  # S4 method for confounders_clsq,DatasetExperiment model_apply(M, D)  # S4 method for constant_sum_norm,DatasetExperiment model_apply(M, D)  # S4 method for corr_coef,DatasetExperiment model_apply(M, D)  # S4 method for split_data,DatasetExperiment model_apply(M, D)  # S4 method for equal_split,DatasetExperiment model_apply(M, D)  # S4 method for filter_smeta,DatasetExperiment model_apply(M, D)  # S4 method for fisher_exact,DatasetExperiment model_apply(M, D)  # S4 method for fold_change,DatasetExperiment model_apply(M, D)  # S4 method for fold_change_int,DatasetExperiment model_apply(M, D)  # S4 method for HCA,DatasetExperiment model_apply(M, D)  # S4 method for knn_impute,DatasetExperiment model_apply(M, D)  # S4 method for kw_rank_sum,DatasetExperiment model_apply(M, D)  # S4 method for log_transform,DatasetExperiment model_apply(M, D)  # S4 method for mean_of_medians,DatasetExperiment model_apply(M, D)  # S4 method for nroot_transform,DatasetExperiment model_apply(M, D)  # S4 method for pairs_filter,DatasetExperiment model_apply(M, D)  # S4 method for prop_na,DatasetExperiment model_apply(M, D)  # S4 method for rsd_filter,DatasetExperiment model_apply(M, D)  # S4 method for sb_corr,DatasetExperiment model_apply(M, D)  # S4 method for stratified_split,DatasetExperiment model_apply(M, D)  # S4 method for tSNE,DatasetExperiment model_apply(M, D)  # S4 method for ttest,DatasetExperiment model_apply(M, D)  # S4 method for vec_norm,DatasetExperiment model_apply(M, D)  # S4 method for wilcox_test,DatasetExperiment model_apply(M, D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply method — model_apply,ANOVA,DatasetExperiment-method","text":"M method object D another object used first","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply method — model_apply,ANOVA,DatasetExperiment-method","text":"Returns modified method object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply method — model_apply,ANOVA,DatasetExperiment-method","text":"","code":"M=model() model_apply(M,DatasetExperiment()) #> Warning: no training implemented for this model #> A \"model\" object #> ---------------- #> name:           #> description:    #> predicted:      #> seq_in:        data #>"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Model prediction — model_predict,DFA,DatasetExperiment-method","title":"Model prediction — model_predict,DFA,DatasetExperiment-method","text":"Apply model using input DatasetExperiment. Assumes model trained first.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model prediction — model_predict,DFA,DatasetExperiment-method","text":"","code":"# S4 method for DFA,DatasetExperiment model_predict(M, D)  # S4 method for PCA,DatasetExperiment model_predict(M, D)  # S4 method for PLSR,DatasetExperiment model_predict(M, D)  # S4 method for PLSDA,DatasetExperiment model_predict(M, D)  # S4 method for autoscale,DatasetExperiment model_predict(M, D)  # S4 method for blank_filter,DatasetExperiment model_predict(M, D)  # S4 method for constant_sum_norm,DatasetExperiment model_predict(M, D)  # S4 method for dratio_filter,DatasetExperiment model_predict(M, D)  # S4 method for filter_by_name,DatasetExperiment model_predict(M, D)  # S4 method for filter_na_count,DatasetExperiment model_predict(M, D)  # S4 method for filter_smeta,DatasetExperiment model_predict(M, D)  # S4 method for glog_transform,DatasetExperiment model_predict(M, D)  # S4 method for linear_model,DatasetExperiment model_predict(M, D)  # S4 method for mean_centre,DatasetExperiment model_predict(M, D)  # S4 method for mv_feature_filter,DatasetExperiment model_predict(M, D)  # S4 method for mv_sample_filter,DatasetExperiment model_predict(M, D)  # S4 method for OPLSR,DatasetExperiment model_predict(M, D)  # S4 method for OPLSDA,DatasetExperiment model_predict(M, D)  # S4 method for pareto_scale,DatasetExperiment model_predict(M, D)  # S4 method for pqn_norm,DatasetExperiment model_predict(M, D)  # S4 method for SVM,DatasetExperiment model_predict(M, D)  # S4 method for vec_norm,DatasetExperiment model_predict(M, D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model prediction — model_predict,DFA,DatasetExperiment-method","text":"M model object D DatasetExperiment object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model prediction — model_predict,DFA,DatasetExperiment-method","text":"Returns modified model object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model prediction — model_predict,DFA,DatasetExperiment-method","text":"","code":"M = example_model() M = model_predict(M,iris_DatasetExperiment())"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_reverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Reverse preprocessing — model_reverse,autoscale,DatasetExperiment-method","title":"Reverse preprocessing — model_reverse,autoscale,DatasetExperiment-method","text":"Reverse effect preprocessing step DatasetExperiment.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_reverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reverse preprocessing — model_reverse,autoscale,DatasetExperiment-method","text":"","code":"# S4 method for autoscale,DatasetExperiment model_reverse(M, D)  # S4 method for mean_centre,DatasetExperiment model_reverse(M, D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_reverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reverse preprocessing — model_reverse,autoscale,DatasetExperiment-method","text":"M model object D DatasetExperiment object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_reverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reverse preprocessing — model_reverse,autoscale,DatasetExperiment-method","text":"Returns modified DatasetExperiment object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_reverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reverse preprocessing — model_reverse,autoscale,DatasetExperiment-method","text":"","code":"M = example_model() D = model_reverse(M,iris_DatasetExperiment())"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_train.html","id":null,"dir":"Reference","previous_headings":"","what":"Train a model — model_train,DFA,DatasetExperiment-method","title":"Train a model — model_train,DFA,DatasetExperiment-method","text":"Trains model using input DatasetExperiment","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Train a model — model_train,DFA,DatasetExperiment-method","text":"","code":"# S4 method for DFA,DatasetExperiment model_train(M, D)  # S4 method for PCA,DatasetExperiment model_train(M, D)  # S4 method for PLSR,DatasetExperiment model_train(M, D)  # S4 method for PLSDA,DatasetExperiment model_train(M, D)  # S4 method for autoscale,DatasetExperiment model_train(M, D)  # S4 method for blank_filter,DatasetExperiment model_train(M, D)  # S4 method for constant_sum_norm,DatasetExperiment model_train(M, D)  # S4 method for dratio_filter,DatasetExperiment model_train(M, D)  # S4 method for filter_by_name,DatasetExperiment model_train(M, D)  # S4 method for filter_na_count,DatasetExperiment model_train(M, D)  # S4 method for filter_smeta,DatasetExperiment model_train(M, D)  # S4 method for glog_transform,DatasetExperiment model_train(M, D)  # S4 method for linear_model,DatasetExperiment model_train(M, D)  # S4 method for mean_centre,DatasetExperiment model_train(M, D)  # S4 method for mv_feature_filter,DatasetExperiment model_train(M, D)  # S4 method for mv_sample_filter,DatasetExperiment model_train(M, D)  # S4 method for OPLSR,DatasetExperiment model_train(M, D)  # S4 method for OPLSDA,DatasetExperiment model_train(M, D)  # S4 method for pareto_scale,DatasetExperiment model_train(M, D)  # S4 method for pqn_norm,DatasetExperiment model_train(M, D)  # S4 method for SVM,DatasetExperiment model_train(M, D)  # S4 method for vec_norm,DatasetExperiment model_train(M, D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Train a model — model_train,DFA,DatasetExperiment-method","text":"M model object D DatasetExperiment object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Train a model — model_train,DFA,DatasetExperiment-method","text":"Returns modified model object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/model_train.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Train a model — model_train,DFA,DatasetExperiment-method","text":"","code":"M = example_model() M = model_train(M,iris_DatasetExperiment())"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing value boxplots — mv_boxplot","title":"Missing value boxplots — mv_boxplot","text":"Boxplots number missing values per sample/feature.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing value boxplots — mv_boxplot","text":"","code":"mv_boxplot(   label_outliers = TRUE,   by_sample = TRUE,   factor_name,   show_counts = TRUE,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing value boxplots — mv_boxplot","text":"label_outliers (logical) Label outliers. Allowed values limited following: \"TRUE\": Sample labels potential outliers displayed plot. \"FALSE\": Sample labels included plot. default TRUE. by_sample (logical) Plot sample feature. Allowed values limited following: \"TRUE\": Missing values plotted per sample. \"FALSE\": Missing values plotted per feature. default TRUE. factor_name (character) name sample-meta column use. show_counts (logical) Show counts. Allowed values limited following: \"TRUE\": number samples box displayed. \"FALSE\": number samples box displayed. default TRUE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missing value boxplots — mv_boxplot","text":"  mv_boxplot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_boxplot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Missing value boxplots — mv_boxplot","text":"mv_boxplot object inherits following struct classes: [mv_boxplot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_boxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missing value boxplots — mv_boxplot","text":"","code":"M = mv_boxplot(       label_outliers = FALSE,       by_sample = FALSE,       factor_name = \"V1\",       show_counts = FALSE)  D = MTBLS79_DatasetExperiment() C = mv_boxplot(factor_name='Class') chart_plot(C,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_feature_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter features by missing values — mv_feature_filter","title":"Filter features by missing values — mv_feature_filter","text":"Removes features percentage non-missing values falls threshold.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_feature_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter features by missing values — mv_feature_filter","text":"","code":"mv_feature_filter(   threshold = 20,   qc_label = \"QC\",   method = \"QC\",   factor_name,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_feature_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter features by missing values — mv_feature_filter","text":"threshold (numeric) minimum percentage non-missing values. default 20. qc_label (character) label used identify QC/group samples using \"QC\" (within named group) filtering method. default \"QC\". method (character) Filtering method. Allowed values limited following: \"within_all\": Features removed threshold non-missing values met groups. \"within_one\": Features removed threshold non-missing values met group. \"QC\": Features removed threshold non-missing values met named group. \"across\": filter applied ignoring sample group. default \"QC\". factor_name (character) name sample-meta column use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_feature_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter features by missing values — mv_feature_filter","text":" mv_feature_filter object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_feature_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter features by missing values — mv_feature_filter","text":"object makes use functionality following packages: pmp","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_feature_filter.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Filter features by missing values — mv_feature_filter","text":"mv_feature_filter object inherits following struct classes: [mv_feature_filter] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_feature_filter.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Filter features by missing values — mv_feature_filter","text":"Jankevics , Lloyd GR, Weber RJM (2023). pmp: Peak Matrix Processing signal batch correction metabolomics datasets. doi:10.18129/B9.bioc.pmp https://doi.org/10.18129/B9.bioc.pmp, R package version 1.14.0, https://bioconductor.org/packages/pmp.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_feature_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter features by missing values — mv_feature_filter","text":"","code":"M = mv_feature_filter(       threshold = 20,       qc_label = \"QC\",       method = \"QC\",       factor_name = \"V1\")  D = iris_DatasetExperiment() M = mv_feature_filter(factor_name='Species',qc_label='versicolor') M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_feature_filter_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram of missing values per feature — mv_feature_filter_hist","title":"Histogram of missing values per feature — mv_feature_filter_hist","text":"histogram proportion missing values per feature.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_feature_filter_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram of missing values per feature — mv_feature_filter_hist","text":"","code":"mv_feature_filter_hist(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_feature_filter_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram of missing values per feature — mv_feature_filter_hist","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_feature_filter_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram of missing values per feature — mv_feature_filter_hist","text":"  mv_feature_filter_hist  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_feature_filter_hist.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Histogram of missing values per feature — mv_feature_filter_hist","text":"mv_feature_filter_hist object inherits following struct classes: [mv_feature_filter_hist] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_feature_filter_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Histogram of missing values per feature — mv_feature_filter_hist","text":"","code":"M = mv_feature_filter_hist()  C = mv_feature_filter_hist()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing value histogram — mv_histogram","title":"Missing value histogram — mv_histogram","text":"histogram numbers missing values per sample/feature","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing value histogram — mv_histogram","text":"","code":"mv_histogram(label_outliers = TRUE, by_sample = TRUE, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing value histogram — mv_histogram","text":"label_outliers (logical) Label outliers. Allowed values limited following: \"TRUE\": Sample labels potential outliers displayed plot. \"FALSE\": Sample labels included plot. default TRUE. by_sample (logical) Plot sample feature. Allowed values limited following: \"TRUE\": Missing values plotted per sample. \"FALSE\": Missing values plotted per feature. default TRUE. ... additional slots values passed struct_class","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missing value histogram — mv_histogram","text":"  mv_histogram  object. object output slots. See chart_plot struct package plot chart object. struct object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_histogram.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Missing value histogram — mv_histogram","text":"mv_histogram object inherits following struct classes: [mv_histogram] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_histogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missing value histogram — mv_histogram","text":"","code":"M = mv_histogram(       label_outliers = FALSE,       by_sample = FALSE)  D = MTBLS79_DatasetExperiment() C = mv_histogram(label_outliers=FALSE,by_sample=FALSE) chart_plot(C,D) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #> Warning: Removed 2 rows containing missing values (`geom_bar()`)."},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_sample_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing value sample filter — mv_sample_filter","title":"Missing value sample filter — mv_sample_filter","text":"Removes samples percent number missing values exceeds threshold.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_sample_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing value sample filter — mv_sample_filter","text":"","code":"mv_sample_filter(mv_threshold = 20, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_sample_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing value sample filter — mv_sample_filter","text":"mv_threshold (numeric) maximum percentage features missing values sample. default 20. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_sample_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missing value sample filter — mv_sample_filter","text":" mv_sample_filter object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_sample_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Missing value sample filter — mv_sample_filter","text":"object makes use functionality following packages: pmp","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_sample_filter.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Missing value sample filter — mv_sample_filter","text":"mv_sample_filter object inherits following struct classes: [mv_sample_filter] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_sample_filter.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Missing value sample filter — mv_sample_filter","text":"Jankevics , Lloyd GR, Weber RJM (2023). pmp: Peak Matrix Processing signal batch correction metabolomics datasets. doi:10.18129/B9.bioc.pmp https://doi.org/10.18129/B9.bioc.pmp, R package version 1.14.0, https://bioconductor.org/packages/pmp.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_sample_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missing value sample filter — mv_sample_filter","text":"","code":"M = mv_sample_filter(       mv_threshold = 20)  C = mv_sample_filter()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_sample_filter_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram of missing values per sample — mv_sample_filter_hist","title":"Histogram of missing values per sample — mv_sample_filter_hist","text":"histogram proportion missing values per sample","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_sample_filter_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram of missing values per sample — mv_sample_filter_hist","text":"","code":"mv_sample_filter_hist(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_sample_filter_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram of missing values per sample — mv_sample_filter_hist","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_sample_filter_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram of missing values per sample — mv_sample_filter_hist","text":"  mv_sample_filter_hist  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_sample_filter_hist.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Histogram of missing values per sample — mv_sample_filter_hist","text":"mv_sample_filter_hist object inherits following struct classes: [mv_sample_filter_hist] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/mv_sample_filter_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Histogram of missing values per sample — mv_sample_filter_hist","text":"","code":"M = mv_sample_filter_hist()  C = mv_sample_filter_hist()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/nroot_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"nth root transform — nroot_transform","title":"nth root transform — nroot_transform","text":"values data matrix transformed raising power 1/n.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/nroot_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nth root transform — nroot_transform","text":"","code":"nroot_transform(root = 2, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/nroot_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nth root transform — nroot_transform","text":"root (numeric) nth root used transform. default 2. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/nroot_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nth root transform — nroot_transform","text":" nroot_transform object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/nroot_transform.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"nth root transform — nroot_transform","text":"nroot_transform object inherits following struct classes: [nroot_transform] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/nroot_transform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nth root transform — nroot_transform","text":"","code":"M = nroot_transform(       root = 2)  M = nroot_transform()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ontology_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"ontology cache — ontology_cache","title":"ontology cache — ontology_cache","text":"cached list ontology terms obtained ontology lookup service (OLS) ontology terms specified objects structToolbox.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ontology_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ontology cache — ontology_cache","text":"","code":"ontology_cache()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ontology_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ontology cache — ontology_cache","text":"list cached ontology terms","code":""},{"path":[]},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ontology_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ontology cache — ontology_cache","text":"","code":"cache = ontology_cache()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pairs_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairs filter — pairs_filter","title":"Pairs filter — pairs_filter","text":"filter used study designs paired sampling ensure  measurements source (e.g. patient) represented factor levels interactions.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pairs_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairs filter — pairs_filter","text":"","code":"pairs_filter(factor_name, sample_id, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pairs_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairs filter — pairs_filter","text":"factor_name (character) name sample-meta column use. sample_id (character) Name sample meta column containing sample identifiers. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pairs_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairs filter — pairs_filter","text":" pairs_filter object following output slots: struct object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pairs_filter.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Pairs filter — pairs_filter","text":"pairs_filter object inherits following struct classes: [pairs_filter] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pairs_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairs filter — pairs_filter","text":"","code":"M = pairs_filter(       factor_name = \"V1\",       sample_id = \"V1\")  M=pairs_filter(factor_name='Class',sample_id='ids')"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pareto_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Pareto scaling — pareto_scale","title":"Pareto scaling — pareto_scale","text":"mean sample subtracted samples scaled square root standard deviation. transformed data zero mean.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pareto_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pareto scaling — pareto_scale","text":"","code":"pareto_scale(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pareto_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pareto scaling — pareto_scale","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pareto_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pareto scaling — pareto_scale","text":" pareto_scale object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pareto_scale.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Pareto scaling — pareto_scale","text":"pareto_scale object inherits following struct classes: [pareto_scale] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pareto_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pareto scaling — pareto_scale","text":"","code":"M = pareto_scale()  D = iris_DatasetExperiment() M = pareto_scale() M = model_train(M,D) M = model_predict(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_biplot.html","id":null,"dir":"Reference","previous_headings":"","what":"PCA biplot — pca_biplot","title":"PCA biplot — pca_biplot","text":"scatter plot selected principal component scores overlaid corresponding principal component loadings.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_biplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCA biplot — pca_biplot","text":"","code":"pca_biplot(   components = c(1, 2),   points_to_label = \"none\",   factor_name,   scale_factor = 0.95,   style = \"points\",   label_features = FALSE,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_biplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCA biplot — pca_biplot","text":"components (numeric) principal components used generate plot. default c(1, 2). points_to_label (character) points_to_label. Allowed values limited following: \"none\": samples labelled plot. \"\": samples labelled plot. \"outliers\": Potential outliers labelled plot. default \"none\". factor_name (character) name sample-meta column use. scale_factor (numeric) scaling factor applied loadings. default 0.95. style (character) Plot style. Allowed values limited following: \"points\": Loadings scores plotted scatter plot. \"arrows\": loadings plotted arrow vectors. default \"points\". label_features (logical) Add feature labels. Allowed values limited following: \"TRUE\": Features labelled. \"FALSE\": Features labelled. default FALSE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_biplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCA biplot — pca_biplot","text":"  pca_biplot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_biplot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PCA biplot — pca_biplot","text":"pca_biplot object inherits following struct classes: [pca_biplot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_biplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCA biplot — pca_biplot","text":"","code":"M = pca_biplot(       components = c(1, 2),       points_to_label = \"none\",       factor_name = \"V1\",       scale_factor = 0.95,       style = \"points\",       label_features = FALSE)  C = pca_biplot(factor_name='Species')"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_correlation_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"PCA correlation plot — pca_correlation_plot","title":"PCA correlation plot — pca_correlation_plot","text":"plot correlation variables/features selected principal component scores. Features high correlation well represented selected component(s)","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_correlation_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCA correlation plot — pca_correlation_plot","text":"","code":"pca_correlation_plot(components = c(1, 2), ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_correlation_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCA correlation plot — pca_correlation_plot","text":"components (numeric) Principal Components used generate plot. default c(1, 2). ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_correlation_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCA correlation plot — pca_correlation_plot","text":"  pca_correlation_plot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_correlation_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PCA correlation plot — pca_correlation_plot","text":"pca_correlation_plot object inherits following struct classes: [pca_correlation_plot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_correlation_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCA correlation plot — pca_correlation_plot","text":"","code":"M = pca_correlation_plot(       components = c(1, 2))  C = pca_correlation_plot()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_dstat_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"d-statistic plot — pca_dstat_plot","title":"d-statistic plot — pca_dstat_plot","text":"bar chart d-statistics samples input PCA model. Samples indicated threshold considered outlying.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_dstat_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"d-statistic plot — pca_dstat_plot","text":"","code":"pca_dstat_plot(number_components = 2, alpha = 0.05, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_dstat_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"d-statistic plot — pca_dstat_plot","text":"number_components (numeric) number principal components use. default 2. alpha (numeric) confidence threshold rejecting samples based d-statistic. default 0.05. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_dstat_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"d-statistic plot — pca_dstat_plot","text":"  pca_dstat_plot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_dstat_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"d-statistic plot — pca_dstat_plot","text":"pca_dstat_plot object inherits following struct classes: [pca_dstat_plot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_dstat_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"d-statistic plot — pca_dstat_plot","text":"","code":"M = pca_dstat_plot(       number_components = 2,       alpha = 0.95)  C = pca_dstat_plot()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_loadings_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"PCA loadings plot — pca_loadings_plot","title":"PCA loadings plot — pca_loadings_plot","text":"barchart (one component) scatter plot (two components) selected principal component loadings.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_loadings_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCA loadings plot — pca_loadings_plot","text":"","code":"pca_loadings_plot(   components = c(1, 2),   style = \"points\",   label_features = NULL,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_loadings_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCA loadings plot — pca_loadings_plot","text":"components (numeric) principal components used generate plot. default c(1, 2). style (character) Plot style. Allowed values limited following: \"points\": Loadings scores plotted scatter plot. \"arrows\": loadings plotted arrow vectors. default \"points\". label_features (character, NULL) Feature labels. Allowed values limited following: \"character()\": vector labels features. \"NULL\": labels. \"row.names\": Labels extracted column names data matrix. default NULL. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_loadings_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCA loadings plot — pca_loadings_plot","text":"  pca_loadings_plot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_loadings_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PCA loadings plot — pca_loadings_plot","text":"pca_loadings_plot object inherits following struct classes: [pca_loadings_plot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_loadings_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCA loadings plot — pca_loadings_plot","text":"","code":"M = pca_loadings_plot(       components = c(1, 2),       style = \"points\",       label_features = NULL)  C = pca_loadings_plot()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_scores_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"PCA scores plot — pca_scores_plot","title":"PCA scores plot — pca_scores_plot","text":"Plots 2d scatter plot selected components","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_scores_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PCA scores plot — pca_scores_plot","text":"","code":"pca_scores_plot(   xcol = \"PC1\",   ycol = \"PC2\",   points_to_label = \"none\",   factor_name,   ellipse = \"all\",   ellipse_type = \"norm\",   ellipse_confidence = 0.95,   label_filter = character(0),   label_factor = \"rownames\",   label_size = 3.88,   components = NULL,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_scores_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PCA scores plot — pca_scores_plot","text":"xcol (numeric, integer, character) column name, index, data plot x-axis. default \"PC1\". ycol (numeric, integer, character) column name, index, data plot y-axis. default \"PC2\". points_to_label (character) Points label. Allowed values limited following: \"none\": samples labels displayed. \"\": labels samples displayed. \"outliers\": Labels potential outlier samples displayed. default \"none\". factor_name (character) name sample-meta column use. ellipse (character) Plot ellipses. Allowed values limited following: \"\": Ellipses plotted groups samples. \"group\": Ellipses plotted groups. \"none\": Ellipses included plot. \"sample\": ellipse plotted samples (ignoring group). default \"\". ellipse_type (character) Type ellipse. Allowed values limited following: \"norm\": Multivariate normal (p = 0.95). \"t\": Multivariate t (p = 0.95). default \"norm\". ellipse_confidence (numeric) confidence level plotting ellipses. default 0.95. label_filter (character) Labels plotted named groups. zero-length groups included. default character(0). label_factor (character) column name sample_meta use labelling samples plot. \"rownames\" use row names sample_meta. default \"rownames\". label_size (numeric) text size labels. Note Font Units. default 3.88. components (numeric, integer, NULL) principal components used generate plot. provided parameter overrides xcol ycol params. default NULL. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_scores_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PCA scores plot — pca_scores_plot","text":"  pca_scores_plot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_scores_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PCA scores plot — pca_scores_plot","text":"pca_scores_plot object inherits following struct classes: [pca_scores_plot] >> [scatter_chart] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_scores_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PCA scores plot — pca_scores_plot","text":"","code":"M = pca_scores_plot(       components = NULL,       xcol = 1,       ycol = 2,       points_to_label = \"none\",       factor_name = \"V1\",       ellipse = \"all\",       label_filter = character(0),       label_factor = \"rownames\",       label_size = 3.88,       ellipse_type = \"norm\",       ellipse_confidence = 0.95)  D = iris_DatasetExperiment() M = mean_centre() + PCA() M = model_apply(M,D) C = pca_scores_plot(factor_name = 'Species') chart_plot(C,M[2])"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_scree_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Scree plot — pca_scree_plot","title":"Scree plot — pca_scree_plot","text":"plot percent variance cumulative percent variance components PCA model.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_scree_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scree plot — pca_scree_plot","text":"","code":"pca_scree_plot(max_pc = 15, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_scree_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scree plot — pca_scree_plot","text":"max_pc (numeric, integer) maximum number components include plot. default 15. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_scree_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scree plot — pca_scree_plot","text":"  pca_scree_plot  object. object output slots. See chart_plot struct package plot chart object. struct object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_scree_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Scree plot — pca_scree_plot","text":"pca_scree_plot object inherits following struct classes: [pca_scree_plot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pca_scree_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scree plot — pca_scree_plot","text":"","code":"M = pca_scree_plot(       max_pc = 15)  C = pca_scree_plot()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permutation_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation test — permutation_test","title":"Permutation test — permutation_test","text":"permutation test generates \"null\" model randomising response (regression models) group labels (classification models). repeated many times generate distribution performance metrics null model. distribution can compared performance true model. overlap true null model performances model overfitted.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permutation_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation test — permutation_test","text":"","code":"permutation_test(number_of_permutations = 50, factor_name, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permutation_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permutation test — permutation_test","text":"number_of_permutations (numeric, integer) number permutations. default 50. factor_name (character) name sample-meta column use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permutation_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permutation test — permutation_test","text":" permutation_test object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permutation_test.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Permutation test — permutation_test","text":"permutation_test object inherits following struct classes: [permutation_test] >> [resampler] >> [iterator] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permutation_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permutation test — permutation_test","text":"","code":"M = permutation_test(       number_of_permutations = 100,       factor_name = \"V1\")  I=permutation_test(factor_name='Species')"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permutation_test_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"permutation_test_plot class — permutation_test_plot","title":"permutation_test_plot class — permutation_test_plot","text":"Plots results permutation test.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permutation_test_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"permutation_test_plot class — permutation_test_plot","text":"","code":"permutation_test_plot(style = \"boxplot\", binwidth = 0.05, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permutation_test_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"permutation_test_plot class — permutation_test_plot","text":"style plot style. One 'boxplot', 'violin', 'histogram', 'density' 'scatter'. binwidth Binwidth \"histogram\" style. Ignored styles. ... additional slots values passed struct_class","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permutation_test_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"permutation_test_plot class — permutation_test_plot","text":"struct object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permutation_test_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"permutation_test_plot class — permutation_test_plot","text":"","code":"C = permutation_test_plot(style='boxplot')"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permute_sample_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Permute Sample Order — permute_sample_order","title":"Permute Sample Order — permute_sample_order","text":"order samples data matrix randomly permuted. relationship samples sample meta data maintained.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permute_sample_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permute Sample Order — permute_sample_order","text":"","code":"permute_sample_order(number_of_permutations = 10, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permute_sample_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Permute Sample Order — permute_sample_order","text":"number_of_permutations (numeric, integer) number times sample order permuted. default 10. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permute_sample_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Permute Sample Order — permute_sample_order","text":" permute_sample_order object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permute_sample_order.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Permute Sample Order — permute_sample_order","text":"permute_sample_order object inherits following struct classes: [permute_sample_order] >> [resampler] >> [iterator] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/permute_sample_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Permute Sample Order — permute_sample_order","text":"","code":"M = permute_sample_order(       number_of_permutations = 100)  C = permute_sample_order()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_regcoeff_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"pls_regcoeff_plot class — pls_regcoeff_plot","title":"pls_regcoeff_plot class — pls_regcoeff_plot","text":"Plots regression coefficients PLSDA model. Plots regression coefficient scores PLSDA model","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_regcoeff_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pls_regcoeff_plot class — pls_regcoeff_plot","text":"","code":"pls_regcoeff_plot(ycol = 1, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_regcoeff_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pls_regcoeff_plot class — pls_regcoeff_plot","text":"ycol (character, numeric, integer) Y column plot. default 1. ... additional slots values passed struct_class","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_regcoeff_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pls_regcoeff_plot class — pls_regcoeff_plot","text":"  pls_regcoeff_plot  object. object output slots. See chart_plot struct package plot chart object. struct object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_regcoeff_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"pls_regcoeff_plot class — pls_regcoeff_plot","text":"object makes use functionality following packages: pls ggplot2","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_regcoeff_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"pls_regcoeff_plot class — pls_regcoeff_plot","text":"pls_regcoeff_plot object inherits following struct classes: [pls_regcoeff_plot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_regcoeff_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"pls_regcoeff_plot class — pls_regcoeff_plot","text":"Liland K, Mevik B, Wehrens R (2023). pls: Partial Least Squares Principal Component Regression. R package version 2.8-3, https://CRAN.R-project.org/package=pls. Wickham H (2016). ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York. ISBN 978-3-319-24277-4, https://ggplot2.tidyverse.org.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_regcoeff_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pls_regcoeff_plot class — pls_regcoeff_plot","text":"","code":"M = pls_regcoeff_plot(       ycol = 1)  D = iris_DatasetExperiment() M = mean_centre()+PLSDA(factor_name='Species') M = model_apply(M,D)  C = pls_regcoeff_plot(ycol='setosa') chart_plot(C,M[2])"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_scores_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"PLSDA scores plot — pls_scores_plot","title":"PLSDA scores plot — pls_scores_plot","text":"scatter plot selected PLSDA scores.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_scores_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PLSDA scores plot — pls_scores_plot","text":"","code":"pls_scores_plot(   xcol = \"LV1\",   ycol = \"LV2\",   points_to_label = \"none\",   factor_name,   ellipse = \"all\",   ellipse_type = \"norm\",   ellipse_confidence = 0.95,   label_filter = character(0),   label_factor = \"rownames\",   label_size = 3.88,   components = NULL,   ... )  plsda_scores_plot(   xcol = \"LV1\",   ycol = \"LV2\",   points_to_label = \"none\",   factor_name,   ellipse = \"all\",   ellipse_type = \"norm\",   ellipse_confidence = 0.95,   label_filter = character(0),   label_factor = \"rownames\",   label_size = 3.88,   components = NULL,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_scores_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PLSDA scores plot — pls_scores_plot","text":"xcol (numeric, integer, character) column name, index, data plot x-axis. default \"LV1\". ycol (numeric, integer, character) column name, index, data plot y-axis. default \"LV2\". points_to_label (character) Points label. Allowed values limited following: \"none\": samples labels displayed. \"\": labels samples displayed. \"outliers\": Labels potential outlier samples displayed. default \"none\". factor_name (character) name sample-meta column use. ellipse (character) Plot ellipses. Allowed values limited following: \"\": Ellipses plotted groups samples. \"group\": Ellipses plotted groups. \"none\": Ellipses included plot. \"sample\": ellipse plotted samples (ignoring group). default \"\". ellipse_type (character) Type ellipse. Allowed values limited following: \"norm\": Multivariate normal (p = 0.95). \"t\": Multivariate t (p = 0.95). default \"norm\". ellipse_confidence (numeric) confidence level plotting ellipses. default 0.95. label_filter (character) Labels plotted named groups. zero-length groups included. default character(0). label_factor (character) column name sample_meta use labelling samples plot. \"rownames\" use row names sample_meta. default \"rownames\". label_size (numeric) text size labels. Note Font Units. default 3.88. components (numeric, integer, NULL) principal components used generate plot. provided parameter overrides xcol ycol params. default NULL. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_scores_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PLSDA scores plot — pls_scores_plot","text":"  pls_scores_plot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_scores_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PLSDA scores plot — pls_scores_plot","text":"pls_scores_plot object inherits following struct classes: [pls_scores_plot] >> [scatter_chart] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_scores_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PLSDA scores plot — pls_scores_plot","text":"","code":"M = pls_scores_plot(       components = NULL,       xcol = 1,       ycol = 2,       points_to_label = \"none\",       factor_name = \"V1\",       ellipse = \"all\",       label_filter = character(0),       label_factor = \"rownames\",       label_size = 3.88,       ellipse_type = \"norm\",       ellipse_confidence = 0.95)  D = iris_DatasetExperiment() M = mean_centre()+PLSDA(factor_name='Species') M = model_apply(M,D)  C = pls_scores_plot(factor_name='Species') chart_plot(C,M[2])"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_vip_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"PLSDA VIP plot — pls_vip_plot","title":"PLSDA VIP plot — pls_vip_plot","text":"plot Variable Importance Projection (VIP) scores PLSDA model.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_vip_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PLSDA VIP plot — pls_vip_plot","text":"","code":"pls_vip_plot(threshold = 1, ycol = 1, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_vip_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PLSDA VIP plot — pls_vip_plot","text":"threshold (numeric, integer) threshold indicating significant features. default 1. ycol (character, numeric, integer) column Y block plotted. default 1. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_vip_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PLSDA VIP plot — pls_vip_plot","text":"  pls_vip_plot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_vip_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PLSDA VIP plot — pls_vip_plot","text":"object makes use functionality following packages: pls ggplot2","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_vip_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PLSDA VIP plot — pls_vip_plot","text":"pls_vip_plot object inherits following struct classes: [pls_vip_plot] >> [chart] >> [stato] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_vip_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PLSDA VIP plot — pls_vip_plot","text":"Liland K, Mevik B, Wehrens R (2023). pls: Partial Least Squares Principal Component Regression. R package version 2.8-3, https://CRAN.R-project.org/package=pls. Wickham H (2016). ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York. ISBN 978-3-319-24277-4, https://ggplot2.tidyverse.org.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pls_vip_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PLSDA VIP plot — pls_vip_plot","text":"","code":"M = pls_vip_plot(       threshold = 1,       ycol = 1)  D = iris_DatasetExperiment() M = mean_centre()+PLSDA(factor_name='Species') M = model_apply(M,D)  C = pls_vip_plot(ycol='setosa') chart_plot(C,M[2])"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_feature_importance_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"PLSDA feature importance summary plot — plsda_feature_importance_plot","title":"PLSDA feature importance summary plot — plsda_feature_importance_plot","text":"plot selected feature significance metric PLSDA model top selected features.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_feature_importance_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PLSDA feature importance summary plot — plsda_feature_importance_plot","text":"","code":"plsda_feature_importance_plot(n_features = 30, metric = \"vip\", ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_feature_importance_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PLSDA feature importance summary plot — plsda_feature_importance_plot","text":"n_features (numeric, integer) number features include summary. default 30. metric (character) Metric plot. Allowed values limited following: \"sr\": Plot Selectivity Ratio. \"sr_pvalue\": Plot SR p-values. \"vip\": Plot Variable Importance Projection scores. default \"vip\". ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_feature_importance_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PLSDA feature importance summary plot — plsda_feature_importance_plot","text":"  plsda_feature_importance_plot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_feature_importance_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PLSDA feature importance summary plot — plsda_feature_importance_plot","text":"object makes use functionality following packages: pls ggplot2 reshape2 cowplot","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_feature_importance_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PLSDA feature importance summary plot — plsda_feature_importance_plot","text":"plsda_feature_importance_plot object inherits following struct classes: [plsda_feature_importance_plot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_feature_importance_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PLSDA feature importance summary plot — plsda_feature_importance_plot","text":"Liland K, Mevik B, Wehrens R (2023). pls: Partial Least Squares Principal Component Regression. R package version 2.8-3, https://CRAN.R-project.org/package=pls. Wickham H (2016). ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York. ISBN 978-3-319-24277-4, https://ggplot2.tidyverse.org. Wickham H (2007). \"Reshaping Data reshape Package.\" Journal Statistical Software, 21(12), 1-20. http://www.jstatsoft.org/v21/i12/. Wilke C (2023). cowplot: Streamlined Plot Theme Plot Annotations 'ggplot2'. R package version 1.1.2, https://CRAN.R-project.org/package=cowplot.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_feature_importance_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PLSDA feature importance summary plot — plsda_feature_importance_plot","text":"","code":"M = plsda_feature_importance_plot(       n_features = 50,       metric = \"vip\")  D = iris_DatasetExperiment() M = mean_centre()+PLSDA(factor_name='Species') M = model_apply(M,D)  C = plsda_feature_importance_plot(n_features=30,metric='vip') chart_plot(C,M[2])"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_predicted_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"PLSDA predicted plot — plsda_predicted_plot","title":"PLSDA predicted plot — plsda_predicted_plot","text":"plot regression coefficients PLSDA model.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_predicted_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PLSDA predicted plot — plsda_predicted_plot","text":"","code":"plsda_predicted_plot(factor_name, style = \"boxplot\", ycol = 1, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_predicted_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PLSDA predicted plot — plsda_predicted_plot","text":"factor_name (character) name sample-meta column use. style (character) Plot style. Allowed values limited following: \"boxplot\": boxplot. \"violin\": violin plot. \"density\": density plot. default \"boxplot\". ycol (character, numeric, integer) column Y block plotted. default 1. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_predicted_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PLSDA predicted plot — plsda_predicted_plot","text":"  plsda_predicted_plot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_predicted_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PLSDA predicted plot — plsda_predicted_plot","text":"object makes use functionality following packages: pls ggplot2","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_predicted_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PLSDA predicted plot — plsda_predicted_plot","text":"plsda_predicted_plot object inherits following struct classes: [plsda_predicted_plot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_predicted_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PLSDA predicted plot — plsda_predicted_plot","text":"Liland K, Mevik B, Wehrens R (2023). pls: Partial Least Squares Principal Component Regression. R package version 2.8-3, https://CRAN.R-project.org/package=pls. Wickham H (2016). ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York. ISBN 978-3-319-24277-4, https://ggplot2.tidyverse.org.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_predicted_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PLSDA predicted plot — plsda_predicted_plot","text":"","code":"M = plsda_predicted_plot(       factor_name = \"V1\",       style = \"boxplot\",       ycol = 1)  D = iris_DatasetExperiment() M = mean_centre()+PLSDA(factor_name='Species') M = model_apply(M,D)  C = plsda_predicted_plot(factor_name='Species') chart_plot(C,M[2])"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_roc_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"PLSDA ROC plot — plsda_roc_plot","title":"PLSDA ROC plot — plsda_roc_plot","text":"Receiver Operator Characteristic (ROC) plot PLSDA models computed adjusting threshold assigning group labels PLS predictions.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_roc_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PLSDA ROC plot — plsda_roc_plot","text":"","code":"plsda_roc_plot(factor_name, ycol = 1, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_roc_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PLSDA ROC plot — plsda_roc_plot","text":"factor_name (character) name sample-meta column use. ycol (character, numeric, integer) column Y block plotted. default 1. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_roc_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PLSDA ROC plot — plsda_roc_plot","text":"  plsda_roc_plot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_roc_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PLSDA ROC plot — plsda_roc_plot","text":"object makes use functionality following packages: pls ggplot2","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_roc_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PLSDA ROC plot — plsda_roc_plot","text":"plsda_roc_plot object inherits following struct classes: [plsda_roc_plot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_roc_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PLSDA ROC plot — plsda_roc_plot","text":"Liland K, Mevik B, Wehrens R (2023). pls: Partial Least Squares Principal Component Regression. R package version 2.8-3, https://CRAN.R-project.org/package=pls. Wickham H (2016). ggplot2: Elegant Graphics Data Analysis. Springer-Verlag New York. ISBN 978-3-319-24277-4, https://ggplot2.tidyverse.org.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsda_roc_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PLSDA ROC plot — plsda_roc_plot","text":"","code":"M = plsda_roc_plot(       factor_name = \"V1\",       ycol = 1)  D = iris_DatasetExperiment() M = mean_centre()+PLSDA(factor_name='Species') M = model_apply(M,D)  C = plsda_roc_plot(factor_name='Species') chart_plot(C,M[2])"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_cook_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Cook's distance barchart — plsr_cook_dist","title":"Cook's distance barchart — plsr_cook_dist","text":"barchart Cook's distance sample used train PLSR model. Cook's distance used estimate influence sample model can used identify potential outliers.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_cook_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cook's distance barchart — plsr_cook_dist","text":"","code":"plsr_cook_dist(ycol = 1, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_cook_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cook's distance barchart — plsr_cook_dist","text":"ycol (numeric, integer, character) y-block column plot. default 1. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_cook_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cook's distance barchart — plsr_cook_dist","text":"  plsr_cook_dist  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_cook_dist.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Cook's distance barchart — plsr_cook_dist","text":"plsr_cook_dist object inherits following struct classes: [plsr_cook_dist] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_cook_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cook's distance barchart — plsr_cook_dist","text":"","code":"M = plsr_cook_dist(       ycol = 1)  C = plsr_cook_dist()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_prediction_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"PLSR prediction plot — plsr_prediction_plot","title":"PLSR prediction plot — plsr_prediction_plot","text":"scatter plot true response values predicted values PLSR model.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_prediction_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PLSR prediction plot — plsr_prediction_plot","text":"","code":"plsr_prediction_plot(ycol = 1, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_prediction_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PLSR prediction plot — plsr_prediction_plot","text":"ycol (numeric, integer, character) y-block column plot. default 1. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_prediction_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PLSR prediction plot — plsr_prediction_plot","text":"  plsr_prediction_plot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_prediction_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PLSR prediction plot — plsr_prediction_plot","text":"plsr_prediction_plot object inherits following struct classes: [plsr_prediction_plot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_prediction_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PLSR prediction plot — plsr_prediction_plot","text":"","code":"M = plsr_prediction_plot(       ycol = 1)  C = plsr_prediction_plot()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_qq_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"PLSR QQ plot — plsr_qq_plot","title":"PLSR QQ plot — plsr_qq_plot","text":"plot quantiles residuals PLSR model quantiles normal distribution.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_qq_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PLSR QQ plot — plsr_qq_plot","text":"","code":"plsr_qq_plot(ycol = 1, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_qq_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PLSR QQ plot — plsr_qq_plot","text":"ycol (numeric, integer, character) y-block column plot. default 1. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_qq_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PLSR QQ plot — plsr_qq_plot","text":"  plsr_qq_plot  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_qq_plot.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PLSR QQ plot — plsr_qq_plot","text":"plsr_qq_plot object inherits following struct classes: [plsr_qq_plot] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_qq_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PLSR QQ plot — plsr_qq_plot","text":"","code":"M = plsr_qq_plot(       ycol = 1)  C = plsr_qq_plot()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_residual_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"PLSR residuals histogram — plsr_residual_hist","title":"PLSR residuals histogram — plsr_residual_hist","text":"histogram residuals PLSR model.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_residual_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PLSR residuals histogram — plsr_residual_hist","text":"","code":"plsr_residual_hist(ycol = 1, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_residual_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PLSR residuals histogram — plsr_residual_hist","text":"ycol (numeric, integer, character) y-block column plot. default 1. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_residual_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PLSR residuals histogram — plsr_residual_hist","text":"  plsr_residual_hist  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_residual_hist.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PLSR residuals histogram — plsr_residual_hist","text":"plsr_residual_hist object inherits following struct classes: [plsr_residual_hist] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/plsr_residual_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PLSR residuals histogram — plsr_residual_hist","text":"","code":"M = plsr_residual_hist(       ycol = 1)  C = plsr_residual_hist()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pqn_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Probabilistic Quotient Normalisation (PQN) — pqn_norm","title":"Probabilistic Quotient Normalisation (PQN) — pqn_norm","text":"PQN used normalise differences concentration samples. makes use Quality Control (QC) samples reference. PQN scales median change relative reference order robust changes caused response perturbation.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pqn_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probabilistic Quotient Normalisation (PQN) — pqn_norm","text":"","code":"pqn_norm(   qc_label = \"QC\",   factor_name,   qc_frac = 0,   sample_frac = 0,   ref_method = \"mean\",   ref_mean = NULL,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pqn_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probabilistic Quotient Normalisation (PQN) — pqn_norm","text":"qc_label (character) label used identify QC samples. default \"QC\". factor_name (character) name sample-meta column use. qc_frac (numeric) value 0 1 indicate minimum proportion QC samples feature must present included computing reference. Default qc_frac = 0. . default 0. sample_frac (numeric) value 0 1 indicate minimum proportion samples feature must present considered computing normalisation coefficients. . default 0. ref_method (character) Reference computation method. Allowed values limited following: \"mean\": reference computed mean samples matching qc_label input. \"median\": reference computed median samples matching qc_label_input. default \"mean\". ref_mean (numeric, NULL) single sample use reference normalisation. set NULL reference computed based input parameters (ref_mean, qc_label etc). . default NULL. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pqn_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probabilistic Quotient Normalisation (PQN) — pqn_norm","text":" pqn_norm object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pqn_norm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Probabilistic Quotient Normalisation (PQN) — pqn_norm","text":"object makes use functionality following packages: pmp","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pqn_norm.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Probabilistic Quotient Normalisation (PQN) — pqn_norm","text":"pqn_norm object inherits following struct classes: [pqn_norm] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pqn_norm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Probabilistic Quotient Normalisation (PQN) — pqn_norm","text":"Jankevics , Lloyd GR, Weber RJM (2023). pmp: Peak Matrix Processing signal batch correction metabolomics datasets. doi:10.18129/B9.bioc.pmp https://doi.org/10.18129/B9.bioc.pmp, R package version 1.14.0, https://bioconductor.org/packages/pmp.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pqn_norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probabilistic Quotient Normalisation (PQN) — pqn_norm","text":"","code":"M = pqn_norm(       qc_label = \"QC\",       factor_name = \"V1\",       qc_frac = 0,       sample_frac = 0,       ref_mean = NULL,       ref_method = \"mean\")  D = iris_DatasetExperiment() M = pqn_norm(factor_name='Species',qc_label='all') M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pqn_norm_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"PQN coefficient histogram — pqn_norm_hist","title":"PQN coefficient histogram — pqn_norm_hist","text":"histogram PQN coefficients features","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pqn_norm_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PQN coefficient histogram — pqn_norm_hist","text":"","code":"pqn_norm_hist(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pqn_norm_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PQN coefficient histogram — pqn_norm_hist","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pqn_norm_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PQN coefficient histogram — pqn_norm_hist","text":"  pqn_norm_hist  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pqn_norm_hist.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"PQN coefficient histogram — pqn_norm_hist","text":"pqn_norm_hist object inherits following struct classes: [pqn_norm_hist] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/pqn_norm_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PQN coefficient histogram — pqn_norm_hist","text":"","code":"M = pqn_norm_hist()  C = pqn_norm_hist()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/prop_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Fisher's exact test for missing values — prop_na","title":"Fisher's exact test for missing values — prop_na","text":"Fisher's exact test used compare number missing values group. Multiple test corrected p-values computed indicate whether significant difference number missing values across groups feature.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/prop_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fisher's exact test for missing values — prop_na","text":"","code":"prop_na(alpha = 0.05, mtc = \"fdr\", factor_name, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/prop_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fisher's exact test for missing values — prop_na","text":"alpha (numeric) p-value cutoff determining significance. default 0.05. mtc (character) Multiple test correction method. Allowed values limited following: \"bonferroni\": Bonferroni correction p-values multiplied number comparisons. \"fdr\": Benjamini Hochberg False Discovery Rate correction. \"none\": correction. default \"fdr\". factor_name (character) name sample-meta column use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/prop_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fisher's exact test for missing values — prop_na","text":" prop_na object following output slots: struct object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/prop_na.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Fisher's exact test for missing values — prop_na","text":"prop_na object inherits following struct classes: [prop_na] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/prop_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fisher's exact test for missing values — prop_na","text":"","code":"M = prop_na(       alpha = 0.05,       mtc = \"fdr\",       factor_name = \"V1\")  M = prop_na(factor_name='Species')"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/r_squared.html","id":null,"dir":"Reference","previous_headings":"","what":"Coefficient of determination (R-squared) — r_squared","title":"Coefficient of determination (R-squared) — r_squared","text":"R-squared metric used assess goodness fit regression models. measures much variance one variable can explained another variable.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/r_squared.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coefficient of determination (R-squared) — r_squared","text":"","code":"r_squared(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/r_squared.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coefficient of determination (R-squared) — r_squared","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/r_squared.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coefficient of determination (R-squared) — r_squared","text":"  r_squared  object. object output slots.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/r_squared.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Coefficient of determination (R-squared) — r_squared","text":"r_squared object inherits following struct classes: [r_squared] >> [metric] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/r_squared.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coefficient of determination (R-squared) — r_squared","text":"","code":"M = r_squared()  MET = r_squared()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Data resampling — resample","title":"Data resampling — resample","text":"New training sets generated original data selecting samples random. can based levels factor whole dataset.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data resampling — resample","text":"","code":"resample(   number_of_iterations = 10,   method = \"split_data\",   factor_name,   p_train = 0.8,   collect = NULL,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data resampling — resample","text":"number_of_iterations (numeric, integer) number training sets generate. default 10. method (character) Resampling method. Allowed values limited following: \"split_data\": Samples training set selected random full dataset. \"stratified_split\": Samples training set randomly selected level chosen factor. \"equal_split\": Samples training set selected random level main factor group sizes equal. default \"split_data\". factor_name (character) name sample-meta column use. p_train (numeric) proportion samples selected training set. default 0.8. collect (NULL, character) name model output collect bootstrap repetitions, addition input metric. default NULL. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/resample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data resampling — resample","text":" resample object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/resample.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Data resampling — resample","text":"resample object inherits following struct classes: [resample] >> [resampler] >> [iterator] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/resample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data resampling — resample","text":"","code":"M = resample(       number_of_iterations = 100,       method = \"split_data\",       factor_name = \"V1\",       p_train = 0.75,       collect = NULL)  I = resample(     number_of_iterations = 10,      factor_name = 'Species',      method = 'split_data',     p_train = 0.8)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/resample_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"resample_chart class — resample_chart","title":"resample_chart class — resample_chart","text":"Plots results resampling.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/resample_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"resample_chart class — resample_chart","text":"","code":"resample_chart(style = \"boxplot\", binwidth = 0.05, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/resample_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"resample_chart class — resample_chart","text":"style plot style. One 'boxplot', 'violin', 'histogram', 'density' 'scatter'. binwidth Binwidth \"histogram\" style. Ignored styles. ... additional slots values passed struct_class","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/resample_chart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"resample_chart class — resample_chart","text":"struct object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/resample_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"resample_chart class — resample_chart","text":"","code":"C = resample_chart(style='boxplot')"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/rsd_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"RSD filter — rsd_filter","title":"RSD filter — rsd_filter","text":"RSD filter calculates relative standard deviation (ratio standard deviation mean) features. feature RSD greater predefined threshold excluded.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/rsd_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RSD filter — rsd_filter","text":"","code":"rsd_filter(rsd_threshold = 20, qc_label = \"QC\", factor_name, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/rsd_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RSD filter — rsd_filter","text":"rsd_threshold (numeric) RSD threshold features removed. default 20. qc_label (character) label used identify QC samples. default \"QC\". factor_name (character) name sample-meta column use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/rsd_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RSD filter — rsd_filter","text":" rsd_filter object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/rsd_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RSD filter — rsd_filter","text":"object makes use functionality following packages: pmp","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/rsd_filter.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"RSD filter — rsd_filter","text":"rsd_filter object inherits following struct classes: [rsd_filter] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/rsd_filter.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"RSD filter — rsd_filter","text":"Jankevics , Lloyd GR, Weber RJM (2023). pmp: Peak Matrix Processing signal batch correction metabolomics datasets. doi:10.18129/B9.bioc.pmp https://doi.org/10.18129/B9.bioc.pmp, R package version 1.14.0, https://bioconductor.org/packages/pmp.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/rsd_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RSD filter — rsd_filter","text":"","code":"M = rsd_filter(       rsd_threshold = 20,       qc_label = \"QC\",       factor_name = \"V1\")  M = rsd_filter(factor_name='Class')"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/rsd_filter_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"RSD histogram — rsd_filter_hist","title":"RSD histogram — rsd_filter_hist","text":"histogram calculated RSD values.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/rsd_filter_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RSD histogram — rsd_filter_hist","text":"","code":"rsd_filter_hist(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/rsd_filter_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RSD histogram — rsd_filter_hist","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/rsd_filter_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RSD histogram — rsd_filter_hist","text":"  rsd_filter_hist  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/rsd_filter_hist.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"RSD histogram — rsd_filter_hist","text":"rsd_filter_hist object inherits following struct classes: [rsd_filter_hist] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/rsd_filter_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RSD histogram — rsd_filter_hist","text":"","code":"M = rsd_filter_hist()  C = rsd_filter_hist()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/run.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs an iterator, applying the chosen model multiple times. — run,bootstrap,DatasetExperiment,metric-method","title":"Runs an iterator, applying the chosen model multiple times. — run,bootstrap,DatasetExperiment,metric-method","text":"Running iterator apply iterator number times DatasetExperiment. example, cross-validation model applied multiple times data, splitting training test sets. input metric object can calculated collected iteration output.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs an iterator, applying the chosen model multiple times. — run,bootstrap,DatasetExperiment,metric-method","text":"","code":"# S4 method for bootstrap,DatasetExperiment,metric run(I, D, MET = NULL)  # S4 method for forward_selection_by_rank,DatasetExperiment,metric run(I, D, MET)  # S4 method for grid_search_1d,DatasetExperiment,metric run(I, D, MET)  # S4 method for kfold_xval,DatasetExperiment,metric run(I, D, MET = NULL)  # S4 method for permutation_test,DatasetExperiment,metric run(I, D, MET = NULL)  # S4 method for permute_sample_order,DatasetExperiment,metric run(I, D, MET)  # S4 method for resample,DatasetExperiment,metric run(I, D, MET)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs an iterator, applying the chosen model multiple times. — run,bootstrap,DatasetExperiment,metric-method","text":"iterator object D DatasetExperiment object MET metric object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs an iterator, applying the chosen model multiple times. — run,bootstrap,DatasetExperiment,metric-method","text":"Modified iterator object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs an iterator, applying the chosen model multiple times. — run,bootstrap,DatasetExperiment,metric-method","text":"","code":"D = iris_DatasetExperiment() # get some data MET = metric()  # use a metric I = example_iterator() # initialise iterator models(I) = example_model() # set the model I = run(I,D,MET) # run #> Warning: no calculation provided for this metric"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/sb_corr.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal/batch correction for mass spectrometry data — sb_corr","title":"Signal/batch correction for mass spectrometry data — sb_corr","text":"Applies Quality Control Robust Spline (QC-RSC) method correct signal drift batch differences mass spectrometry data.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/sb_corr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal/batch correction for mass spectrometry data — sb_corr","text":"","code":"sb_corr(   order_col,   batch_col,   qc_col,   smooth = 0,   use_log = TRUE,   min_qc = 4,   qc_label = \"QC\",   spar_lim = c(-1.5, 1.5),   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/sb_corr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal/batch correction for mass spectrometry data — sb_corr","text":"order_col (character) column name sample_meta indicating run order samples. batch_col (character) column name sample_meta indicating batch sample measured . qc_col (character) column name sample_meta indicating group sample member . smooth (numeric) amount smoothing applied (0 1). set 0 smoothing parameter estimated using leave-one-cross-validation. default 0. use_log (logical) Log tranformation. Allowed values limited following: \"TRUE\": data log transformed prior performing signal correction. \"FALSE\": Signal correction applied input data. default TRUE. min_qc (numeric) minimum number QC samples required signal correction. default 4. qc_label (character) label used identify QC samples. default \"QC\". spar_lim (numeric) two element vector specifying upper lower limits spar = 0. Allows value spar constrained within limits prevent overfitting. default c(-1.5, 1.5). ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/sb_corr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Signal/batch correction for mass spectrometry data — sb_corr","text":" sb_corr object following output slots: struct object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/sb_corr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Signal/batch correction for mass spectrometry data — sb_corr","text":"object makes use functionality following packages: pmp","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/sb_corr.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Signal/batch correction for mass spectrometry data — sb_corr","text":"sb_corr object inherits following struct classes: [sb_corr] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/sb_corr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Signal/batch correction for mass spectrometry data — sb_corr","text":"Jankevics , Lloyd GR, Weber RJM (2023). pmp: Peak Matrix Processing signal batch correction metabolomics datasets. doi:10.18129/B9.bioc.pmp https://doi.org/10.18129/B9.bioc.pmp, R package version 1.14.0, https://bioconductor.org/packages/pmp. Kirwan JA, Broadhurst DI, Davidson RL, Viant MR (2013). \"Characterising correcting batch variation automated direct infusion mass spectrometry (DIMS) metabolomics workflow.\" Analytical Bioanalytical Chemistry, 405(15), 5147-5157.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/sb_corr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signal/batch correction for mass spectrometry data — sb_corr","text":"","code":"M = sb_corr(       order_col = character(0),       batch_col = character(0),       qc_col = character(0),       smooth = 0,       use_log = FALSE,       min_qc = 4,       qc_label = \"QC\",       spar_lim = c(-1.5, 1.5))  M = sb_corr(order_col='run_order',batch_col='batch_no',qc_col='class')"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/scatter_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"Group scatter chart — scatter_chart","title":"Group scatter chart — scatter_chart","text":"Plots 2d scatter plot input data.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/scatter_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group scatter chart — scatter_chart","text":"","code":"scatter_chart(   xcol = 1,   ycol = 2,   points_to_label = \"none\",   factor_name = \"none\",   ellipse = \"all\",   ellipse_type = \"norm\",   ellipse_confidence = 0.95,   label_filter = character(0),   label_factor = \"rownames\",   label_size = 3.88,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/scatter_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group scatter chart — scatter_chart","text":"xcol (numeric, integer, character) column name, index, data plot x-axis. default 1. ycol (numeric, integer, character) column name, index, data plot y-axis. default 2. points_to_label (character) Points label. Allowed values limited following: \"none\": samples labels displayed. \"\": labels samples displayed. \"outliers\": Labels potential outlier samples displayed. default \"none\". factor_name (character) name sample-meta column use. default \"none\". ellipse (character) Plot ellipses. Allowed values limited following: \"\": Ellipses plotted groups samples. \"group\": Ellipses plotted groups. \"none\": Ellipses included plot. \"sample\": ellipse plotted samples (ignoring group). default \"\". ellipse_type (character) Type ellipse. Allowed values limited following: \"norm\": Multivariate normal (p = 0.95). \"t\": Multivariate t (p = 0.95). default \"norm\". ellipse_confidence (numeric) confidence level plotting ellipses. default 0.95. label_filter (character) Labels plotted named groups. zero-length groups included. default character(0). label_factor (character) column name sample_meta use labelling samples plot. \"rownames\" use row names sample_meta. default \"rownames\". label_size (numeric) text size labels. Note Font Units. default 3.88. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/scatter_chart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group scatter chart — scatter_chart","text":"  scatter_chart  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/scatter_chart.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Group scatter chart — scatter_chart","text":"scatter_chart object inherits following struct classes: [scatter_chart] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/scatter_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group scatter chart — scatter_chart","text":"","code":"M = scatter_chart(       xcol = 1,       ycol = 2,       points_to_label = \"none\",       factor_name = \"V1\",       ellipse = \"all\",       label_filter = character(0),       label_factor = \"rownames\",       label_size = 3.88,       ellipse_type = \"norm\",       ellipse_confidence = 0.95)  D = iris_DatasetExperiment() C = scatter_chart(         xcol = 'Petal.Width',         ycol = 'Sepal.Width',         factor_name = 'Species'     ) chart_plot(C,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/split_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Split data — split_data","title":"Split data — split_data","text":"data matrix divided two subsets.predefined proportion samples randomly selected training set, remaining samples used test set.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/split_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split data — split_data","text":"","code":"split_data(p_train, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/split_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split data — split_data","text":"p_train (numeric) proportion samples selected training set. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/split_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split data — split_data","text":" split_data object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/split_data.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Split data — split_data","text":"split_data object inherits following struct classes: [split_data] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/split_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split data — split_data","text":"","code":"M = split_data(       p_train = 0.75)  M = split_data(p_train=0.75)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/stratified_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratified sampling — stratified_split","title":"Stratified sampling — stratified_split","text":"dataset divided two subsets. predefined proportion samples level factor selected training set, remaining samples used test set. stratification factor level means relative number samples per level approximately equal original dataset.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/stratified_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratified sampling — stratified_split","text":"","code":"stratified_split(p_train, factor_name, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/stratified_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratified sampling — stratified_split","text":"p_train (numeric) proportion samples selected training set. factor_name (character) name sample-meta column use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/stratified_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratified sampling — stratified_split","text":" stratified_split object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/stratified_split.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Stratified sampling — stratified_split","text":"stratified_split object inherits following struct classes: [stratified_split] >> [split_data] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/stratified_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stratified sampling — stratified_split","text":"","code":"M = stratified_split(       factor_name = \"V1\",       p_train = 0.75)  D = iris_DatasetExperiment() M = stratified_split(p_train=0.75,factor_name='Species') M = model_apply(M,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/structToolbox.html","id":null,"dir":"Reference","previous_headings":"","what":"structToolbox: Examples of tools built using the Statistics in R Using Class Templates (struct) package — structToolbox","title":"structToolbox: Examples of tools built using the Statistics in R Using Class Templates (struct) package — structToolbox","text":"package extends classes defined struct package","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/svm_plot_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"SVM scatter plot — svm_plot_2d","title":"SVM scatter plot — svm_plot_2d","text":"scatter plot input data group calculated boundary SVM model.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/svm_plot_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SVM scatter plot — svm_plot_2d","text":"","code":"svm_plot_2d(factor_name, npoints = 100, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/svm_plot_2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SVM scatter plot — svm_plot_2d","text":"factor_name (character) name sample-meta column use. npoints (numeric) number grid points used plot boundary. default 100. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/svm_plot_2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SVM scatter plot — svm_plot_2d","text":"  svm_plot_2d  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/svm_plot_2d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SVM scatter plot — svm_plot_2d","text":"object makes use functionality following packages: e1071","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/svm_plot_2d.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"SVM scatter plot — svm_plot_2d","text":"svm_plot_2d object inherits following struct classes: [svm_plot_2d] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/svm_plot_2d.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SVM scatter plot — svm_plot_2d","text":"Meyer D, Dimitriadou E, Hornik K, Weingessel , Leisch F (2023). e1071: Misc Functions Department Statistics, Probability Theory Group (Formerly: E1071), TU Wien. R package version 1.7-14, https://CRAN.R-project.org/package=e1071.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/svm_plot_2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SVM scatter plot — svm_plot_2d","text":"","code":"M = svm_plot_2d(       factor_name = \"V1\",       npoints = 100)  D = iris_DatasetExperiment() M = filter_smeta(mode='exclude',levels='setosa',factor_name='Species') +     mean_centre()+PCA(number_components=2)+     SVM(factor_name='Species',kernel='linear') M = model_apply(M,D)  C = svm_plot_2d(factor_name='Species') chart_plot(C,M[4],predicted(M[3]))"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE.html","id":null,"dir":"Reference","previous_headings":"","what":"tSNE — tSNE","title":"tSNE — tSNE","text":"t-Distributed Stochastic Neighbor Embedding.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tSNE — tSNE","text":"","code":"tSNE(   dims = 2,   perplexity = 30,   max_iter = 100,   theta = 0.5,   check_duplicates = FALSE,   init = NULL,   eta = 200,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tSNE — tSNE","text":"dims (numeric) number tSNE dimensions computed. default 2. perplexity (numeric) Perplexity parameter. default 30. max_iter (numeric) maximum number tSNE iterations. default 100. theta (numeric) Speed/accuracy trade-. value 0 gives exact tSNE. default 0.5. check_duplicates (logical) Check duplicates. Allowed values limited following: \"TRUE\": Checks presence exact duplicate samples. \"FALSE\": check exact duplicate samples. default FALSE. init (NULL, data.frame, DatasetExperiment) set coordinates initialising tSNE algorithm. NULL uses random initialisation. default NULL. eta (numeric) learning rate parameter. default 200. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tSNE — tSNE","text":" tSNE object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"tSNE — tSNE","text":"object makes use functionality following packages: Rtsne","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"tSNE — tSNE","text":"tSNE object inherits following struct classes: [tSNE] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"tSNE — tSNE","text":"Krijthe JH (2015). Rtsne: T-Distributed Stochastic Neighbor Embedding using Barnes-Hut Implementation. R package version 0.17, https://github.com/jkrijthe/Rtsne. van der Maaten L, Hinton G (2008). \"Visualizing High-Dimensional Data Using t-SNE.\" Journal Machine Learning Research, 9, 2579-2605. van der Maaten L (2014). \"Accelerating t-SNE using Tree-Based Algorithms.\" Journal Machine Learning Research, 15, 3221-3245.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tSNE — tSNE","text":"","code":"M = tSNE(       dims = 2,       perplexity = 30,       max_iter = 1000,       theta = 0.5,       check_duplicates = FALSE,       init = NULL,       eta = 200)  M = tSNE()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature boxplot — tSNE_scatter","title":"Feature boxplot — tSNE_scatter","text":"plots new representation data applying tSNE.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature boxplot — tSNE_scatter","text":"","code":"tSNE_scatter(factor_name, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE_scatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature boxplot — tSNE_scatter","text":"factor_name (character) name sample-meta column use. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE_scatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Feature boxplot — tSNE_scatter","text":"  tSNE_scatter  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE_scatter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Feature boxplot — tSNE_scatter","text":"object makes use functionality following packages: Rtsne","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE_scatter.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Feature boxplot — tSNE_scatter","text":"tSNE_scatter object inherits following struct classes: [tSNE_scatter] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE_scatter.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Feature boxplot — tSNE_scatter","text":"Krijthe JH (2015). Rtsne: T-Distributed Stochastic Neighbor Embedding using Barnes-Hut Implementation. R package version 0.17, https://github.com/jkrijthe/Rtsne. van der Maaten L, Hinton G (2008). \"Visualizing High-Dimensional Data Using t-SNE.\" Journal Machine Learning Research, 9, 2579-2605. van der Maaten L (2014). \"Accelerating t-SNE using Tree-Based Algorithms.\" Journal Machine Learning Research, 15, 3221-3245.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tSNE_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature boxplot — tSNE_scatter","text":"","code":"M = tSNE_scatter(       factor_name = \"V1\")  M = tSNE_scatter(factor_name='Species')"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tic_chart.html","id":null,"dir":"Reference","previous_headings":"","what":"Total Ion Count chart. — tic_chart","title":"Total Ion Count chart. — tic_chart","text":"scatter plot Total Ion Count (sum sample) versus run order.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tic_chart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total Ion Count chart. — tic_chart","text":"","code":"tic_chart(run_order, factor_name, connected = FALSE, ...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tic_chart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total Ion Count chart. — tic_chart","text":"run_order (character) column name sample_meta indicating run order samples. factor_name (character) name sample-meta column use. connected (logical) Plot samples connected grey line. default FALSE. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tic_chart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total Ion Count chart. — tic_chart","text":"  tic_chart  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tic_chart.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Total Ion Count chart. — tic_chart","text":"tic_chart object inherits following struct classes: [tic_chart] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/tic_chart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total Ion Count chart. — tic_chart","text":"","code":"M = tic_chart(       factor_name = \"V1\",       run_order = character(0),       connected = FALSE)  D = iris_DatasetExperiment() D$sample_meta$run_order=1:nrow(D) C = tic_chart(factor_name='Species',run_order='run_order') chart_plot(C,D)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"t-test — ttest","title":"t-test — ttest","text":"t-test compares means two factor levels. Multiple-test corrected p-values used indicate significance computed difference features.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"t-test — ttest","text":"","code":"ttest(   alpha = 0.05,   mtc = \"fdr\",   factor_names,   paired = FALSE,   paired_factor = character(0),   equal_variance = FALSE,   conf_level = 0.95,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"t-test — ttest","text":"alpha (numeric) p-value cutoff determining significance. default 0.05. mtc (character) Multiple test correction method. Allowed values limited following: \"bonferroni\": Bonferroni correction p-values multiplied number comparisons. \"fdr\": Benjamini Hochberg False Discovery Rate correction. \"none\": correction. default \"fdr\". factor_names (character) name sample meta column(s) use. paired (logical) Apply paired t-test. default FALSE. paired_factor (character) factor name encodes sample id pairing. default character(0). equal_variance (logical) Equal variance. Allowed values limited following: \"TRUE\": variance group treated equal using pooled variance estimate variance. \"FALSE\": variance group assumed equal Welch (Satterthwaite) approximation used. default FALSE. conf_level (numeric) confidence level interval. default 0.95. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"t-test — ttest","text":" ttest object following output slots:","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ttest.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"t-test — ttest","text":"ttest object inherits following struct classes: [ttest] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"t-test — ttest","text":"","code":"M = ttest(       alpha = 0.05,       mtc = \"fdr\",       factor_names = \"V1\",       paired = FALSE,       paired_factor = \"NA\",       equal_variance = FALSE,       conf_level = 0.95)  M = ttest(factor_name='Class')"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/vec_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector normalisation — vec_norm","title":"Vector normalisation — vec_norm","text":"samples data matrix normalised account differences concentration scaling sample sum squares equal 1.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/vec_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector normalisation — vec_norm","text":"","code":"vec_norm(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/vec_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector normalisation — vec_norm","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/vec_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector normalisation — vec_norm","text":" vec_norm object following output slots: struct object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/vec_norm.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Vector normalisation — vec_norm","text":"vec_norm object inherits following struct classes: [vec_norm] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/vec_norm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector normalisation — vec_norm","text":"","code":"M = vec_norm()  M = vec_norm()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/wilcox_p_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Histogram of p values — wilcox_p_hist","title":"Histogram of p values — wilcox_p_hist","text":"histogram p values wilcoxon signed rank test","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/wilcox_p_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histogram of p values — wilcox_p_hist","text":"","code":"wilcox_p_hist(...)"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/wilcox_p_hist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histogram of p values — wilcox_p_hist","text":"... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/wilcox_p_hist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histogram of p values — wilcox_p_hist","text":"  wilcox_p_hist  object. object output slots. See chart_plot struct package plot chart object.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/wilcox_p_hist.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"Histogram of p values — wilcox_p_hist","text":"wilcox_p_hist object inherits following struct classes: [wilcox_p_hist] >> [chart] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/wilcox_p_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Histogram of p values — wilcox_p_hist","text":"","code":"M = wilcox_p_hist()  M = wilcox_p_hist()"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/wilcox_test.html","id":null,"dir":"Reference","previous_headings":"","what":"wilcoxon signed rank test — wilcox_test","title":"wilcoxon signed rank test — wilcox_test","text":"Mann-Whitney-Wilcoxon signed rank test compares ,ranks values two groups. non-parametric equivalent t-test. Multiple test corrected p-values computed indicators significance variable/feature.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/wilcox_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"wilcoxon signed rank test — wilcox_test","text":"","code":"wilcox_test(   alpha = 0.05,   mtc = \"fdr\",   factor_names,   paired = FALSE,   paired_factor = character(0),   conf_level = 0.95,   ... )"},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/wilcox_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"wilcoxon signed rank test — wilcox_test","text":"alpha (numeric) p-value cutoff determining significance. default 0.05. mtc (character) Multiple test correction method. Allowed values limited following: \"bonferroni\": Bonferroni correction p-values multiplied number comparisons. \"fdr\": Benjamini Hochberg False Discovery Rate correction. \"none\": correction. default \"fdr\". factor_names (character) name sample-meta column use. paired (logical) Apply paired test. default FALSE. paired_factor (character) factor name containing sample ids paired data. default character(0). conf_level (numeric) confidence level interval. default 0.95. ... Additional slots values passed struct_class.","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/wilcox_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"wilcoxon signed rank test — wilcox_test","text":" wilcox_test object following output slots: struct object","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/wilcox_test.html","id":"inheritance","dir":"Reference","previous_headings":"","what":"Inheritance","title":"wilcoxon signed rank test — wilcox_test","text":"wilcox_test object inherits following struct classes: [wilcox_test] >> [model] >> [struct_class]","code":""},{"path":"https://computational-metabolomics.github.io/structToolbox/reference/wilcox_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"wilcoxon signed rank test — wilcox_test","text":"","code":"M = wilcox_test(       alpha = 0.05,       mtc = \"fdr\",       factor_names = \"V1\",       paired = FALSE,       paired_factor = character(0),       conf_level = 0.95)  M = wilcox_test(factor_name='Class')"}]
