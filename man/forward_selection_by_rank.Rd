% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/forward_selection_by_rank_class.R
\name{forward_selection_by_rank}
\alias{forward_selection_by_rank}
\title{Forward selection by rank}
\usage{
forward_selection_by_rank(
  min_no_vars = 1,
  max_no_vars = 100,
  step_size = 1,
  factor_name,
  variable_rank,
  ...
)
}
\arguments{
\item{min_no_vars}{(numeric) The minimum number of variables to include in the model. The default is \code{1}.}

\item{max_no_vars}{(numeric) The maximum number of variables to include in the model. The default is \code{100}.}

\item{step_size}{(numeric) The incremental change in number of features in the model. The default is \code{1}.}

\item{factor_name}{(character) The name of a sample-meta column to use.}

\item{variable_rank}{(numeric, integer) The values used to rank the features.}

\item{...}{Additional slots and values passed to \code{struct_class}.}
}
\value{
A  \code{forward_selection_by_rank} object.
}
\description{
A model is trained and performance metric computed by including increasing numbers of features in the model. The features to be included in each step are defined by their rank, which is computed from another variable e.g. VIP score. An "optimal"subset of features is suggested by minimising the input performance metric.
}
\examples{
# some data
D = MTBLS79_DatasetExperiment(filtered=TRUE)

# normalise, impute and scale then remove QCs
P = pqn_norm(qc_label='QC',factor_name='class') +
    knn_impute(neighbours=5) +
    glog_transform(qc_label='QC',factor_name='class') +
    filter_smeta(mode='exclude',levels='QC',factor_name='class')
P = model_apply(P,D)
D = predicted(P)

# forward selection using a PLSDA model
M = forward_selection_by_rank(factor_name='class',
                             min_no_vars=2,
                             max_no_vars=11,
                             variable_rank=1:2063) *
    (mean_centre() + PLSDA(number_components=1,
                           factor_name='class'))
M = run(M,D,balanced_accuracy())

}
